{
    "version": 3,
    "deployment": {
        "manifest": {
            "time": "2022-02-18T11:26:46.721461+08:00",
            "magic": "716f0bdad25b3b8e2145d2be034ba3ea4bdfb2c5330ba1d595d227e45289fbfd",
            "version": "v3.24.1"
        },
        "secrets_providers": {
            "type": "service",
            "state": {
                "url": "https://api.pulumi.com",
                "owner": "drunkcoding",
                "project": "azure-drunk-aks",
                "stack": "dev"
            }
        },
        "resources": [
            {
                "urn": "urn:pulumi:dev::azure-drunk-aks::pulumi:pulumi:Stack::azure-drunk-aks-dev",
                "custom": false,
                "type": "pulumi:pulumi:Stack",
                "outputs": {
                    "location": "southeastasia",
                    "resourceGroupName": "dev-aks-grp-drunk"
                }
            },
            {
                "urn": "urn:pulumi:dev::azure-drunk-aks::pulumi:providers:azure-native::default_1_58_0",
                "custom": true,
                "id": "e02a3ad2-7910-460b-ba9d-c2f29e3506c9",
                "type": "pulumi:providers:azure-native",
                "inputs": {
                    "location": "Southeast Asia",
                    "version": "1.58.0"
                },
                "outputs": {
                    "location": "Southeast Asia",
                    "version": "1.58.0"
                },
                "sequenceNumber": 1
            },
            {
                "urn": "urn:pulumi:dev::azure-drunk-aks::azure-native:resources:ResourceGroup::dev-aks-grp-drunk",
                "custom": true,
                "id": "/subscriptions/f146579d-929c-4f4b-a742-b4ad6ab9ef27/resourceGroups/dev-aks-grp-drunk",
                "type": "azure-native:resources:ResourceGroup",
                "inputs": {
                    "location": "Southeast Asia",
                    "resourceGroupName": "dev-aks-grp-drunk",
                    "tags": {
                        "environment": "dev",
                        "organization": "drunk",
                        "pulumi-project": "azure-drunk-aks"
                    }
                },
                "outputs": {
                    "__inputs": {
                        "4dabf18193072939515e22adb298388d": "1b47061264138c4ac30d75fd1eb44270",
                        "ciphertext": "AAABAK417CpKdQhgwZYM7+Y29RpXamYhmf7z6aA1cihENZ79vQKPQVCj1k5RM/ytctay73cD51BFUR3czMb8sAbV6vAhqvp92IgBCw6l9Onh/tSHGcQisuZOP4KO/vDtMYKbxgnIEuj3Na0HK5zV+HvCYjTolyarJ/rYIgJXzyqkdNAkyi0op2/SbwNnDSG4kSncinpJpSPgFIy1RY3rbL3wP40K13M/S/8d/HzjCDZpriYA/zWmYZjqvYk="
                    },
                    "id": "/subscriptions/f146579d-929c-4f4b-a742-b4ad6ab9ef27/resourceGroups/dev-aks-grp-drunk",
                    "location": "southeastasia",
                    "name": "dev-aks-grp-drunk",
                    "properties": {
                        "provisioningState": "Succeeded"
                    },
                    "tags": {
                        "environment": "dev",
                        "organization": "drunk",
                        "pulumi-project": "azure-drunk-aks"
                    },
                    "type": "Microsoft.Resources/resourceGroups"
                },
                "parent": "urn:pulumi:dev::azure-drunk-aks::pulumi:pulumi:Stack::azure-drunk-aks-dev",
                "provider": "urn:pulumi:dev::azure-drunk-aks::pulumi:providers:azure-native::default_1_58_0::e02a3ad2-7910-460b-ba9d-c2f29e3506c9",
                "propertyDependencies": {
                    "resourceGroupName": null,
                    "tags": null
                },
                "aliases": [
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:resources/v20151101:ResourceGroup::dev-aks-grp-drunk",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:resources/v20160201:ResourceGroup::dev-aks-grp-drunk",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:resources/v20160701:ResourceGroup::dev-aks-grp-drunk",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:resources/v20160901:ResourceGroup::dev-aks-grp-drunk",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:resources/v20170510:ResourceGroup::dev-aks-grp-drunk",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:resources/v20180201:ResourceGroup::dev-aks-grp-drunk",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:resources/v20180501:ResourceGroup::dev-aks-grp-drunk",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:resources/v20190301:ResourceGroup::dev-aks-grp-drunk",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:resources/v20190501:ResourceGroup::dev-aks-grp-drunk",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:resources/v20190510:ResourceGroup::dev-aks-grp-drunk",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:resources/v20190701:ResourceGroup::dev-aks-grp-drunk",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:resources/v20190801:ResourceGroup::dev-aks-grp-drunk",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:resources/v20191001:ResourceGroup::dev-aks-grp-drunk",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:resources/v20200601:ResourceGroup::dev-aks-grp-drunk",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:resources/v20200801:ResourceGroup::dev-aks-grp-drunk",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:resources/v20201001:ResourceGroup::dev-aks-grp-drunk",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:resources/v20210101:ResourceGroup::dev-aks-grp-drunk",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:resources/v20210401:ResourceGroup::dev-aks-grp-drunk"
                ]
            },
            {
                "urn": "urn:pulumi:dev::azure-drunk-aks::pulumi:providers:random::default_4_3_1",
                "custom": true,
                "id": "e7c13749-dbfa-4c29-b28c-474bbf1a1a9b",
                "type": "pulumi:providers:random",
                "inputs": {
                    "version": "4.3.1"
                },
                "outputs": {
                    "version": "4.3.1"
                },
                "sequenceNumber": 1
            },
            {
                "urn": "urn:pulumi:dev::azure-drunk-aks::random:index/randomPassword:RandomPassword::dev-drunk-ssh-pwd",
                "custom": true,
                "id": "none",
                "type": "random:index/randomPassword:RandomPassword",
                "inputs": {
                    "__defaults": [],
                    "keepers": {
                        "__defaults": []
                    },
                    "length": 50,
                    "lower": true,
                    "minLower": 4,
                    "minNumeric": 4,
                    "minSpecial": 4,
                    "minUpper": 4,
                    "number": true,
                    "overrideSpecial": "#%\u0026*+-/:\u003c\u003e?^_|~",
                    "special": true,
                    "upper": true
                },
                "outputs": {
                    "id": "none",
                    "length": 50,
                    "lower": true,
                    "minLower": 4,
                    "minNumeric": 4,
                    "minSpecial": 4,
                    "minUpper": 4,
                    "number": true,
                    "overrideSpecial": "#%\u0026*+-/:\u003c\u003e?^_|~",
                    "result": {
                        "4dabf18193072939515e22adb298388d": "1b47061264138c4ac30d75fd1eb44270",
                        "ciphertext": "AAABAAtFJ43H+3t7rNmrJOQG6RV03mRiz//h79mFdYf0+Z5586VhTGbCmM8BXxpbcGcIfW2SviXDEBfneB+/MZxY4qBqUeS/DLKNrmpTq6TKk2MDO+T4o3Q="
                    },
                    "special": true,
                    "upper": true
                },
                "parent": "urn:pulumi:dev::azure-drunk-aks::pulumi:pulumi:Stack::azure-drunk-aks-dev",
                "provider": "urn:pulumi:dev::azure-drunk-aks::pulumi:providers:random::default_4_3_1::e7c13749-dbfa-4c29-b28c-474bbf1a1a9b",
                "propertyDependencies": {
                    "keepers": null,
                    "length": null,
                    "lower": null,
                    "minLower": null,
                    "minNumeric": null,
                    "minSpecial": null,
                    "minUpper": null,
                    "number": null,
                    "overrideSpecial": null,
                    "special": null,
                    "upper": null
                }
            },
            {
                "urn": "urn:pulumi:dev::azure-drunk-aks::random:index/randomString:RandomString::dev-drunk-ssh",
                "custom": true,
                "id": "AnucF",
                "type": "random:index/randomString:RandomString",
                "inputs": {
                    "__defaults": [
                        "minLower",
                        "minNumeric",
                        "minSpecial",
                        "minUpper"
                    ],
                    "length": 5,
                    "lower": true,
                    "minLower": 0,
                    "minNumeric": 0,
                    "minSpecial": 0,
                    "minUpper": 0,
                    "number": true,
                    "special": false,
                    "upper": true
                },
                "outputs": {
                    "__meta": "{\"schema_version\":\"1\"}",
                    "id": "AnucF",
                    "length": 5,
                    "lower": true,
                    "minLower": 0,
                    "minNumeric": 0,
                    "minSpecial": 0,
                    "minUpper": 0,
                    "number": true,
                    "result": "AnucF",
                    "special": false,
                    "upper": true
                },
                "parent": "urn:pulumi:dev::azure-drunk-aks::pulumi:pulumi:Stack::azure-drunk-aks-dev",
                "provider": "urn:pulumi:dev::azure-drunk-aks::pulumi:providers:random::default_4_3_1::e7c13749-dbfa-4c29-b28c-474bbf1a1a9b",
                "propertyDependencies": {
                    "length": null,
                    "lower": null,
                    "number": null,
                    "special": null,
                    "upper": null
                }
            },
            {
                "urn": "urn:pulumi:dev::azure-drunk-aks::azure-native:authorization:ManagementLockByScope::dev-aks-grp-drunk",
                "custom": true,
                "id": "/subscriptions/f146579d-929c-4f4b-a742-b4ad6ab9ef27/resourceGroups/dev-aks-grp-drunk/providers/Microsoft.Authorization/locks/dev-aks-grp-drunk-CanNotDelete",
                "type": "azure-native:authorization:ManagementLockByScope",
                "inputs": {
                    "level": "CanNotDelete",
                    "lockName": "dev-aks-grp-drunk-CanNotDelete",
                    "notes": "Lock dev-aks-grp-drunk from CanNotDelete",
                    "scope": "/subscriptions/f146579d-929c-4f4b-a742-b4ad6ab9ef27/resourceGroups/dev-aks-grp-drunk"
                },
                "outputs": {
                    "__inputs": {
                        "4dabf18193072939515e22adb298388d": "1b47061264138c4ac30d75fd1eb44270",
                        "ciphertext": "AAABAFoO86QLedvG5HguORxtJwwLPvGRLEZtiCRtfrYyz6wkKnfPVdedW8tGNGCf6dRprBdr/Dv9h6R4XPO5qq75dKlgkmaUdT0oUBDeVPMTM8RTsngj3nyWvCnDTitFJNbY41lkpqjfZsI2pKyRfhV4XasEWkWVhFsu1n+3ltjQzhLt6U6gRmFubTQBi4fWbrb6I6vcolunnE/TWQniLQvKEJ/WNIrdggiv2DMnlovkw8WsZUtPG0Oe8VgYpiyLOuk2eqvZoaLLlT1Uv4gMI4O1aBpJuCQ4mSsp6qgiZpr9De22mdhUMDIRiQiuvZEjp5+JOSc8"
                    },
                    "id": "/subscriptions/f146579d-929c-4f4b-a742-b4ad6ab9ef27/resourceGroups/dev-aks-grp-drunk/providers/Microsoft.Authorization/locks/dev-aks-grp-drunk-CanNotDelete",
                    "level": "CanNotDelete",
                    "name": "dev-aks-grp-drunk-CanNotDelete",
                    "notes": "Lock dev-aks-grp-drunk from CanNotDelete",
                    "type": "Microsoft.Authorization/locks"
                },
                "parent": "urn:pulumi:dev::azure-drunk-aks::pulumi:pulumi:Stack::azure-drunk-aks-dev",
                "protect": true,
                "dependencies": [
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:resources:ResourceGroup::dev-aks-grp-drunk"
                ],
                "provider": "urn:pulumi:dev::azure-drunk-aks::pulumi:providers:azure-native::default_1_58_0::e02a3ad2-7910-460b-ba9d-c2f29e3506c9",
                "propertyDependencies": {
                    "level": null,
                    "lockName": null,
                    "notes": null,
                    "scope": [
                        "urn:pulumi:dev::azure-drunk-aks::azure-native:resources:ResourceGroup::dev-aks-grp-drunk"
                    ]
                },
                "aliases": [
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:authorization/v20160901:ManagementLockByScope::dev-aks-grp-drunk",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:authorization/v20170401:ManagementLockByScope::dev-aks-grp-drunk",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:authorization/v20200501:ManagementLockByScope::dev-aks-grp-drunk"
                ]
            },
            {
                "urn": "urn:pulumi:dev::azure-drunk-aks::azure-native:network:PublicIPAddress::dev-aks-ip",
                "custom": true,
                "id": "/subscriptions/f146579d-929c-4f4b-a742-b4ad6ab9ef27/resourceGroups/dev-aks-grp-drunk/providers/Microsoft.Network/publicIPAddresses/dev-aks-ip",
                "type": "azure-native:network:PublicIPAddress",
                "inputs": {
                    "dnsSettings": {
                        "domainNameLabel": "dev-aks-ip-drunk"
                    },
                    "location": "southeastasia",
                    "publicIPAddressVersion": "IPv4",
                    "publicIPAllocationMethod": "Static",
                    "publicIpAddressName": "dev-aks-ip",
                    "resourceGroupName": "dev-aks-grp-drunk",
                    "sku": {
                        "name": "Standard",
                        "tier": "Regional"
                    },
                    "tags": {
                        "environment": "dev",
                        "organization": "drunk",
                        "pulumi-project": "azure-drunk-aks"
                    }
                },
                "outputs": {
                    "__inputs": {
                        "4dabf18193072939515e22adb298388d": "1b47061264138c4ac30d75fd1eb44270",
                        "ciphertext": "AAABAApUFsmGz9UkCoB3ByBqyH3rYI69KUuoVwxwhzDcmV/4DvETzbSysOjihL+mYLGyCx7NrD0xUMvSJ+n6ttFot9D/gNt89pok5fCTkxadndoE4QhXcFTPBk/iQEaIli4NN5SIuwV5KO804fUZKhFL0NdOYYcm/FUVkVoIQIfH1GEv3ar1ubu3Tvp8h35Ofla9StBHnqfWQIbI+l7O5CUG+px21uEvua5C7rbILc6dL5S386sLNxJFoFDLx9ktn5awi7pbUT1rxnUGnx7TfwNsQxLuAfAvW3l2snNXqNlTyocMlED1FT6kqHETBo4MsyOmo0dgAL6324ukICY0xiOx7gtZn2BGqKJeWy8kpLcwkDNqnu5DHTaEEANOUa6FD3wuZVJCNAdhIVPy2E0f7E0w0lnEmCwwb3NEyFied+JqdGwLyL1UviQY0iJ693cPybKcuCVbYFl0gGjreGlvinXbAHyrXLVpDp/fp8nl3Mlea248ULsD19Gmz4Ja0Nd7LQNT"
                    },
                    "dnsSettings": {
                        "domainNameLabel": "dev-aks-ip-drunk",
                        "fqdn": "dev-aks-ip-drunk.southeastasia.cloudapp.azure.com"
                    },
                    "etag": "W/\"0db951f3-ec28-4dde-b5d9-ba59c7259735\"",
                    "id": "/subscriptions/f146579d-929c-4f4b-a742-b4ad6ab9ef27/resourceGroups/dev-aks-grp-drunk/providers/Microsoft.Network/publicIPAddresses/dev-aks-ip",
                    "idleTimeoutInMinutes": 4,
                    "ipAddress": "20.205.187.140",
                    "ipConfiguration": {
                        "id": "/subscriptions/f146579d-929c-4f4b-a742-b4ad6ab9ef27/resourceGroups/dev-drunk-aks-nodes/providers/Microsoft.Network/loadBalancers/kubernetes/frontendIPConfigurations/dev-aks-ip"
                    },
                    "ipTags": [],
                    "location": "southeastasia",
                    "name": "dev-aks-ip",
                    "provisioningState": "Succeeded",
                    "publicIPAddressVersion": "IPv4",
                    "publicIPAllocationMethod": "Static",
                    "resourceGuid": "77cfe0e8-a357-4bac-8225-f22665dc505e",
                    "sku": {
                        "name": "Standard",
                        "tier": "Regional"
                    },
                    "tags": {
                        "environment": "dev",
                        "organization": "drunk",
                        "pulumi-project": "azure-drunk-aks"
                    },
                    "type": "Microsoft.Network/publicIPAddresses"
                },
                "parent": "urn:pulumi:dev::azure-drunk-aks::pulumi:pulumi:Stack::azure-drunk-aks-dev",
                "dependencies": [
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:resources:ResourceGroup::dev-aks-grp-drunk"
                ],
                "provider": "urn:pulumi:dev::azure-drunk-aks::pulumi:providers:azure-native::default_1_58_0::e02a3ad2-7910-460b-ba9d-c2f29e3506c9",
                "propertyDependencies": {
                    "dnsSettings": null,
                    "location": [
                        "urn:pulumi:dev::azure-drunk-aks::azure-native:resources:ResourceGroup::dev-aks-grp-drunk"
                    ],
                    "publicIPAddressVersion": null,
                    "publicIPAllocationMethod": null,
                    "publicIpAddressName": null,
                    "resourceGroupName": null,
                    "sku": null,
                    "tags": null
                },
                "aliases": [
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20150501preview:PublicIPAddress::dev-aks-ip",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20150615:PublicIPAddress::dev-aks-ip",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20160330:PublicIPAddress::dev-aks-ip",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20160601:PublicIPAddress::dev-aks-ip",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20160901:PublicIPAddress::dev-aks-ip",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20161201:PublicIPAddress::dev-aks-ip",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20170301:PublicIPAddress::dev-aks-ip",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20170601:PublicIPAddress::dev-aks-ip",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20170801:PublicIPAddress::dev-aks-ip",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20170901:PublicIPAddress::dev-aks-ip",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20171001:PublicIPAddress::dev-aks-ip",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20171101:PublicIPAddress::dev-aks-ip",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20180101:PublicIPAddress::dev-aks-ip",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20180201:PublicIPAddress::dev-aks-ip",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20180401:PublicIPAddress::dev-aks-ip",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20180601:PublicIPAddress::dev-aks-ip",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20180701:PublicIPAddress::dev-aks-ip",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20180801:PublicIPAddress::dev-aks-ip",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20181001:PublicIPAddress::dev-aks-ip",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20181101:PublicIPAddress::dev-aks-ip",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20181201:PublicIPAddress::dev-aks-ip",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20190201:PublicIPAddress::dev-aks-ip",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20190401:PublicIPAddress::dev-aks-ip",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20190601:PublicIPAddress::dev-aks-ip",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20190701:PublicIPAddress::dev-aks-ip",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20190801:PublicIPAddress::dev-aks-ip",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20190901:PublicIPAddress::dev-aks-ip",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20191101:PublicIPAddress::dev-aks-ip",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20191201:PublicIPAddress::dev-aks-ip",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20200301:PublicIPAddress::dev-aks-ip",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20200401:PublicIPAddress::dev-aks-ip",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20200501:PublicIPAddress::dev-aks-ip",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20200601:PublicIPAddress::dev-aks-ip",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20200701:PublicIPAddress::dev-aks-ip",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20200801:PublicIPAddress::dev-aks-ip",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20201101:PublicIPAddress::dev-aks-ip",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20210201:PublicIPAddress::dev-aks-ip",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20210301:PublicIPAddress::dev-aks-ip",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20210501:PublicIPAddress::dev-aks-ip"
                ]
            },
            {
                "urn": "urn:pulumi:dev::azure-drunk-aks::azure-native:network:RouteTable::dev-aks-vnt-route",
                "custom": true,
                "id": "/subscriptions/f146579d-929c-4f4b-a742-b4ad6ab9ef27/resourceGroups/dev-aks-grp-drunk/providers/Microsoft.Network/routeTables/dev-aks-vnt-route",
                "type": "azure-native:network:RouteTable",
                "inputs": {
                    "location": "southeastasia",
                    "resourceGroupName": "dev-aks-grp-drunk",
                    "routeTableName": "dev-aks-vnt-route",
                    "routes": []
                },
                "outputs": {
                    "__inputs": {
                        "4dabf18193072939515e22adb298388d": "1b47061264138c4ac30d75fd1eb44270",
                        "ciphertext": "AAABAAx+sQ+21/gyw14i3b93EsjjuA3d/zbwv1S7ApkB8wpLIGrM0fhxJNP9y4PM1QHaFEa8cq30ACRigBMwNVjShqoefe987iRW1SvG3DCDeNRXBcxHcerHrIRPb9FEk7+VXa0qoOq4z7PTwLjtnuN+yNkxmk1353MuB6hqCQa/3+kNs5gzAlomKmwHbGSrqAXdfrw="
                    },
                    "disableBgpRoutePropagation": false,
                    "etag": "W/\"fd600f80-dcf5-411c-9423-edff0d488ff2\"",
                    "id": "/subscriptions/f146579d-929c-4f4b-a742-b4ad6ab9ef27/resourceGroups/dev-aks-grp-drunk/providers/Microsoft.Network/routeTables/dev-aks-vnt-route",
                    "location": "southeastasia",
                    "name": "dev-aks-vnt-route",
                    "provisioningState": "Succeeded",
                    "resourceGuid": "8d8a58f2-9044-4b66-8e5f-44744f8728b0",
                    "routes": [],
                    "subnets": [
                        {
                            "id": "/subscriptions/f146579d-929c-4f4b-a742-b4ad6ab9ef27/resourceGroups/dev-aks-grp-drunk/providers/Microsoft.Network/virtualNetworks/dev-aks-vnt/subnets/aks"
                        },
                        {
                            "id": "/subscriptions/f146579d-929c-4f4b-a742-b4ad6ab9ef27/resourceGroups/dev-aks-grp-drunk/providers/Microsoft.Network/virtualNetworks/dev-aks-vnt/subnets/private"
                        }
                    ],
                    "type": "Microsoft.Network/routeTables"
                },
                "parent": "urn:pulumi:dev::azure-drunk-aks::pulumi:pulumi:Stack::azure-drunk-aks-dev",
                "dependencies": [
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:resources:ResourceGroup::dev-aks-grp-drunk"
                ],
                "provider": "urn:pulumi:dev::azure-drunk-aks::pulumi:providers:azure-native::default_1_58_0::e02a3ad2-7910-460b-ba9d-c2f29e3506c9",
                "propertyDependencies": {
                    "location": [
                        "urn:pulumi:dev::azure-drunk-aks::azure-native:resources:ResourceGroup::dev-aks-grp-drunk"
                    ],
                    "resourceGroupName": null,
                    "routeTableName": null,
                    "routes": null
                },
                "aliases": [
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20150501preview:RouteTable::dev-aks-vnt-route",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20150615:RouteTable::dev-aks-vnt-route",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20160330:RouteTable::dev-aks-vnt-route",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20160601:RouteTable::dev-aks-vnt-route",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20160901:RouteTable::dev-aks-vnt-route",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20161201:RouteTable::dev-aks-vnt-route",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20170301:RouteTable::dev-aks-vnt-route",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20170601:RouteTable::dev-aks-vnt-route",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20170801:RouteTable::dev-aks-vnt-route",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20170901:RouteTable::dev-aks-vnt-route",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20171001:RouteTable::dev-aks-vnt-route",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20171101:RouteTable::dev-aks-vnt-route",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20180101:RouteTable::dev-aks-vnt-route",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20180201:RouteTable::dev-aks-vnt-route",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20180401:RouteTable::dev-aks-vnt-route",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20180601:RouteTable::dev-aks-vnt-route",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20180701:RouteTable::dev-aks-vnt-route",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20180801:RouteTable::dev-aks-vnt-route",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20181001:RouteTable::dev-aks-vnt-route",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20181101:RouteTable::dev-aks-vnt-route",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20181201:RouteTable::dev-aks-vnt-route",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20190201:RouteTable::dev-aks-vnt-route",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20190401:RouteTable::dev-aks-vnt-route",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20190601:RouteTable::dev-aks-vnt-route",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20190701:RouteTable::dev-aks-vnt-route",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20190801:RouteTable::dev-aks-vnt-route",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20190901:RouteTable::dev-aks-vnt-route",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20191101:RouteTable::dev-aks-vnt-route",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20191201:RouteTable::dev-aks-vnt-route",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20200301:RouteTable::dev-aks-vnt-route",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20200401:RouteTable::dev-aks-vnt-route",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20200501:RouteTable::dev-aks-vnt-route",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20200601:RouteTable::dev-aks-vnt-route",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20200701:RouteTable::dev-aks-vnt-route",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20200801:RouteTable::dev-aks-vnt-route",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20201101:RouteTable::dev-aks-vnt-route",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20210201:RouteTable::dev-aks-vnt-route",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20210301:RouteTable::dev-aks-vnt-route",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20210501:RouteTable::dev-aks-vnt-route"
                ]
            },
            {
                "urn": "urn:pulumi:dev::azure-drunk-aks::pulumi:providers:pulumi-nodejs::default",
                "custom": true,
                "id": "16112b54-df04-4a88-8f97-ab00111abe86",
                "type": "pulumi:providers:pulumi-nodejs"
            },
            {
                "urn": "urn:pulumi:dev::azure-drunk-aks::azure-native:authorization:ManagementLockByScope::dev-aks-ip",
                "custom": true,
                "id": "/subscriptions/f146579d-929c-4f4b-a742-b4ad6ab9ef27/resourceGroups/dev-aks-grp-drunk/providers/Microsoft.Network/publicIPAddresses/dev-aks-ip/providers/Microsoft.Authorization/locks/dev-aks-ip-CanNotDelete",
                "type": "azure-native:authorization:ManagementLockByScope",
                "inputs": {
                    "level": "CanNotDelete",
                    "lockName": "dev-aks-ip-CanNotDelete",
                    "notes": "Lock dev-aks-ip from CanNotDelete",
                    "scope": "/subscriptions/f146579d-929c-4f4b-a742-b4ad6ab9ef27/resourceGroups/dev-aks-grp-drunk/providers/Microsoft.Network/publicIPAddresses/dev-aks-ip"
                },
                "outputs": {
                    "__inputs": {
                        "4dabf18193072939515e22adb298388d": "1b47061264138c4ac30d75fd1eb44270",
                        "ciphertext": "AAABAM8DYV25IyS7vKImRV/e2FEaeD/DOccz20BwhHrKU0sDdEmByF5pMcSgHL8xYlveWNX51ZsTfxCMGre0TMLb5qUVAv3fW3CjFsqvDrFhU8VaXstzm4afe9AVoujsqrYX68fdvATjMHNgudzqw3hCjUeeLYAhK4Irgcmid966cbaOLL9zLdN3758RR0s0Uv10/adun3j/3Wqnps91kvg+xKdzAVIeLtmbQzpkHv+UuFseq0o5s1ku7QYPgTPqbomTAj5AgetcXZ+bhm3sh5sfFHtKcwHNTLIDE1wZyB8YCqCPfQNN4kawt04gc3n/MPlDVY0WJcGRCqKCci8tm2aRV2dTeKOYdY7Y+dVZByrGrpJFgPu7XEQ21vcZByYklg=="
                    },
                    "id": "/subscriptions/f146579d-929c-4f4b-a742-b4ad6ab9ef27/resourceGroups/dev-aks-grp-drunk/providers/Microsoft.Network/publicIPAddresses/dev-aks-ip/providers/Microsoft.Authorization/locks/dev-aks-ip-CanNotDelete",
                    "level": "CanNotDelete",
                    "name": "dev-aks-ip-CanNotDelete",
                    "notes": "Lock dev-aks-ip from CanNotDelete",
                    "type": "Microsoft.Authorization/locks"
                },
                "parent": "urn:pulumi:dev::azure-drunk-aks::pulumi:pulumi:Stack::azure-drunk-aks-dev",
                "protect": true,
                "dependencies": [
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network:PublicIPAddress::dev-aks-ip"
                ],
                "provider": "urn:pulumi:dev::azure-drunk-aks::pulumi:providers:azure-native::default_1_58_0::e02a3ad2-7910-460b-ba9d-c2f29e3506c9",
                "propertyDependencies": {
                    "level": null,
                    "lockName": null,
                    "notes": null,
                    "scope": [
                        "urn:pulumi:dev::azure-drunk-aks::azure-native:network:PublicIPAddress::dev-aks-ip"
                    ]
                },
                "aliases": [
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:authorization/v20160901:ManagementLockByScope::dev-aks-ip",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:authorization/v20170401:ManagementLockByScope::dev-aks-ip",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:authorization/v20200501:ManagementLockByScope::dev-aks-ip"
                ]
            },
            {
                "urn": "urn:pulumi:dev::azure-drunk-aks::pulumi-nodejs:dynamic:Resource::csp:SshKeys:dev-drunk-ssh",
                "custom": true,
                "id": "dev-drunk-ssh",
                "type": "pulumi-nodejs:dynamic:Resource",
                "inputs": {
                    "__provider": "exports.handler = __f0;\n\nvar __provider_proto = {};\nObject.defineProperty(__f1, \"prototype\", { value: __provider_proto });\nObject.defineProperty(__provider_proto, \"constructor\", { configurable: true, writable: true, value: __f1 });\nObject.defineProperty(__provider_proto, \"diff\", { configurable: true, writable: true, value: __f2 });\nvar __exports = {generateKeys: __f5};\nvar __Base_1 = {};\nvar __f6_prototype = {};\nObject.defineProperty(__f6_prototype, \"constructor\", { configurable: true, writable: true, value: __f6 });\nObject.defineProperty(__f6_prototype, \"getCredentials\", { configurable: true, writable: true, value: __f7 });\nObject.defineProperty(__f6_prototype, \"getToken\", { configurable: true, writable: true, value: __f8 });\nObject.defineProperty(__f6, \"prototype\", { value: __f6_prototype });\nvar __m = {};\nObject.defineProperty(__m, \"__esModule\", { value: true });\n__m.ClientCredential = __f6;\nvar __f10_prototype = {};\nObject.defineProperty(__f10_prototype, \"constructor\", { configurable: true, writable: true, value: __f10 });\nObject.defineProperty(__f10_prototype, \"getCredentials\", { configurable: true, writable: true, value: __f11 });\nObject.defineProperty(__f10_prototype, \"signRequest\", { configurable: true, writable: true, value: __f12 });\nObject.defineProperty(__f10_prototype, \"getToken\", { configurable: true, writable: true, value: __f13 });\nObject.defineProperty(__f10, \"prototype\", { value: __f10_prototype });\n__m.InternalCredentials = __f10;\nObject.defineProperty(__Base_1, \"ClientCredential\", { enumerable: true, get: __f9 });\nvar __StackEnv_1 = {stack: \"dev\"};\nvar __Helpers_1 = {replaceAll: __replaceAll};\nvar __Naming_1 = {getSecretName: __f14};\nObject.defineProperty(__provider_proto, \"create\", { configurable: true, writable: true, value: __f4 });\nObject.defineProperty(__provider_proto, \"update\", { configurable: true, writable: true, value: __f15 });\nvar __provider = Object.create(__provider_proto);\n__provider.name = \"dev-drunk-ssh\";\n\nfunction __f1(__0) {\n  return (function() {\n    with({  }) {\n\nreturn function /*constructor*/(name) {\n        this.name = name;\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f3(__0, __1, __2, __3) {\n  return (function() {\n    with({  }) {\n\nreturn function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f2(__0, __1, __2) {\n  return (function() {\n    with({ __awaiter: __f3 }) {\n\nreturn function /*diff*/(id, previousOutput, news) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return {\n                deleteBeforeReplace: false,\n                changes: previousOutput.password !== news.password ||\n                    previousOutput.vaultName !== news.vaultName ||\n                    previousOutput.publicKeyName !== news.publicKeyName ||\n                    previousOutput.privateKeyName !== news.privateKeyName,\n            };\n        });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f5(__0) {\n  return (function() {\n    with({ crypto_1: require(\"crypto\"), forge: require(\"node-forge/lib/index.js\") }) {\n\nreturn (options) =\u003e new Promise((resolve, reject) =\u003e {\n    (0, crypto_1.generateKeyPair)('rsa', options, (err, pK, prK) =\u003e {\n        if (err)\n            reject(err);\n        const publicKey = forge.ssh.publicKeyToOpenSSH(forge.pki.publicKeyFromPem(pK));\n        const privateKey = forge.ssh.privateKeyToOpenSSH(forge.pki.decryptRsaPrivateKey(prK, options.privateKeyEncoding.passphrase));\n        resolve({ publicKey, privateKey });\n    });\n});\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f6() {\n  return (function() {\n    with({  }) {\n\nreturn function /*constructor*/() { };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f7() {\n  return (function() {\n    with({ native: require(\"@pulumi/azure-native/index.js\"), identity_1: require(\"@azure/identity/dist/index.js\") }) {\n\nreturn function /*getCredentials*/() {\n        if (this.credential)\n            return this.credential;\n        let clientID = native.config.clientId;\n        let clientSecret = native.config.clientSecret;\n        let tenantID = native.config.tenantId;\n        let subscriptionID = native.config.subscriptionId;\n        // If at least one of them is empty, try looking at the env vars.\n        if (!clientID || !clientSecret || !tenantID || !subscriptionID) {\n            //console.log('ClientCredential: getting auth info from ARM.');\n            clientID = process.env['ARM_CLIENT_ID'];\n            clientSecret = process.env['ARM_CLIENT_SECRET'];\n            tenantID = process.env['ARM_TENANT_ID'];\n            subscriptionID = process.env['ARM_SUBSCRIPTION_ID'];\n        }\n        if (tenantID \u0026\u0026 clientID \u0026\u0026 clientSecret) {\n            this.credential = new identity_1.ClientSecretCredential(tenantID, clientID, clientSecret);\n        }\n        return this.credential;\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f8(__0, __1) {\n  return (function() {\n    with({ __awaiter: __f3, msRestAzure: require(\"@azure/ms-rest-nodeauth/dist/lib/msRestNodeAuth.js\") }) {\n\nreturn function /*getToken*/(scopes, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const cre = this.getCredentials();\n            if (cre)\n                return cre.getToken(scopes, options);\n            const resource = Array.isArray(scopes) ? scopes[0] : scopes;\n            const token = yield msRestAzure.AzureCliCredentials.getAccessToken({\n                resource: resource.replace('/.default', ''),\n            });\n            return {\n                token: token.accessToken,\n                expiresOnTimestamp: 30,\n            };\n        });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f10() {\n  return (function() {\n    with({  }) {\n\nreturn function /*constructor*/() {\n        this.getCredentials();\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f11() {\n  return (function() {\n    with({ __awaiter: __f3, native: require(\"@pulumi/azure-native/index.js\"), msRestAzure: require(\"@azure/ms-rest-nodeauth/dist/lib/msRestNodeAuth.js\") }) {\n\nreturn function /*getCredentials*/() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.credentials)\n                return this.credentials;\n            let clientID = native.config.clientId;\n            let clientSecret = native.config.clientSecret;\n            this.tenantID = native.config.tenantId;\n            this.subscriptionID = native.config.subscriptionId;\n            // If at least one of them is empty, try looking at the env vars.\n            if (!clientID || !clientSecret || !this.tenantID || !this.subscriptionID) {\n                //console.log('ClientCredential: getting auth info from ARM.');\n                clientID = process.env['ARM_CLIENT_ID'];\n                clientSecret = process.env['ARM_CLIENT_SECRET'];\n                this.tenantID = process.env['ARM_TENANT_ID'];\n                this.subscriptionID = process.env['ARM_SUBSCRIPTION_ID'];\n            }\n            // If they are still empty, try to get the credentials from Az CLI.\n            if (!clientID || !clientSecret || !this.tenantID || !this.subscriptionID) {\n                //console.log('ClientCredential: getting auth info from Azure CLI.');\n                // `create()` will throw an error if the Az CLI is not installed or `az login` has never been run.\n                const cliCredentials = yield msRestAzure.AzureCliCredentials.create();\n                this.subscriptionID =\n                    cliCredentials.tokenInfo.subscription ||\n                        cliCredentials.subscriptionInfo.id;\n                this.tenantID = cliCredentials.tokenInfo.tenant;\n                this.credentials = cliCredentials;\n            }\n            else {\n                this.credentials = yield msRestAzure.loginWithServicePrincipalSecret(clientID, clientSecret, this.tenantID);\n            }\n            return this.credentials;\n        });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f12(__0) {\n  return (function() {\n    with({ __awaiter: __f3 }) {\n\nreturn function /*signRequest*/(webResource) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return (yield this.getCredentials()).signRequest(webResource);\n        });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f13() {\n  return (function() {\n    with({ __awaiter: __f3 }) {\n\nreturn function /*getToken*/() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const c = yield this.getCredentials();\n            return yield c.getToken();\n        });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f9() {\n  return (function() {\n    with({ m: __m, k: \"ClientCredential\" }) {\n\nreturn function () { return m[k]; };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __replaceAll(__0, __1, __2) {\n  return (function() {\n    with({ replaceAll: __replaceAll }) {\n\nreturn function /*replaceAll*/(value, search, replace) {\n    if (!value)\n        return value;\n    return value.split(search).join(replace);\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f14(__0) {\n  return (function() {\n    with({ StackEnv_1: __StackEnv_1, Helpers_1: __Helpers_1 }) {\n\nreturn (name) =\u003e {\n    name = name.replace(`${StackEnv_1.stack}-`, '');\n    name = name.replace(StackEnv_1.stack, '');\n    name = (0, Helpers_1.replaceAll)(name, ' ', '-');\n    return (0, Helpers_1.replaceAll)(name, '_', '-').toLowerCase();\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f4(__0) {\n  return (function() {\n    with({ __awaiter: __f3, exports: __exports, keyvault_secrets_1: require(\"@azure/keyvault-secrets/dist/index.js\"), Base_1: __Base_1, Naming_1: __Naming_1 }) {\n\nreturn function /*create*/(inputs) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const { publicKey, privateKey } = yield (0, exports.generateKeys)({\n                modulusLength: 4096,\n                publicKeyEncoding: {\n                    type: 'spki',\n                    format: 'pem',\n                },\n                privateKeyEncoding: {\n                    type: 'pkcs8',\n                    format: 'pem',\n                    cipher: 'aes-256-cbc',\n                    passphrase: inputs.password,\n                },\n            });\n            //Create Key Vault items\n            const url = `https://${inputs.vaultName}.vault.azure.net?api-version=7.0`;\n            const client = new keyvault_secrets_1.SecretClient(url, new Base_1.ClientCredential());\n            yield client.setSecret((0, Naming_1.getSecretName)(inputs.publicKeyName), publicKey, {\n                enabled: true,\n                contentType: this.name,\n            });\n            yield client.setSecret((0, Naming_1.getSecretName)(inputs.privateKeyName), privateKey, {\n                enabled: true,\n                contentType: this.name,\n            });\n            return {\n                id: this.name,\n                outs: Object.assign(Object.assign({}, inputs), { publicKey, privateKey }),\n            };\n        });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f15(__0, __1, __2) {\n  return (function() {\n    with({ __awaiter: __f3, keyvault_secrets_1: require(\"@azure/keyvault-secrets/dist/index.js\"), Base_1: __Base_1, Naming_1: __Naming_1 }) {\n\nreturn function /*update*/(id, olds, news) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const rs = yield this.create(news);\n            //Delete Ols key\n            const url = `https://${olds.vaultName}.vault.azure.net?api-version=7.0`;\n            const client = new keyvault_secrets_1.SecretClient(url, new Base_1.ClientCredential());\n            if (olds.vaultName !== news.vaultName ||\n                olds.publicKeyName !== news.publicKeyName) {\n                yield client.beginDeleteSecret((0, Naming_1.getSecretName)(olds.publicKeyName));\n            }\n            if (olds.vaultName !== news.vaultName ||\n                olds.privateKeyName !== news.privateKeyName) {\n                yield client.beginDeleteSecret((0, Naming_1.getSecretName)(olds.privateKeyName));\n            }\n            return rs;\n        });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f0() {\n  return (function() {\n    with({ provider: __provider }) {\n\nreturn () =\u003e provider;\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n",
                    "password": {
                        "4dabf18193072939515e22adb298388d": "1b47061264138c4ac30d75fd1eb44270",
                        "ciphertext": "AAABAODc2APaUnV+0JrjAAg5N92yvVduHVdg5nmzckT/kYEvrk6/Ko/wo+PIibyhTsp/8h191qFAJRgno0yDljD5iJFLUOXawoDJVnjxPP5UTT1bG5NMrcs="
                    },
                    "privateKeyName": "dev-drunk-ssh-privateKey",
                    "publicKeyName": "dev-drunk-ssh-publicKey",
                    "vaultName": "global-drunk-vlt"
                },
                "outputs": {
                    "__provider": "exports.handler = __f0;\n\nvar __provider_proto = {};\nObject.defineProperty(__f1, \"prototype\", { value: __provider_proto });\nObject.defineProperty(__provider_proto, \"constructor\", { configurable: true, writable: true, value: __f1 });\nObject.defineProperty(__provider_proto, \"diff\", { configurable: true, writable: true, value: __f2 });\nvar __forge = {};\nObject.defineProperty(__forge, \"ssh\", { enumerable: true, get: __f6 });\nObject.defineProperty(__forge, \"pki\", { enumerable: true, get: __f7 });\nvar __exports = {generateKeys: __f5};\nvar __Base_1 = {};\nvar __f8_prototype = {};\nObject.defineProperty(__f8_prototype, \"constructor\", { configurable: true, writable: true, value: __f8 });\nObject.defineProperty(__f8_prototype, \"getCredentials\", { configurable: true, writable: true, value: __f9 });\nObject.defineProperty(__f8_prototype, \"getToken\", { configurable: true, writable: true, value: __f10 });\nObject.defineProperty(__f8, \"prototype\", { value: __f8_prototype });\nvar __m = {};\nObject.defineProperty(__m, \"__esModule\", { value: true });\n__m.ClientCredential = __f8;\nvar __f12_prototype = {};\nObject.defineProperty(__f12_prototype, \"constructor\", { configurable: true, writable: true, value: __f12 });\nObject.defineProperty(__f12_prototype, \"getCredentials\", { configurable: true, writable: true, value: __f13 });\nObject.defineProperty(__f12_prototype, \"signRequest\", { configurable: true, writable: true, value: __f14 });\nObject.defineProperty(__f12_prototype, \"getToken\", { configurable: true, writable: true, value: __f15 });\nObject.defineProperty(__f12, \"prototype\", { value: __f12_prototype });\n__m.InternalCredentials = __f12;\nObject.defineProperty(__Base_1, \"ClientCredential\", { enumerable: true, get: __f11 });\nvar __StackEnv_1 = {stack: \"dev\"};\nvar __Helpers_1 = {replaceAll: __replaceAll};\nvar __Naming_1 = {getSecretName: __f16};\nObject.defineProperty(__provider_proto, \"create\", { configurable: true, writable: true, value: __f4 });\nObject.defineProperty(__provider_proto, \"update\", { configurable: true, writable: true, value: __f17 });\nvar __provider = Object.create(__provider_proto);\n__provider.name = \"dev-drunk-ssh\";\n\nfunction __f1(__0) {\n  return (function() {\n    with({  }) {\n\nreturn function /*constructor*/(name) {\n        this.name = name;\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f3(__0, __1, __2, __3) {\n  return (function() {\n    with({  }) {\n\nreturn function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f2(__0, __1, __2) {\n  return (function() {\n    with({ __awaiter: __f3 }) {\n\nreturn function /*diff*/(id, previousOutput, news) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return {\n                deleteBeforeReplace: false,\n                changes: previousOutput.password !== news.password ||\n                    previousOutput.vaultName !== news.vaultName ||\n                    previousOutput.publicKeyName !== news.publicKeyName ||\n                    previousOutput.privateKeyName !== news.privateKeyName,\n            };\n        });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f6() {\n  return (function() {\n    with({ m: require(\"node-forge/lib/index.js\"), k: \"ssh\" }) {\n\nreturn function () { return m[k]; };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f7() {\n  return (function() {\n    with({ m: require(\"node-forge/lib/index.js\"), k: \"pki\" }) {\n\nreturn function () { return m[k]; };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f5(__0) {\n  return (function() {\n    with({ crypto_1: require(\"crypto\"), forge: __forge }) {\n\nreturn (options) =\u003e new Promise((resolve, reject) =\u003e {\n    (0, crypto_1.generateKeyPair)('rsa', options, (err, pK, prK) =\u003e {\n        if (err)\n            reject(err);\n        const publicKey = forge.ssh.publicKeyToOpenSSH(forge.pki.publicKeyFromPem(pK));\n        const privateKey = forge.ssh.privateKeyToOpenSSH(forge.pki.decryptRsaPrivateKey(prK, options.privateKeyEncoding.passphrase));\n        resolve({ publicKey, privateKey });\n    });\n});\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f8() {\n  return (function() {\n    with({  }) {\n\nreturn function /*constructor*/() { };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f9() {\n  return (function() {\n    with({ native: require(\"@pulumi/azure-native/index.js\"), identity_1: require(\"@azure/identity/dist/index.js\") }) {\n\nreturn function /*getCredentials*/() {\n        if (this.credential)\n            return this.credential;\n        let clientID = native.config.clientId;\n        let clientSecret = native.config.clientSecret;\n        let tenantID = native.config.tenantId;\n        let subscriptionID = native.config.subscriptionId;\n        // If at least one of them is empty, try looking at the env vars.\n        if (!clientID || !clientSecret || !tenantID || !subscriptionID) {\n            //console.log('ClientCredential: getting auth info from ARM.');\n            clientID = process.env['ARM_CLIENT_ID'];\n            clientSecret = process.env['ARM_CLIENT_SECRET'];\n            tenantID = process.env['ARM_TENANT_ID'];\n            subscriptionID = process.env['ARM_SUBSCRIPTION_ID'];\n        }\n        if (tenantID \u0026\u0026 clientID \u0026\u0026 clientSecret) {\n            this.credential = new identity_1.ClientSecretCredential(tenantID, clientID, clientSecret);\n        }\n        return this.credential;\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f10(__0, __1) {\n  return (function() {\n    with({ __awaiter: __f3, msRestAzure: require(\"@azure/ms-rest-nodeauth/dist/lib/msRestNodeAuth.js\") }) {\n\nreturn function /*getToken*/(scopes, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const cre = this.getCredentials();\n            if (cre)\n                return cre.getToken(scopes, options);\n            const resource = Array.isArray(scopes) ? scopes[0] : scopes;\n            const token = yield msRestAzure.AzureCliCredentials.getAccessToken({\n                resource: resource.replace('/.default', ''),\n            });\n            return {\n                token: token.accessToken,\n                expiresOnTimestamp: 30,\n            };\n        });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f12() {\n  return (function() {\n    with({  }) {\n\nreturn function /*constructor*/() {\n        this.getCredentials();\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f13() {\n  return (function() {\n    with({ __awaiter: __f3, native: require(\"@pulumi/azure-native/index.js\"), msRestAzure: require(\"@azure/ms-rest-nodeauth/dist/lib/msRestNodeAuth.js\") }) {\n\nreturn function /*getCredentials*/() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.credentials)\n                return this.credentials;\n            let clientID = native.config.clientId;\n            let clientSecret = native.config.clientSecret;\n            this.tenantID = native.config.tenantId;\n            this.subscriptionID = native.config.subscriptionId;\n            // If at least one of them is empty, try looking at the env vars.\n            if (!clientID || !clientSecret || !this.tenantID || !this.subscriptionID) {\n                //console.log('ClientCredential: getting auth info from ARM.');\n                clientID = process.env['ARM_CLIENT_ID'];\n                clientSecret = process.env['ARM_CLIENT_SECRET'];\n                this.tenantID = process.env['ARM_TENANT_ID'];\n                this.subscriptionID = process.env['ARM_SUBSCRIPTION_ID'];\n            }\n            // If they are still empty, try to get the credentials from Az CLI.\n            if (!clientID || !clientSecret || !this.tenantID || !this.subscriptionID) {\n                //console.log('ClientCredential: getting auth info from Azure CLI.');\n                // `create()` will throw an error if the Az CLI is not installed or `az login` has never been run.\n                const cliCredentials = yield msRestAzure.AzureCliCredentials.create();\n                this.subscriptionID =\n                    cliCredentials.tokenInfo.subscription ||\n                        cliCredentials.subscriptionInfo.id;\n                this.tenantID = cliCredentials.tokenInfo.tenant;\n                this.credentials = cliCredentials;\n            }\n            else {\n                this.credentials = yield msRestAzure.loginWithServicePrincipalSecret(clientID, clientSecret, this.tenantID);\n            }\n            return this.credentials;\n        });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f14(__0) {\n  return (function() {\n    with({ __awaiter: __f3 }) {\n\nreturn function /*signRequest*/(webResource) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return (yield this.getCredentials()).signRequest(webResource);\n        });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f15() {\n  return (function() {\n    with({ __awaiter: __f3 }) {\n\nreturn function /*getToken*/() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const c = yield this.getCredentials();\n            return yield c.getToken();\n        });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f11() {\n  return (function() {\n    with({ m: __m, k: \"ClientCredential\" }) {\n\nreturn function () { return m[k]; };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __replaceAll(__0, __1, __2) {\n  return (function() {\n    with({ replaceAll: __replaceAll }) {\n\nreturn function /*replaceAll*/(value, search, replace) {\n    if (!value)\n        return value;\n    return value.split(search).join(replace);\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f16(__0) {\n  return (function() {\n    with({ StackEnv_1: __StackEnv_1, Helpers_1: __Helpers_1 }) {\n\nreturn (name) =\u003e {\n    name = name.replace(`${StackEnv_1.stack}-`, '');\n    name = name.replace(StackEnv_1.stack, '');\n    name = (0, Helpers_1.replaceAll)(name, ' ', '-');\n    return (0, Helpers_1.replaceAll)(name, '_', '-').toLowerCase();\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f4(__0) {\n  return (function() {\n    with({ __awaiter: __f3, exports: __exports, keyvault_secrets_1: require(\"@azure/keyvault-secrets/dist/index.js\"), Base_1: __Base_1, Naming_1: __Naming_1 }) {\n\nreturn function /*create*/(inputs) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const { publicKey, privateKey } = yield (0, exports.generateKeys)({\n                modulusLength: 4096,\n                publicKeyEncoding: {\n                    type: 'spki',\n                    format: 'pem',\n                },\n                privateKeyEncoding: {\n                    type: 'pkcs8',\n                    format: 'pem',\n                    cipher: 'aes-256-cbc',\n                    passphrase: inputs.password,\n                },\n            });\n            //Create Key Vault items\n            const url = `https://${inputs.vaultName}.vault.azure.net?api-version=7.0`;\n            const client = new keyvault_secrets_1.SecretClient(url, new Base_1.ClientCredential());\n            yield client.setSecret((0, Naming_1.getSecretName)(inputs.publicKeyName), publicKey, {\n                enabled: true,\n                contentType: this.name,\n            });\n            yield client.setSecret((0, Naming_1.getSecretName)(inputs.privateKeyName), privateKey, {\n                enabled: true,\n                contentType: this.name,\n            });\n            return {\n                id: this.name,\n                outs: Object.assign(Object.assign({}, inputs), { publicKey, privateKey }),\n            };\n        });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f17(__0, __1, __2) {\n  return (function() {\n    with({ __awaiter: __f3, keyvault_secrets_1: require(\"@azure/keyvault-secrets/dist/index.js\"), Base_1: __Base_1, Naming_1: __Naming_1 }) {\n\nreturn function /*update*/(id, olds, news) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const rs = yield this.create(news);\n            //Delete Ols key\n            const url = `https://${olds.vaultName}.vault.azure.net?api-version=7.0`;\n            const client = new keyvault_secrets_1.SecretClient(url, new Base_1.ClientCredential());\n            if (olds.vaultName !== news.vaultName ||\n                olds.publicKeyName !== news.publicKeyName) {\n                yield client.beginDeleteSecret((0, Naming_1.getSecretName)(olds.publicKeyName));\n            }\n            if (olds.vaultName !== news.vaultName ||\n                olds.privateKeyName !== news.privateKeyName) {\n                yield client.beginDeleteSecret((0, Naming_1.getSecretName)(olds.privateKeyName));\n            }\n            return rs;\n        });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f0() {\n  return (function() {\n    with({ provider: __provider }) {\n\nreturn () =\u003e provider;\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n",
                    "password": {
                        "4dabf18193072939515e22adb298388d": "1b47061264138c4ac30d75fd1eb44270",
                        "ciphertext": "AAABAKs/U6pOSq+p9kS4f/awJArnUknLfSclXgIEGWnx6Vx/afmJRHVMhwQ/r8dPrmenKW610EF++0OeHhmyMRZWCJmuJx69YonePsrI7W/WfSbKyjlwgTY="
                    },
                    "privateKey": "-----BEGIN RSA PRIVATE KEY-----\r\nMIIJKwIBAAKCAgEA8rLIhCsSC0Bp8H9Uhc9NPiIfsDlAliDfZy4hymMiwIDBLWFD\r\nzrtfcl7kLMsk3LFILA0EaERZ9UQRZcWDgJDErnTZ/bPK/YKziPF2RpfeXE2PnLsh\r\nxCaYYmjXPsPqKRWamSV1ZGUfwTqTX1KLSAyJGk6IPMlI5WMNHQ+zHVgcC5mYX5VK\r\n/m+eMdq+B4geo+wyfYXz2FhCmBtV4z954RQL0obH2+/xDdYMX/qIRZVpqVPofWPe\r\nszCiS2g6s/e+ofp7tS73MRim6vbvR1PkyN0RFrdyT4gEVJOJEwc6JkvndJMV3B6Y\r\nE3oTTxCAJKTMKdHjuf7AvMIYTLPCcj9r5OFENyG6pndshkq0M9bxZKl87b4u7Z6m\r\nYDG9b8hAYR1DcXLe2Ao2dbZzsPoWLLThoPmN7e4W96TQF30qRUGcOpAVhhLBb23m\r\nr8NM7+a6xpsk6SpHjp267Z/g6hoHt2Jrebf8Ppxcq5PThE/weAThipo6jZt3WEBn\r\nVd0OoYKa70C83xY7ywGL0VjM+P0Yuu/Y1xnnGnTGVBV/BfZICHZUBbtj7AmE4pl7\r\n+oXVOcNyGO+Lvr3qjdvO2kOajv1xCT8n3falaDrWf8kuX4XvdqeF/mCobw8bYxEA\r\nnp7j2a2vP2qf6nOfn1TplPin+6pBtP92+SLAUexN94d+8e7do4EGGegw9LECAwEA\r\nAQKCAgEAq6UB52fGtSpzQmHrV0+Lo5viqXF0WjkZhxG7WDXQyDDHbt7RZA5krLCr\r\n03pAscy37F+wdEWTEcF4RG/yVyUL1Q5TdfiIYc7kRr/vFHIoE0PPg9tdQCrDryXS\r\nxVMt8qyS0CkL41sZoEFbJRlt5CDpfi94bvU0lvb8uUb3OJOuEg4pE8C0b0plqYC4\r\n0P7WHLzZ4KiyEpopTwZWMggcnLDew6ALDWOfKlfuHJtFcWEAf38WeEf/ot+MiKRI\r\nkCtxKYHLqBJ1RMXYl2jZRarxrZWblmNbdyANX/uQAGMmHxujsHCuDyWcDHpT2aEj\r\n38allhYZZtvjWBw1r1ma9c4g8pjW8n5RxNZn0xYudh5tJAYFhPJr8AzSwLzUIXce\r\n5SY2fkuTUVsMIjWSxyhaRkxMs5th2FKAWw03pfZw2OdCuKh8tO8rHSrfNbqFkbjB\r\nGoLDae0Z0Di9U03pzjdiWIKwKN3tI08lssxqnJFvzZC9prOQmKem3R8xl/9XBAJ7\r\nwQlAakQ/t0N3/D+3lZibvEq1RxXfjecFzAfCM9/gGRgFjv1ZLB7bBqc05QWpkUI+\r\nhoytz1xdgCBxB1EYuLjiKmxX+VyZ7qQmZTNvgVr2XPcFaPXyXx3U/UVu5Ji+Zcdn\r\ncn+fwbauXi0IDMo2dG3o7YnD1B7KH3w+hcwayzjSarEI6+k2AiECggEBAPvlmJHC\r\naeJ2WA/KhxGPsk52XlqO6beS6rJ0jxwtHQj79/jIGjQ12dYni31fc6ES+qiFyYVo\r\neyykOFRa+K84wHstu8emIWiamMgmtkfUUItU0nQF9+sIUrBo2Ykt6ZW8rzFKbo+6\r\nTqDn+x0+/s/QxYcmViWsRA0Wq2hQ7duHXfvZalwWK4VAWg80U7nwjkXy/VqNg5JG\r\nVdXzn4cPneXGgfa2xGxJF/1TSJreoESFtP5ruhAgDA79awV5FzzGPelCfhPuyg4x\r\n3J/78MfyttY6UDcrq4iKw4Va2FWZPlirUvup8JTApWi2djMXDRf1jP07YB6kLIVA\r\nCXS7WNbFKfmD5DUCggEBAPam1G7QEbQFuBfcXcTxd/iPBcoc7uVr9QAODY9sALFT\r\nSgi34uUXGL/pBpByz+deSVq0xirgyG7uC3fSpntwH27cFj0OK5FkJD/B1UAHO7qe\r\n7gjHtIxJ5L3j7d8GbAL51vP8UpbGkPWx4PLtvexq+S3ekDoWZP9fxI/6hK/oXrvt\r\nPoz2e7rwWfRee5xdbruXvrrfBg6PLBPNo32pnjjJ2ImDqv6eYEKXfQo4xrFtsng1\r\nVT+hX9n3i42CdbZpxJzWsi3yba/TW/I0CMPvaAryj49Iol2nm85TbWl3WHDuTIQ1\r\nrj7tTvJFgOPpKjb3OMQzBeUMZI+lss4IgxfQWOT0pg0CggEBAOt1NiQpomg5Tx+T\r\npKXZuEZ3hsMHi5g5EIE3Sv5/fQCE5sn54eSj4be4xz6uFpud7gfQ5wp5G4ojBzRy\r\nxLqlRebeXQTGWbw5pk6RQRnrcE6NPxuM6K0d3o1ftNfxvsJk2S4t8SMQd6cYsTYp\r\nSG5hLAKk5ynX2NSTOC4OWAg4hLWCCVWCs7Oe74/+zbSlE5h3BjO6zB3S+TFAxQGu\r\nq125LIq9VOYTfQUi8F8zcoQap5CaihXAnwT0BTHcesgoVn7P1KI1N1IFccFp8ywz\r\nyIx/fbPUckbzzse8nzOERy8DFlKAC45AdV1oERy4k1iuAthCxBpgQ+1aanxfEy/O\r\npOnDS3ECggEBAJAZR2K2DKGv9a17AQ1eRUjhxfAelzNRrwEpNKLl5kGy9z3AsL5G\r\nkB8OdNdPPEdfvltP4baLPI4SZIDMgJb9GmAaFKP2810ttD/LblrJ3wtYbpiSk9ii\r\nExEdaIszpUbXz80bTOTpfScNlO5YFu1YUduKe5h0HO1VdfDn2z0p9K62HCUem4rL\r\ngMJTsMPZkifmr3dddJxs6MNpEGsJ/XYP9oHgerXmsTY2asbeBLcD75BrGDLkhKtD\r\nBDTYUw0PHd7DT7WoPIzMXptR6w0NgStkKpr7RGCS22PfOby0DOdtUSasdfAtlEHW\r\neUatogwawv9dD8SRSO7jT2MvdecjwcuBYsECggEBALvTECl7eeIShgNAWQCRdPiY\r\nTKTQoapE7664A/DXJWK2jSzttOOeDLB+PmiIwJGzMwgGlaGQssarbJi5g+ombVRN\r\nRB3uDpskOu6YPywk0dkvijSc83xlmvf+PhuB2uTlT7U0t4OZwc99kIKgQunqzaPK\r\nvzQWtG0KSp7Gl+X8vr1dWhuUE6bTQkeIGP3qleIdPgndV9thf1D/G4lYZ1RVEnJX\r\nb/wzjAAh3YFKqa4Yr5BkGTVvtR38PKX526kBxj3ijjwNyCpAhFb5RdNweL0/cCEP\r\n1RhGca5rVyYeVgwZxDqdpRWZSaCtfn7gKpKS8LnNYE8iETzrS7YpJggTlHIFjf4=\r\n-----END RSA PRIVATE KEY-----\r\n",
                    "privateKeyName": "dev-drunk-ssh-privateKey",
                    "publicKey": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDyssiEKxILQGnwf1SFz00+Ih+wOUCWIN9nLiHKYyLAgMEtYUPOu19yXuQsyyTcsUgsDQRoRFn1RBFlxYOAkMSudNn9s8r9grOI8XZGl95cTY+cuyHEJphiaNc+w+opFZqZJXVkZR/BOpNfUotIDIkaTog8yUjlYw0dD7MdWBwLmZhflUr+b54x2r4HiB6j7DJ9hfPYWEKYG1XjP3nhFAvShsfb7/EN1gxf+ohFlWmpU+h9Y96zMKJLaDqz976h+nu1LvcxGKbq9u9HU+TI3REWt3JPiARUk4kTBzomS+d0kxXcHpgTehNPEIAkpMwp0eO5/sC8whhMs8JyP2vk4UQ3Ibqmd2yGSrQz1vFkqXztvi7tnqZgMb1vyEBhHUNxct7YCjZ1tnOw+hYstOGg+Y3t7hb3pNAXfSpFQZw6kBWGEsFvbeavw0zv5rrGmyTpKkeOnbrtn+DqGge3Ymt5t/w+nFyrk9OET/B4BOGKmjqNm3dYQGdV3Q6hgprvQLzfFjvLAYvRWMz4/Ri679jXGecadMZUFX8F9kgIdlQFu2PsCYTimXv6hdU5w3IY74u+veqN287aQ5qO/XEJPyfd9qVoOtZ/yS5fhe92p4X+YKhvDxtjEQCenuPZra8/ap/qc5+fVOmU+Kf7qkG0/3b5IsBR7E33h37x7t2jgQYZ6DD0sQ== ",
                    "publicKeyName": "dev-drunk-ssh-publicKey",
                    "vaultName": "global-drunk-vlt"
                },
                "parent": "urn:pulumi:dev::azure-drunk-aks::pulumi:pulumi:Stack::azure-drunk-aks-dev",
                "dependencies": [
                    "urn:pulumi:dev::azure-drunk-aks::random:index/randomPassword:RandomPassword::dev-drunk-ssh-pwd"
                ],
                "provider": "urn:pulumi:dev::azure-drunk-aks::pulumi:providers:pulumi-nodejs::default::16112b54-df04-4a88-8f97-ab00111abe86",
                "propertyDependencies": {
                    "__provider": null,
                    "password": [
                        "urn:pulumi:dev::azure-drunk-aks::random:index/randomPassword:RandomPassword::dev-drunk-ssh-pwd"
                    ],
                    "privateKeyName": null,
                    "publicKeyName": null,
                    "vaultName": null
                }
            },
            {
                "urn": "urn:pulumi:dev::azure-drunk-aks::azure-native:network:NetworkSecurityGroup::dev-aks-vnt-sg",
                "custom": true,
                "id": "/subscriptions/f146579d-929c-4f4b-a742-b4ad6ab9ef27/resourceGroups/dev-aks-grp-drunk/providers/Microsoft.Network/networkSecurityGroups/dev-aks-vnt-sg",
                "type": "azure-native:network:NetworkSecurityGroup",
                "inputs": {
                    "location": "southeastasia",
                    "networkSecurityGroupName": "dev-aks-vnt-sg",
                    "resourceGroupName": "dev-aks-grp-drunk",
                    "securityRules": [
                        {
                            "access": "Allow",
                            "destinationAddressPrefix": "*",
                            "destinationPortRanges": [
                                "1433",
                                "5432",
                                "3306"
                            ],
                            "direction": "Inbound",
                            "name": "allow-sql-in",
                            "priority": 300,
                            "protocol": "TCP",
                            "sourceAddressPrefix": "*",
                            "sourcePortRange": "*"
                        },
                        {
                            "access": "Allow",
                            "destinationAddressPrefix": "20.205.187.140",
                            "destinationPortRanges": [
                                "443",
                                "80"
                            ],
                            "direction": "Inbound",
                            "name": "allow-internet-publicIpAddress",
                            "priority": 202,
                            "protocol": "TCP",
                            "sourceAddressPrefix": "*",
                            "sourcePortRange": "*"
                        }
                    ]
                },
                "outputs": {
                    "__inputs": {
                        "4dabf18193072939515e22adb298388d": "1b47061264138c4ac30d75fd1eb44270",
                        "ciphertext": "AAABAIL8TiNa+ya/ij7CJF+gBtlaLLdzS62W2Irp/sIjmywQ41erdNTlYkedggUfzy1r0Dz9pyCaHkYIp6Mi4TeWLWJNP9S+OQJykr+lw8iE7cD9f0AMzXNcxUiQ9011e6wb13wisftkvbCKNhipxA9Hu0D6v/x4hvXkvUjGvkSZ96gggkx1HgOfuKSMZ8v/IQxlmSIn29DKTvGvw2Ni48xP0yjoQ6iw/3ixQsEvVrSkpYRRFBZPQb0HCW3V9sJgHou7LIyeNN/w2g4cWXwZqVSJOBO1g+N9Oes0BKKrY2/AwJ7xiZTOpXsls+MuoEzdqvePYvlXK2pgxDRxoX4MLkJ3Li+f/iaXO8EbmoXia/udYxgz2+xy+3SiN60Eq3dcw4HZiKd1+Jd1FNYkogSHPwaInzPkhns3GPSuNN1GQbiAhMe2cQ3Sec3Py2atYccFm7I5Diz55alRZzTUjUubwI35+k+BeuaaeuDA9xy5kciWaGxPz+c7wCbmZH7TpixVxRiFLwlWNpWo9ZACJH3aIocdRUSkYfr9UkRUjR/Nb6vdIsxKwL9J4/PYQQmIBZ2t5SGx8l5EviJI6aJa0RSvuqNGO1wqwoJEFHKj4r6ETPw5qv2U3/kFFVK42hUQQw4QTDRDSDX664BBByYdAYvjM0lb5l8nfALC8gzVIqWcbYk/YqIPSlbdsk5Bu+uicwHCOW9eE/HaNqU7hu5dN4IVXtW8gCHMnCjgb7XUkq1048yc7MrOd4P0tffHtJKEcJ6RPJJVzuf69ykUp3zcVjMiYTZvjifPC07GQceqCuF4wCWFEhMz2ZSvfB7fgyPU6C1q3A=="
                    },
                    "defaultSecurityRules": [
                        {
                            "access": "Allow",
                            "description": "Allow inbound traffic from all VMs in VNET",
                            "destinationAddressPrefix": "VirtualNetwork",
                            "destinationAddressPrefixes": [],
                            "destinationPortRange": "*",
                            "destinationPortRanges": [],
                            "direction": "Inbound",
                            "etag": "W/\"6387078f-2a4e-400a-bad3-ebf2715bd390\"",
                            "id": "/subscriptions/f146579d-929c-4f4b-a742-b4ad6ab9ef27/resourceGroups/dev-aks-grp-drunk/providers/Microsoft.Network/networkSecurityGroups/dev-aks-vnt-sg/defaultSecurityRules/AllowVnetInBound",
                            "name": "AllowVnetInBound",
                            "priority": 65000,
                            "protocol": "*",
                            "provisioningState": "Succeeded",
                            "sourceAddressPrefix": "VirtualNetwork",
                            "sourceAddressPrefixes": [],
                            "sourcePortRange": "*",
                            "sourcePortRanges": [],
                            "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
                        },
                        {
                            "access": "Allow",
                            "description": "Allow inbound traffic from azure load balancer",
                            "destinationAddressPrefix": "*",
                            "destinationAddressPrefixes": [],
                            "destinationPortRange": "*",
                            "destinationPortRanges": [],
                            "direction": "Inbound",
                            "etag": "W/\"6387078f-2a4e-400a-bad3-ebf2715bd390\"",
                            "id": "/subscriptions/f146579d-929c-4f4b-a742-b4ad6ab9ef27/resourceGroups/dev-aks-grp-drunk/providers/Microsoft.Network/networkSecurityGroups/dev-aks-vnt-sg/defaultSecurityRules/AllowAzureLoadBalancerInBound",
                            "name": "AllowAzureLoadBalancerInBound",
                            "priority": 65001,
                            "protocol": "*",
                            "provisioningState": "Succeeded",
                            "sourceAddressPrefix": "AzureLoadBalancer",
                            "sourceAddressPrefixes": [],
                            "sourcePortRange": "*",
                            "sourcePortRanges": [],
                            "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
                        },
                        {
                            "access": "Deny",
                            "description": "Deny all inbound traffic",
                            "destinationAddressPrefix": "*",
                            "destinationAddressPrefixes": [],
                            "destinationPortRange": "*",
                            "destinationPortRanges": [],
                            "direction": "Inbound",
                            "etag": "W/\"6387078f-2a4e-400a-bad3-ebf2715bd390\"",
                            "id": "/subscriptions/f146579d-929c-4f4b-a742-b4ad6ab9ef27/resourceGroups/dev-aks-grp-drunk/providers/Microsoft.Network/networkSecurityGroups/dev-aks-vnt-sg/defaultSecurityRules/DenyAllInBound",
                            "name": "DenyAllInBound",
                            "priority": 65500,
                            "protocol": "*",
                            "provisioningState": "Succeeded",
                            "sourceAddressPrefix": "*",
                            "sourceAddressPrefixes": [],
                            "sourcePortRange": "*",
                            "sourcePortRanges": [],
                            "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
                        },
                        {
                            "access": "Allow",
                            "description": "Allow outbound traffic from all VMs to all VMs in VNET",
                            "destinationAddressPrefix": "VirtualNetwork",
                            "destinationAddressPrefixes": [],
                            "destinationPortRange": "*",
                            "destinationPortRanges": [],
                            "direction": "Outbound",
                            "etag": "W/\"6387078f-2a4e-400a-bad3-ebf2715bd390\"",
                            "id": "/subscriptions/f146579d-929c-4f4b-a742-b4ad6ab9ef27/resourceGroups/dev-aks-grp-drunk/providers/Microsoft.Network/networkSecurityGroups/dev-aks-vnt-sg/defaultSecurityRules/AllowVnetOutBound",
                            "name": "AllowVnetOutBound",
                            "priority": 65000,
                            "protocol": "*",
                            "provisioningState": "Succeeded",
                            "sourceAddressPrefix": "VirtualNetwork",
                            "sourceAddressPrefixes": [],
                            "sourcePortRange": "*",
                            "sourcePortRanges": [],
                            "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
                        },
                        {
                            "access": "Allow",
                            "description": "Allow outbound traffic from all VMs to Internet",
                            "destinationAddressPrefix": "Internet",
                            "destinationAddressPrefixes": [],
                            "destinationPortRange": "*",
                            "destinationPortRanges": [],
                            "direction": "Outbound",
                            "etag": "W/\"6387078f-2a4e-400a-bad3-ebf2715bd390\"",
                            "id": "/subscriptions/f146579d-929c-4f4b-a742-b4ad6ab9ef27/resourceGroups/dev-aks-grp-drunk/providers/Microsoft.Network/networkSecurityGroups/dev-aks-vnt-sg/defaultSecurityRules/AllowInternetOutBound",
                            "name": "AllowInternetOutBound",
                            "priority": 65001,
                            "protocol": "*",
                            "provisioningState": "Succeeded",
                            "sourceAddressPrefix": "*",
                            "sourceAddressPrefixes": [],
                            "sourcePortRange": "*",
                            "sourcePortRanges": [],
                            "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
                        },
                        {
                            "access": "Deny",
                            "description": "Deny all outbound traffic",
                            "destinationAddressPrefix": "*",
                            "destinationAddressPrefixes": [],
                            "destinationPortRange": "*",
                            "destinationPortRanges": [],
                            "direction": "Outbound",
                            "etag": "W/\"6387078f-2a4e-400a-bad3-ebf2715bd390\"",
                            "id": "/subscriptions/f146579d-929c-4f4b-a742-b4ad6ab9ef27/resourceGroups/dev-aks-grp-drunk/providers/Microsoft.Network/networkSecurityGroups/dev-aks-vnt-sg/defaultSecurityRules/DenyAllOutBound",
                            "name": "DenyAllOutBound",
                            "priority": 65500,
                            "protocol": "*",
                            "provisioningState": "Succeeded",
                            "sourceAddressPrefix": "*",
                            "sourceAddressPrefixes": [],
                            "sourcePortRange": "*",
                            "sourcePortRanges": [],
                            "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
                        }
                    ],
                    "etag": "W/\"6387078f-2a4e-400a-bad3-ebf2715bd390\"",
                    "id": "/subscriptions/f146579d-929c-4f4b-a742-b4ad6ab9ef27/resourceGroups/dev-aks-grp-drunk/providers/Microsoft.Network/networkSecurityGroups/dev-aks-vnt-sg",
                    "location": "southeastasia",
                    "name": "dev-aks-vnt-sg",
                    "provisioningState": "Succeeded",
                    "resourceGuid": "44dbbf6d-0026-4627-944a-c101828b0d28",
                    "securityRules": [
                        {
                            "access": "Allow",
                            "destinationAddressPrefix": "*",
                            "destinationAddressPrefixes": [],
                            "destinationPortRanges": [
                                "1433",
                                "5432",
                                "3306"
                            ],
                            "direction": "Inbound",
                            "etag": "W/\"6387078f-2a4e-400a-bad3-ebf2715bd390\"",
                            "id": "/subscriptions/f146579d-929c-4f4b-a742-b4ad6ab9ef27/resourceGroups/dev-aks-grp-drunk/providers/Microsoft.Network/networkSecurityGroups/dev-aks-vnt-sg/securityRules/allow-sql-in",
                            "name": "allow-sql-in",
                            "priority": 300,
                            "protocol": "TCP",
                            "provisioningState": "Succeeded",
                            "sourceAddressPrefix": "*",
                            "sourceAddressPrefixes": [],
                            "sourcePortRange": "*",
                            "sourcePortRanges": [],
                            "type": "Microsoft.Network/networkSecurityGroups/securityRules"
                        },
                        {
                            "access": "Allow",
                            "destinationAddressPrefix": "20.205.187.140",
                            "destinationAddressPrefixes": [],
                            "destinationPortRanges": [
                                "443",
                                "80"
                            ],
                            "direction": "Inbound",
                            "etag": "W/\"6387078f-2a4e-400a-bad3-ebf2715bd390\"",
                            "id": "/subscriptions/f146579d-929c-4f4b-a742-b4ad6ab9ef27/resourceGroups/dev-aks-grp-drunk/providers/Microsoft.Network/networkSecurityGroups/dev-aks-vnt-sg/securityRules/allow-internet-publicIpAddress",
                            "name": "allow-internet-publicIpAddress",
                            "priority": 202,
                            "protocol": "TCP",
                            "provisioningState": "Succeeded",
                            "sourceAddressPrefix": "*",
                            "sourceAddressPrefixes": [],
                            "sourcePortRange": "*",
                            "sourcePortRanges": [],
                            "type": "Microsoft.Network/networkSecurityGroups/securityRules"
                        }
                    ],
                    "subnets": [
                        {
                            "id": "/subscriptions/f146579d-929c-4f4b-a742-b4ad6ab9ef27/resourceGroups/dev-aks-grp-drunk/providers/Microsoft.Network/virtualNetworks/dev-aks-vnt/subnets/aks"
                        },
                        {
                            "id": "/subscriptions/f146579d-929c-4f4b-a742-b4ad6ab9ef27/resourceGroups/dev-aks-grp-drunk/providers/Microsoft.Network/virtualNetworks/dev-aks-vnt/subnets/private"
                        },
                        {
                            "id": "/subscriptions/f146579d-929c-4f4b-a742-b4ad6ab9ef27/resourceGroups/dev-aks-grp-drunk/providers/Microsoft.Network/virtualNetworks/dev-aks-vnt/subnets/aks-virtual"
                        }
                    ],
                    "type": "Microsoft.Network/networkSecurityGroups"
                },
                "parent": "urn:pulumi:dev::azure-drunk-aks::pulumi:pulumi:Stack::azure-drunk-aks-dev",
                "dependencies": [
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network:PublicIPAddress::dev-aks-ip",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:resources:ResourceGroup::dev-aks-grp-drunk"
                ],
                "provider": "urn:pulumi:dev::azure-drunk-aks::pulumi:providers:azure-native::default_1_58_0::e02a3ad2-7910-460b-ba9d-c2f29e3506c9",
                "propertyDependencies": {
                    "location": [
                        "urn:pulumi:dev::azure-drunk-aks::azure-native:resources:ResourceGroup::dev-aks-grp-drunk"
                    ],
                    "networkSecurityGroupName": null,
                    "resourceGroupName": null,
                    "securityRules": [
                        "urn:pulumi:dev::azure-drunk-aks::azure-native:network:PublicIPAddress::dev-aks-ip"
                    ]
                },
                "aliases": [
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20150501preview:NetworkSecurityGroup::dev-aks-vnt-sg",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20150615:NetworkSecurityGroup::dev-aks-vnt-sg",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20160330:NetworkSecurityGroup::dev-aks-vnt-sg",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20160601:NetworkSecurityGroup::dev-aks-vnt-sg",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20160901:NetworkSecurityGroup::dev-aks-vnt-sg",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20161201:NetworkSecurityGroup::dev-aks-vnt-sg",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20170301:NetworkSecurityGroup::dev-aks-vnt-sg",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20170601:NetworkSecurityGroup::dev-aks-vnt-sg",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20170801:NetworkSecurityGroup::dev-aks-vnt-sg",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20170901:NetworkSecurityGroup::dev-aks-vnt-sg",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20171001:NetworkSecurityGroup::dev-aks-vnt-sg",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20171101:NetworkSecurityGroup::dev-aks-vnt-sg",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20180101:NetworkSecurityGroup::dev-aks-vnt-sg",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20180201:NetworkSecurityGroup::dev-aks-vnt-sg",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20180401:NetworkSecurityGroup::dev-aks-vnt-sg",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20180601:NetworkSecurityGroup::dev-aks-vnt-sg",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20180701:NetworkSecurityGroup::dev-aks-vnt-sg",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20180801:NetworkSecurityGroup::dev-aks-vnt-sg",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20181001:NetworkSecurityGroup::dev-aks-vnt-sg",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20181101:NetworkSecurityGroup::dev-aks-vnt-sg",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20181201:NetworkSecurityGroup::dev-aks-vnt-sg",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20190201:NetworkSecurityGroup::dev-aks-vnt-sg",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20190401:NetworkSecurityGroup::dev-aks-vnt-sg",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20190601:NetworkSecurityGroup::dev-aks-vnt-sg",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20190701:NetworkSecurityGroup::dev-aks-vnt-sg",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20190801:NetworkSecurityGroup::dev-aks-vnt-sg",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20190901:NetworkSecurityGroup::dev-aks-vnt-sg",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20191101:NetworkSecurityGroup::dev-aks-vnt-sg",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20191201:NetworkSecurityGroup::dev-aks-vnt-sg",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20200301:NetworkSecurityGroup::dev-aks-vnt-sg",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20200401:NetworkSecurityGroup::dev-aks-vnt-sg",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20200501:NetworkSecurityGroup::dev-aks-vnt-sg",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20200601:NetworkSecurityGroup::dev-aks-vnt-sg",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20200701:NetworkSecurityGroup::dev-aks-vnt-sg",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20200801:NetworkSecurityGroup::dev-aks-vnt-sg",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20201101:NetworkSecurityGroup::dev-aks-vnt-sg",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20210201:NetworkSecurityGroup::dev-aks-vnt-sg",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20210301:NetworkSecurityGroup::dev-aks-vnt-sg",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20210501:NetworkSecurityGroup::dev-aks-vnt-sg"
                ]
            },
            {
                "urn": "urn:pulumi:dev::azure-drunk-aks::pulumi-nodejs:dynamic:Resource::csp:VaultSecrets:dev-drunk-ssh-user",
                "custom": true,
                "id": "https://global-drunk-vlt.vault.azure.net/secrets/drunk-ssh-user/d58c9a493c7345c59c3567b015f7d2c0",
                "type": "pulumi-nodejs:dynamic:Resource",
                "inputs": {
                    "__provider": "exports.handler = __f0;\n\nvar __provider_proto = {};\nObject.defineProperty(__f1, \"prototype\", { value: __provider_proto });\nObject.defineProperty(__provider_proto, \"constructor\", { configurable: true, writable: true, value: __f1 });\nvar __Base_1 = {};\nvar __f3_prototype = {};\nObject.defineProperty(__f3_prototype, \"constructor\", { configurable: true, writable: true, value: __f3 });\nObject.defineProperty(__f3_prototype, \"getCredentials\", { configurable: true, writable: true, value: __f4 });\nObject.defineProperty(__f3_prototype, \"getToken\", { configurable: true, writable: true, value: __f5 });\nObject.defineProperty(__f3, \"prototype\", { value: __f3_prototype });\nvar __m = {};\nObject.defineProperty(__m, \"__esModule\", { value: true });\n__m.ClientCredential = __f3;\nvar __f8_prototype = {};\nObject.defineProperty(__f8_prototype, \"constructor\", { configurable: true, writable: true, value: __f8 });\nObject.defineProperty(__f8_prototype, \"getCredentials\", { configurable: true, writable: true, value: __f9 });\nObject.defineProperty(__f8_prototype, \"signRequest\", { configurable: true, writable: true, value: __f10 });\nObject.defineProperty(__f8_prototype, \"getToken\", { configurable: true, writable: true, value: __f11 });\nObject.defineProperty(__f8, \"prototype\", { value: __f8_prototype });\n__m.InternalCredentials = __f8;\nObject.defineProperty(__Base_1, \"ClientCredential\", { enumerable: true, get: __f7 });\nObject.defineProperty(__provider_proto, \"getClient\", { configurable: true, writable: true, value: __f2 });\nObject.defineProperty(__provider_proto, \"tryGetDeletedSecret\", { configurable: true, writable: true, value: __f12 });\nObject.defineProperty(__provider_proto, \"tryRecoverSecret\", { configurable: true, writable: true, value: __f13 });\nObject.defineProperty(__provider_proto, \"create\", { configurable: true, writable: true, value: __f14 });\nObject.defineProperty(__provider_proto, \"update\", { configurable: true, writable: true, value: __f15 });\nObject.defineProperty(__provider_proto, \"delete\", { configurable: true, writable: true, value: __f16 });\nObject.defineProperty(__provider_proto, \"diff\", { configurable: true, writable: true, value: __f17 });\nvar __provider = Object.create(__provider_proto);\n__provider.name = \"dev-drunk-ssh-user\";\n__provider._client = undefined;\n\nfunction __f1(__0) {\n  return (function() {\n    with({  }) {\n\nreturn function /*constructor*/(name) {\n        this.name = name;\n        this._client = undefined;\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f3() {\n  return (function() {\n    with({  }) {\n\nreturn function /*constructor*/() { };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f4() {\n  return (function() {\n    with({ native: require(\"@pulumi/azure-native/index.js\"), identity_1: require(\"@azure/identity/dist/index.js\") }) {\n\nreturn function /*getCredentials*/() {\n        if (this.credential)\n            return this.credential;\n        let clientID = native.config.clientId;\n        let clientSecret = native.config.clientSecret;\n        let tenantID = native.config.tenantId;\n        let subscriptionID = native.config.subscriptionId;\n        // If at least one of them is empty, try looking at the env vars.\n        if (!clientID || !clientSecret || !tenantID || !subscriptionID) {\n            //console.log('ClientCredential: getting auth info from ARM.');\n            clientID = process.env['ARM_CLIENT_ID'];\n            clientSecret = process.env['ARM_CLIENT_SECRET'];\n            tenantID = process.env['ARM_TENANT_ID'];\n            subscriptionID = process.env['ARM_SUBSCRIPTION_ID'];\n        }\n        if (tenantID \u0026\u0026 clientID \u0026\u0026 clientSecret) {\n            this.credential = new identity_1.ClientSecretCredential(tenantID, clientID, clientSecret);\n        }\n        return this.credential;\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f6(__0, __1, __2, __3) {\n  return (function() {\n    with({  }) {\n\nreturn function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f5(__0, __1) {\n  return (function() {\n    with({ __awaiter: __f6, msRestAzure: require(\"@azure/ms-rest-nodeauth/dist/lib/msRestNodeAuth.js\") }) {\n\nreturn function /*getToken*/(scopes, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const cre = this.getCredentials();\n            if (cre)\n                return cre.getToken(scopes, options);\n            const resource = Array.isArray(scopes) ? scopes[0] : scopes;\n            const token = yield msRestAzure.AzureCliCredentials.getAccessToken({\n                resource: resource.replace('/.default', ''),\n            });\n            return {\n                token: token.accessToken,\n                expiresOnTimestamp: 30,\n            };\n        });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f8() {\n  return (function() {\n    with({  }) {\n\nreturn function /*constructor*/() {\n        this.getCredentials();\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f9() {\n  return (function() {\n    with({ __awaiter: __f6, native: require(\"@pulumi/azure-native/index.js\"), msRestAzure: require(\"@azure/ms-rest-nodeauth/dist/lib/msRestNodeAuth.js\") }) {\n\nreturn function /*getCredentials*/() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.credentials)\n                return this.credentials;\n            let clientID = native.config.clientId;\n            let clientSecret = native.config.clientSecret;\n            this.tenantID = native.config.tenantId;\n            this.subscriptionID = native.config.subscriptionId;\n            // If at least one of them is empty, try looking at the env vars.\n            if (!clientID || !clientSecret || !this.tenantID || !this.subscriptionID) {\n                //console.log('ClientCredential: getting auth info from ARM.');\n                clientID = process.env['ARM_CLIENT_ID'];\n                clientSecret = process.env['ARM_CLIENT_SECRET'];\n                this.tenantID = process.env['ARM_TENANT_ID'];\n                this.subscriptionID = process.env['ARM_SUBSCRIPTION_ID'];\n            }\n            // If they are still empty, try to get the credentials from Az CLI.\n            if (!clientID || !clientSecret || !this.tenantID || !this.subscriptionID) {\n                //console.log('ClientCredential: getting auth info from Azure CLI.');\n                // `create()` will throw an error if the Az CLI is not installed or `az login` has never been run.\n                const cliCredentials = yield msRestAzure.AzureCliCredentials.create();\n                this.subscriptionID =\n                    cliCredentials.tokenInfo.subscription ||\n                        cliCredentials.subscriptionInfo.id;\n                this.tenantID = cliCredentials.tokenInfo.tenant;\n                this.credentials = cliCredentials;\n            }\n            else {\n                this.credentials = yield msRestAzure.loginWithServicePrincipalSecret(clientID, clientSecret, this.tenantID);\n            }\n            return this.credentials;\n        });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f10(__0) {\n  return (function() {\n    with({ __awaiter: __f6 }) {\n\nreturn function /*signRequest*/(webResource) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return (yield this.getCredentials()).signRequest(webResource);\n        });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f11() {\n  return (function() {\n    with({ __awaiter: __f6 }) {\n\nreturn function /*getToken*/() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const c = yield this.getCredentials();\n            return yield c.getToken();\n        });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f7() {\n  return (function() {\n    with({ m: __m, k: \"ClientCredential\" }) {\n\nreturn function () { return m[k]; };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f2(__0) {\n  return (function() {\n    with({ keyvault_secrets_1: require(\"@azure/keyvault-secrets/dist/index.js\"), Base_1: __Base_1 }) {\n\nreturn function /*getClient*/(vaultName) {\n        if (this._client)\n            return this._client;\n        const url = `https://${vaultName}.vault.azure.net?api-version=7.0`;\n        this._client = new keyvault_secrets_1.SecretClient(url, new Base_1.ClientCredential());\n        return this._client;\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f12(__0) {\n  return (function() {\n    with({ __awaiter: __f6 }) {\n\nreturn function /*tryGetDeletedSecret*/(props) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const client = this.getClient(props.vaultInfo.name);\n            return yield client.getDeletedSecret(props.name).catch(() =\u003e undefined);\n        });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f13(__0) {\n  return (function() {\n    with({ __awaiter: __f6 }) {\n\nreturn function /*tryRecoverSecret*/(props) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const client = this.getClient(props.vaultInfo.name);\n            const deleted = yield this.tryGetDeletedSecret(props);\n            //Recover deleted items\n            if (deleted)\n                yield (yield client.beginRecoverDeletedSecret(deleted.name)).pollUntilDone();\n        });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f14(__0) {\n  return (function() {\n    with({ __awaiter: __f6 }) {\n\nreturn function /*create*/(props) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.tryRecoverSecret(props);\n            const client = this.getClient(props.vaultInfo.name);\n            const ss = yield client.setSecret(props.name, props.value, {\n                enabled: true,\n                contentType: props.contentType,\n                tags: props.tags,\n            });\n            return { id: ss.properties.id || this.name, outs: props };\n        });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f15(__0, __1, __2) {\n  return (function() {\n    with({ __awaiter: __f6 }) {\n\nreturn function /*update*/(id, olds, news) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const rs = yield this.create(news);\n            //Delete the old Secret\n            if (olds.name !== news.name || olds.vaultInfo.name !== news.vaultInfo.name)\n                yield this.delete(id, olds).catch((e) =\u003e { var _a; return console.log(`Cannot delete ${this.name}`, (_a = e === null || e === void 0 ? void 0 : e.resource) === null || _a === void 0 ? void 0 : _a.data); });\n            return rs;\n        });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f16(__0, __1) {\n  return (function() {\n    with({ __awaiter: __f6 }) {\n\nreturn function /*delete*/(id, props) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const client = this.getClient(props.vaultInfo.name);\n                yield client.beginDeleteSecret(props.name);\n            }\n            catch (_a) {\n                //Ignore\n            }\n        });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f17(__0, __1, __2) {\n  return (function() {\n    with({ __awaiter: __f6 }) {\n\nreturn function /*diff*/(id, previousOutput, news) {\n        return __awaiter(this, void 0, void 0, function* () {\n            //check if secret is delete then commit changes to recover it.\n            const deleted = yield this.tryGetDeletedSecret(news);\n            return {\n                deleteBeforeReplace: false,\n                changes: deleted != undefined ||\n                    previousOutput.name !== news.name ||\n                    previousOutput.vaultInfo.name !== news.vaultInfo.name ||\n                    previousOutput.value !== news.value ||\n                    previousOutput.contentType !== news.contentType,\n            };\n        });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f0() {\n  return (function() {\n    with({ provider: __provider }) {\n\nreturn () =\u003e provider;\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n",
                    "contentType": "Random Ssh",
                    "name": "drunk-ssh-user",
                    "value": "admindev-drunk-",
                    "vaultInfo": {
                        "group": {
                            "resourceGroupName": "global-grp-drunk"
                        },
                        "id": "/subscriptions/f146579d-929c-4f4b-a742-b4ad6ab9ef27/resourceGroups/global-grp-drunk/providers/Microsoft.KeyVault/vaults/global-drunk-vlt",
                        "name": "global-drunk-vlt"
                    }
                },
                "outputs": {
                    "__provider": "exports.handler = __f0;\n\nvar __provider_proto = {};\nObject.defineProperty(__f1, \"prototype\", { value: __provider_proto });\nObject.defineProperty(__provider_proto, \"constructor\", { configurable: true, writable: true, value: __f1 });\nvar __Base_1 = {};\nvar __f3_prototype = {};\nObject.defineProperty(__f3_prototype, \"constructor\", { configurable: true, writable: true, value: __f3 });\nObject.defineProperty(__f3_prototype, \"getCredentials\", { configurable: true, writable: true, value: __f4 });\nObject.defineProperty(__f3_prototype, \"getToken\", { configurable: true, writable: true, value: __f5 });\nObject.defineProperty(__f3, \"prototype\", { value: __f3_prototype });\nvar __m = {};\nObject.defineProperty(__m, \"__esModule\", { value: true });\n__m.ClientCredential = __f3;\nvar __f8_prototype = {};\nObject.defineProperty(__f8_prototype, \"constructor\", { configurable: true, writable: true, value: __f8 });\nObject.defineProperty(__f8_prototype, \"getCredentials\", { configurable: true, writable: true, value: __f9 });\nObject.defineProperty(__f8_prototype, \"signRequest\", { configurable: true, writable: true, value: __f10 });\nObject.defineProperty(__f8_prototype, \"getToken\", { configurable: true, writable: true, value: __f11 });\nObject.defineProperty(__f8, \"prototype\", { value: __f8_prototype });\n__m.InternalCredentials = __f8;\nObject.defineProperty(__Base_1, \"ClientCredential\", { enumerable: true, get: __f7 });\nObject.defineProperty(__provider_proto, \"getClient\", { configurable: true, writable: true, value: __f2 });\nObject.defineProperty(__provider_proto, \"tryGetDeletedSecret\", { configurable: true, writable: true, value: __f12 });\nObject.defineProperty(__provider_proto, \"tryRecoverSecret\", { configurable: true, writable: true, value: __f13 });\nObject.defineProperty(__provider_proto, \"create\", { configurable: true, writable: true, value: __f14 });\nObject.defineProperty(__provider_proto, \"update\", { configurable: true, writable: true, value: __f15 });\nObject.defineProperty(__provider_proto, \"delete\", { configurable: true, writable: true, value: __f16 });\nObject.defineProperty(__provider_proto, \"diff\", { configurable: true, writable: true, value: __f17 });\nvar __provider = Object.create(__provider_proto);\n__provider.name = \"dev-drunk-ssh-user\";\n__provider._client = undefined;\n\nfunction __f1(__0) {\n  return (function() {\n    with({  }) {\n\nreturn function /*constructor*/(name) {\n        this.name = name;\n        this._client = undefined;\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f3() {\n  return (function() {\n    with({  }) {\n\nreturn function /*constructor*/() { };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f4() {\n  return (function() {\n    with({ native: require(\"@pulumi/azure-native/index.js\"), identity_1: require(\"@azure/identity/dist/index.js\") }) {\n\nreturn function /*getCredentials*/() {\n        if (this.credential)\n            return this.credential;\n        let clientID = native.config.clientId;\n        let clientSecret = native.config.clientSecret;\n        let tenantID = native.config.tenantId;\n        let subscriptionID = native.config.subscriptionId;\n        // If at least one of them is empty, try looking at the env vars.\n        if (!clientID || !clientSecret || !tenantID || !subscriptionID) {\n            //console.log('ClientCredential: getting auth info from ARM.');\n            clientID = process.env['ARM_CLIENT_ID'];\n            clientSecret = process.env['ARM_CLIENT_SECRET'];\n            tenantID = process.env['ARM_TENANT_ID'];\n            subscriptionID = process.env['ARM_SUBSCRIPTION_ID'];\n        }\n        if (tenantID \u0026\u0026 clientID \u0026\u0026 clientSecret) {\n            this.credential = new identity_1.ClientSecretCredential(tenantID, clientID, clientSecret);\n        }\n        return this.credential;\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f6(__0, __1, __2, __3) {\n  return (function() {\n    with({  }) {\n\nreturn function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f5(__0, __1) {\n  return (function() {\n    with({ __awaiter: __f6, msRestAzure: require(\"@azure/ms-rest-nodeauth/dist/lib/msRestNodeAuth.js\") }) {\n\nreturn function /*getToken*/(scopes, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const cre = this.getCredentials();\n            if (cre)\n                return cre.getToken(scopes, options);\n            const resource = Array.isArray(scopes) ? scopes[0] : scopes;\n            const token = yield msRestAzure.AzureCliCredentials.getAccessToken({\n                resource: resource.replace('/.default', ''),\n            });\n            return {\n                token: token.accessToken,\n                expiresOnTimestamp: 30,\n            };\n        });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f8() {\n  return (function() {\n    with({  }) {\n\nreturn function /*constructor*/() {\n        this.getCredentials();\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f9() {\n  return (function() {\n    with({ __awaiter: __f6, native: require(\"@pulumi/azure-native/index.js\"), msRestAzure: require(\"@azure/ms-rest-nodeauth/dist/lib/msRestNodeAuth.js\") }) {\n\nreturn function /*getCredentials*/() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.credentials)\n                return this.credentials;\n            let clientID = native.config.clientId;\n            let clientSecret = native.config.clientSecret;\n            this.tenantID = native.config.tenantId;\n            this.subscriptionID = native.config.subscriptionId;\n            // If at least one of them is empty, try looking at the env vars.\n            if (!clientID || !clientSecret || !this.tenantID || !this.subscriptionID) {\n                //console.log('ClientCredential: getting auth info from ARM.');\n                clientID = process.env['ARM_CLIENT_ID'];\n                clientSecret = process.env['ARM_CLIENT_SECRET'];\n                this.tenantID = process.env['ARM_TENANT_ID'];\n                this.subscriptionID = process.env['ARM_SUBSCRIPTION_ID'];\n            }\n            // If they are still empty, try to get the credentials from Az CLI.\n            if (!clientID || !clientSecret || !this.tenantID || !this.subscriptionID) {\n                //console.log('ClientCredential: getting auth info from Azure CLI.');\n                // `create()` will throw an error if the Az CLI is not installed or `az login` has never been run.\n                const cliCredentials = yield msRestAzure.AzureCliCredentials.create();\n                this.subscriptionID =\n                    cliCredentials.tokenInfo.subscription ||\n                        cliCredentials.subscriptionInfo.id;\n                this.tenantID = cliCredentials.tokenInfo.tenant;\n                this.credentials = cliCredentials;\n            }\n            else {\n                this.credentials = yield msRestAzure.loginWithServicePrincipalSecret(clientID, clientSecret, this.tenantID);\n            }\n            return this.credentials;\n        });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f10(__0) {\n  return (function() {\n    with({ __awaiter: __f6 }) {\n\nreturn function /*signRequest*/(webResource) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return (yield this.getCredentials()).signRequest(webResource);\n        });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f11() {\n  return (function() {\n    with({ __awaiter: __f6 }) {\n\nreturn function /*getToken*/() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const c = yield this.getCredentials();\n            return yield c.getToken();\n        });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f7() {\n  return (function() {\n    with({ m: __m, k: \"ClientCredential\" }) {\n\nreturn function () { return m[k]; };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f2(__0) {\n  return (function() {\n    with({ keyvault_secrets_1: require(\"@azure/keyvault-secrets/dist/index.js\"), Base_1: __Base_1 }) {\n\nreturn function /*getClient*/(vaultName) {\n        if (this._client)\n            return this._client;\n        const url = `https://${vaultName}.vault.azure.net?api-version=7.0`;\n        this._client = new keyvault_secrets_1.SecretClient(url, new Base_1.ClientCredential());\n        return this._client;\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f12(__0) {\n  return (function() {\n    with({ __awaiter: __f6 }) {\n\nreturn function /*tryGetDeletedSecret*/(props) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const client = this.getClient(props.vaultInfo.name);\n            return yield client.getDeletedSecret(props.name).catch(() =\u003e undefined);\n        });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f13(__0) {\n  return (function() {\n    with({ __awaiter: __f6 }) {\n\nreturn function /*tryRecoverSecret*/(props) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const client = this.getClient(props.vaultInfo.name);\n            const deleted = yield this.tryGetDeletedSecret(props);\n            //Recover deleted items\n            if (deleted)\n                yield (yield client.beginRecoverDeletedSecret(deleted.name)).pollUntilDone();\n        });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f14(__0) {\n  return (function() {\n    with({ __awaiter: __f6 }) {\n\nreturn function /*create*/(props) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.tryRecoverSecret(props);\n            const client = this.getClient(props.vaultInfo.name);\n            const ss = yield client.setSecret(props.name, props.value, {\n                enabled: true,\n                contentType: props.contentType,\n                tags: props.tags,\n            });\n            return { id: ss.properties.id || this.name, outs: props };\n        });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f15(__0, __1, __2) {\n  return (function() {\n    with({ __awaiter: __f6 }) {\n\nreturn function /*update*/(id, olds, news) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const rs = yield this.create(news);\n            //Delete the old Secret\n            if (olds.name !== news.name || olds.vaultInfo.name !== news.vaultInfo.name)\n                yield this.delete(id, olds).catch((e) =\u003e { var _a; return console.log(`Cannot delete ${this.name}`, (_a = e === null || e === void 0 ? void 0 : e.resource) === null || _a === void 0 ? void 0 : _a.data); });\n            return rs;\n        });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f16(__0, __1) {\n  return (function() {\n    with({ __awaiter: __f6 }) {\n\nreturn function /*delete*/(id, props) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const client = this.getClient(props.vaultInfo.name);\n                yield client.beginDeleteSecret(props.name);\n            }\n            catch (_a) {\n                //Ignore\n            }\n        });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f17(__0, __1, __2) {\n  return (function() {\n    with({ __awaiter: __f6 }) {\n\nreturn function /*diff*/(id, previousOutput, news) {\n        return __awaiter(this, void 0, void 0, function* () {\n            //check if secret is delete then commit changes to recover it.\n            const deleted = yield this.tryGetDeletedSecret(news);\n            return {\n                deleteBeforeReplace: false,\n                changes: deleted != undefined ||\n                    previousOutput.name !== news.name ||\n                    previousOutput.vaultInfo.name !== news.vaultInfo.name ||\n                    previousOutput.value !== news.value ||\n                    previousOutput.contentType !== news.contentType,\n            };\n        });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f0() {\n  return (function() {\n    with({ provider: __provider }) {\n\nreturn () =\u003e provider;\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n",
                    "contentType": "Random Ssh",
                    "name": "drunk-ssh-user",
                    "value": "admindev-drunk-",
                    "vaultInfo": {
                        "group": {
                            "resourceGroupName": "global-grp-drunk"
                        },
                        "id": "/subscriptions/f146579d-929c-4f4b-a742-b4ad6ab9ef27/resourceGroups/global-grp-drunk/providers/Microsoft.KeyVault/vaults/global-drunk-vlt",
                        "name": "global-drunk-vlt"
                    }
                },
                "parent": "urn:pulumi:dev::azure-drunk-aks::pulumi:pulumi:Stack::azure-drunk-aks-dev",
                "dependencies": [
                    "urn:pulumi:dev::azure-drunk-aks::random:index/randomString:RandomString::dev-drunk-ssh"
                ],
                "provider": "urn:pulumi:dev::azure-drunk-aks::pulumi:providers:pulumi-nodejs::default::16112b54-df04-4a88-8f97-ab00111abe86",
                "propertyDependencies": {
                    "__provider": null,
                    "contentType": null,
                    "name": null,
                    "value": [
                        "urn:pulumi:dev::azure-drunk-aks::random:index/randomString:RandomString::dev-drunk-ssh"
                    ],
                    "vaultInfo": null
                }
            },
            {
                "urn": "urn:pulumi:dev::azure-drunk-aks::azure-native:network:VirtualNetwork::dev-aks-vnt",
                "custom": true,
                "id": "/subscriptions/f146579d-929c-4f4b-a742-b4ad6ab9ef27/resourceGroups/dev-aks-grp-drunk/providers/Microsoft.Network/virtualNetworks/dev-aks-vnt",
                "type": "azure-native:network:VirtualNetwork",
                "inputs": {
                    "addressSpace": {
                        "addressPrefixes": [
                            "192.167.0.0/21"
                        ]
                    },
                    "enableDdosProtection": false,
                    "enableVmProtection": true,
                    "location": "southeastasia",
                    "resourceGroupName": "dev-aks-grp-drunk",
                    "subnets": [
                        {
                            "addressPrefix": "192.167.1.0/24",
                            "location": "southeastasia",
                            "name": "aks",
                            "networkSecurityGroup": {
                                "id": "/subscriptions/f146579d-929c-4f4b-a742-b4ad6ab9ef27/resourceGroups/dev-aks-grp-drunk/providers/Microsoft.Network/networkSecurityGroups/dev-aks-vnt-sg"
                            },
                            "privateEndpointNetworkPolicies": "Disabled",
                            "privateLinkServiceNetworkPolicies": "Disabled",
                            "resourceGroupName": "dev-aks-grp-drunk",
                            "routeTable": {
                                "id": "/subscriptions/f146579d-929c-4f4b-a742-b4ad6ab9ef27/resourceGroups/dev-aks-grp-drunk/providers/Microsoft.Network/routeTables/dev-aks-vnt-route"
                            },
                            "serviceEndpoints": [
                                {
                                    "service": "Microsoft.Sql"
                                }
                            ],
                            "subnetName": "aks",
                            "virtualNetworkName": "aks"
                        },
                        {
                            "addressPrefix": "192.167.0.128/27",
                            "location": "southeastasia",
                            "name": "private",
                            "networkSecurityGroup": {
                                "id": "/subscriptions/f146579d-929c-4f4b-a742-b4ad6ab9ef27/resourceGroups/dev-aks-grp-drunk/providers/Microsoft.Network/networkSecurityGroups/dev-aks-vnt-sg"
                            },
                            "privateEndpointNetworkPolicies": "Disabled",
                            "privateLinkServiceNetworkPolicies": "Disabled",
                            "resourceGroupName": "dev-aks-grp-drunk",
                            "routeTable": {
                                "id": "/subscriptions/f146579d-929c-4f4b-a742-b4ad6ab9ef27/resourceGroups/dev-aks-grp-drunk/providers/Microsoft.Network/routeTables/dev-aks-vnt-route"
                            },
                            "subnetName": "private",
                            "virtualNetworkName": "aks"
                        },
                        {
                            "addressPrefix": "192.167.2.0/24",
                            "delegations": [
                                {
                                    "name": "aks-virtual-containerGroups-delegate",
                                    "serviceName": "Microsoft.ContainerInstance/containerGroups"
                                }
                            ],
                            "location": "southeastasia",
                            "name": "aks-virtual",
                            "networkSecurityGroup": {
                                "id": "/subscriptions/f146579d-929c-4f4b-a742-b4ad6ab9ef27/resourceGroups/dev-aks-grp-drunk/providers/Microsoft.Network/networkSecurityGroups/dev-aks-vnt-sg"
                            },
                            "privateEndpointNetworkPolicies": "Disabled",
                            "privateLinkServiceNetworkPolicies": "Disabled",
                            "resourceGroupName": "dev-aks-grp-drunk",
                            "serviceEndpoints": [
                                {
                                    "service": "Microsoft.Sql"
                                }
                            ],
                            "subnetName": "aks-virtual",
                            "virtualNetworkName": "aks"
                        }
                    ],
                    "tags": {
                        "environment": "dev",
                        "organization": "drunk",
                        "pulumi-project": "azure-drunk-aks"
                    },
                    "virtualNetworkName": "dev-aks-vnt"
                },
                "outputs": {
                    "__inputs": {
                        "4dabf18193072939515e22adb298388d": "1b47061264138c4ac30d75fd1eb44270",
                        "ciphertext": "AAABAOyfSizO/rxEvXLohWP0wgAQCISfVfXwXpdMn2M/uNqJUn1CJvcN5zTHuRU0YB292i1ltkKM30nImLCLxO4FWC6ulGCHwzhnQDGqJwmmeaptwRIGYfRKeoN8598SvSraQNlQjYZaB/LgiaFJdzNM8QF7NPy0fkUnjXlvlfVLdbjDWaEn2DWaSAZY/m6Ht/NcG/Q3H6Bzh/TC/6viVPULV1UHrngJK+Fs4McbSzxxO1Nw66J6F4jbykloOjChJOEa7fXWXyWj119KHfUd9zxXAlbBp67fZvTm90QoxdYPPslN1Uq+T8D+Zf1CbhowEDcFhHw2CF5yLmzY3eNUWi9bTVMVh4zRY0ybImV5HX+TzEZucrGmumLwd8yG2y6ol3oN0rZkJNAymqO15PXlbMfgfeyHmoA7qM7QygcTS0HrNLCLUQ3A2ni9OR0igy8GvSpb8bYuxxTfz3BcmUZrmgzI9wUBaAB6s0qlsPkNOM9an2c/08gyxQcmCDizdxCzXNw+OfizKvuxjHTnwTdYPoqCo3/exD0IdprE682ubqR1cEUj/3oUVbudpGeXTi0bmCae/Or4wlGgWS2nd1GFG/+JqbCPZAU+VsjIIKRgf/OvcZmMsSn54TekYqm5bQDpcN3sUImGfgZ1Q9mEghNnXu9beY6284b3a5Ob5si6HVua6WsV2v+3vs5yDhUZ0pOn05OL2BGPOHHLtFKZSBYYqBV+e28LbHXMP6ujXxKd+ZShWZGcqxaBF416kkDzjYamFNsrampAJ+iYBNkQbvt9jQF+csf3Ab0fJGdmhUgeX7pHtQQWx0LAZ2Z8XBeVqn2aFx4tgSmRg8m9z5CJzcGcODlpyfst3Bff9c2mTYfDiBdjLRTarpIRd5AIPC/dnvM5zu3H6xHZQrVyhty7/KCupVIjJSuMIlWIrkl4bP0tgXWg5SeOSnEMwHGvOr+Kayd3sMc6l43QL2XzT4chhhFhiN91YOfxEfHrBlceTGlJyov5ELfTa+3F3Z/g8R6TYKo6V51y0ElNZed1bGe8S4qTHB0ZCQaQt0AY5EMv76LbLCmmQT+6HMLU40qyqsewVrIQ7t49oZ8BllcN61k7+f6nKQuCQKbOBS9zI+nsx5gpWMP4xeHhrH5DTG8hHOiwLp7i09nDnyUR6+zyg7umWCgUF2dKeG2kPutAa33+X/OKk+nlJuX0JuS+b1QjMyTq9oLfCQgVP/tyCNrPb0mFEQ1dvS1v9syxNgW+ArH9fp4GWrNlsv2LccT/bYNrUC5yIDroIbR26ql8UAgMHng+E2U/UE2XBUPdKZefk9NfMIpv9MyBb0m3cv2rQ2h6GbRSicD9Zq8c0sDQLvSqjnzHc+UpJWfh2mIVNz10MDHGD0ef1im2TohFZaW/CYRzQHVr7kxiwdovpaF5Abk20CMH/1inFjAb+VP1pZfCdD51pJhQzqo1hj3qlJ0mef6ADzAG+sgZa7CBKvxxXuOI0QeimIT84OHluRKs9t8Hip6kmjHaT6QKPtcH4peS6E9HILPfwZeN4dt+tZD0cI/Hy9iSTVuwRa71iLH16Q+KdCxNlFBUSMw10MAQJ9HU6jkH5sHnYYEiW9RTW5EBtRb3HD66zXLO04WBqgFg5+7Xe3MSoeXubm1HziEtBjvu6LgLU+hX3Vk8LhBO8bffFqp/5onLobMiMcJijrKGPXoOP+e0WJz928DryI5AMaKadGdJujvY3bJ2g+pXUWrURg9FQat//Z/+IXqBISBwIC4t6lqe4VcDrL8BBX5NEIOR74X1YlGPCKp6nJkW/02FaeRhU3rQ5T+3nJVzkEXGvHC52qYV+bWWWB9PsOBE/zu3BsXvEhiipruL/5MHxVydZUvNsQzrkpO+FhKk0B1B8qDgoDGiyemagaj/rt6HPE7gheCa3qjBIgD3xiIGWICotrOmMyA3nOkHaEDbROC1/fuqKK050MN0PNs2VlQ5mMzxgCMQD9A0Hpi5eGWatZ6wFl4ghexrBtRCLzdpfTPHcbeZIz2X9dDISoOHieVxCBaKGDucWdk/DpYyLGvHwO80NQsmrh1wFbAJHieXBWiBVytBP60IuZe8hX4Ux0kOzMGZyXrMYKh45UOGbI1xyxH4UENwSoLoif4n5DgIyyoF563Gb3EnxZ/Pq2wNCPmDtVQbSNRTFKr/fQYYAeQe8HfnvNwk5Xm3ppQT/CIBtqTc53XNKfAhRoj7XgAX6z/KLy7oOjeTAbOxIBrePKO9XNKdvnz62fhEJKMbqrL1Sz3ppwCm17AQJ14pZIqUEG85wDlzgxazbK2cOE6vPhPevsv9b6WEnnFww3I5sYADKjo2jhUpHbH4AjgNfshl1mzljXvVNl1V46ywCSdC9qIQkmuaFf6P7pJoANYtt7cEk5GIdVRJHZTDD2tzHRvUCmZi7IRUKyorKE4+qQZ9RvEvcGl7WX2Q35PPo8wD0Mu4q2CrVPtOq5/ZCu1bFVggduS3/cPznNF/sBNXlhYorR3zu6Lwts0OI++908E2dAiuRE0hWuL8AAxVZz0semA6vYAilCiRYHOmooTFV/1B4txBzApr9Ki1cSl73PROtLb28ge8qLpUtrQevcA9NHZIjXcOhZssf/0tCIhkPt7t7xCw5uGTs7tG19k36qqJhToetAEV3b+artghFtg6WYPfvDJMdC5n6VW7B6ERkBA+k1+eRuacfQnckpatfLNonsGOH4PIAwSGNIYdqcg1L/rMpIJ9FcpsESoyvM6HQiRc9fcXJAMA8jw7XKiHcrRt4EMmF0Us/U+AvzP0m4tH77x38rOzIP+zueheQTMQXojcpnHZ7l/DlfnGAwhRZ2keI06xoxovVXM9hpxVtinTic0mh9huZmp37NE18BfPUQdXuGYwvHXuNALLYJJk8rlyJEw9idJuaC1WwZzAlSG1X/dquH07SpjSOI0MHfD2zNaOm3RY9Tzi6ge9lq8AzT/F"
                    },
                    "addressSpace": {
                        "addressPrefixes": [
                            "192.167.0.0/21"
                        ]
                    },
                    "enableDdosProtection": false,
                    "etag": "W/\"efd65592-13f3-48b7-ad9d-a89979287174\"",
                    "id": "/subscriptions/f146579d-929c-4f4b-a742-b4ad6ab9ef27/resourceGroups/dev-aks-grp-drunk/providers/Microsoft.Network/virtualNetworks/dev-aks-vnt",
                    "location": "southeastasia",
                    "name": "dev-aks-vnt",
                    "provisioningState": "Succeeded",
                    "resourceGuid": "e0bb92a4-5e50-4fa0-af13-985d1d39b618",
                    "subnets": [
                        {
                            "addressPrefix": "192.167.1.0/24",
                            "delegations": [],
                            "etag": "W/\"efd65592-13f3-48b7-ad9d-a89979287174\"",
                            "id": "/subscriptions/f146579d-929c-4f4b-a742-b4ad6ab9ef27/resourceGroups/dev-aks-grp-drunk/providers/Microsoft.Network/virtualNetworks/dev-aks-vnt/subnets/aks",
                            "ipConfigurations": [
                                {
                                    "id": "/subscriptions/f146579d-929c-4f4b-a742-b4ad6ab9ef27/resourceGroups/dev-drunk-aks-nodes/providers/Microsoft.Compute/virtualMachineScaleSets/aks-sys-10021711-vmss/virtualMachines/168/networkInterfaces/aks-sys-10021711-vmss/ipConfigurations/ipconfig1"
                                },
                                {
                                    "id": "/subscriptions/f146579d-929c-4f4b-a742-b4ad6ab9ef27/resourceGroups/dev-drunk-aks-nodes/providers/Microsoft.Compute/virtualMachineScaleSets/aks-sys-10021711-vmss/virtualMachines/168/networkInterfaces/aks-sys-10021711-vmss/ipConfigurations/ipconfig2"
                                },
                                {
                                    "id": "/subscriptions/f146579d-929c-4f4b-a742-b4ad6ab9ef27/resourceGroups/dev-drunk-aks-nodes/providers/Microsoft.Compute/virtualMachineScaleSets/aks-sys-10021711-vmss/virtualMachines/168/networkInterfaces/aks-sys-10021711-vmss/ipConfigurations/ipconfig3"
                                },
                                {
                                    "id": "/subscriptions/f146579d-929c-4f4b-a742-b4ad6ab9ef27/resourceGroups/dev-drunk-aks-nodes/providers/Microsoft.Compute/virtualMachineScaleSets/aks-sys-10021711-vmss/virtualMachines/168/networkInterfaces/aks-sys-10021711-vmss/ipConfigurations/ipconfig4"
                                },
                                {
                                    "id": "/subscriptions/f146579d-929c-4f4b-a742-b4ad6ab9ef27/resourceGroups/dev-drunk-aks-nodes/providers/Microsoft.Compute/virtualMachineScaleSets/aks-sys-10021711-vmss/virtualMachines/168/networkInterfaces/aks-sys-10021711-vmss/ipConfigurations/ipconfig5"
                                },
                                {
                                    "id": "/subscriptions/f146579d-929c-4f4b-a742-b4ad6ab9ef27/resourceGroups/dev-drunk-aks-nodes/providers/Microsoft.Compute/virtualMachineScaleSets/aks-sys-10021711-vmss/virtualMachines/168/networkInterfaces/aks-sys-10021711-vmss/ipConfigurations/ipconfig6"
                                },
                                {
                                    "id": "/subscriptions/f146579d-929c-4f4b-a742-b4ad6ab9ef27/resourceGroups/dev-drunk-aks-nodes/providers/Microsoft.Compute/virtualMachineScaleSets/aks-sys-10021711-vmss/virtualMachines/168/networkInterfaces/aks-sys-10021711-vmss/ipConfigurations/ipconfig7"
                                },
                                {
                                    "id": "/subscriptions/f146579d-929c-4f4b-a742-b4ad6ab9ef27/resourceGroups/dev-drunk-aks-nodes/providers/Microsoft.Compute/virtualMachineScaleSets/aks-sys-10021711-vmss/virtualMachines/168/networkInterfaces/aks-sys-10021711-vmss/ipConfigurations/ipconfig8"
                                },
                                {
                                    "id": "/subscriptions/f146579d-929c-4f4b-a742-b4ad6ab9ef27/resourceGroups/dev-drunk-aks-nodes/providers/Microsoft.Compute/virtualMachineScaleSets/aks-sys-10021711-vmss/virtualMachines/168/networkInterfaces/aks-sys-10021711-vmss/ipConfigurations/ipconfig9"
                                },
                                {
                                    "id": "/subscriptions/f146579d-929c-4f4b-a742-b4ad6ab9ef27/resourceGroups/dev-drunk-aks-nodes/providers/Microsoft.Compute/virtualMachineScaleSets/aks-sys-10021711-vmss/virtualMachines/168/networkInterfaces/aks-sys-10021711-vmss/ipConfigurations/ipconfig10"
                                },
                                {
                                    "id": "/subscriptions/f146579d-929c-4f4b-a742-b4ad6ab9ef27/resourceGroups/dev-drunk-aks-nodes/providers/Microsoft.Compute/virtualMachineScaleSets/aks-sys-10021711-vmss/virtualMachines/168/networkInterfaces/aks-sys-10021711-vmss/ipConfigurations/ipconfig11"
                                },
                                {
                                    "id": "/subscriptions/f146579d-929c-4f4b-a742-b4ad6ab9ef27/resourceGroups/dev-drunk-aks-nodes/providers/Microsoft.Compute/virtualMachineScaleSets/aks-sys-10021711-vmss/virtualMachines/168/networkInterfaces/aks-sys-10021711-vmss/ipConfigurations/ipconfig12"
                                },
                                {
                                    "id": "/subscriptions/f146579d-929c-4f4b-a742-b4ad6ab9ef27/resourceGroups/dev-drunk-aks-nodes/providers/Microsoft.Compute/virtualMachineScaleSets/aks-sys-10021711-vmss/virtualMachines/168/networkInterfaces/aks-sys-10021711-vmss/ipConfigurations/ipconfig13"
                                },
                                {
                                    "id": "/subscriptions/f146579d-929c-4f4b-a742-b4ad6ab9ef27/resourceGroups/dev-drunk-aks-nodes/providers/Microsoft.Compute/virtualMachineScaleSets/aks-sys-10021711-vmss/virtualMachines/168/networkInterfaces/aks-sys-10021711-vmss/ipConfigurations/ipconfig14"
                                },
                                {
                                    "id": "/subscriptions/f146579d-929c-4f4b-a742-b4ad6ab9ef27/resourceGroups/dev-drunk-aks-nodes/providers/Microsoft.Compute/virtualMachineScaleSets/aks-sys-10021711-vmss/virtualMachines/168/networkInterfaces/aks-sys-10021711-vmss/ipConfigurations/ipconfig15"
                                },
                                {
                                    "id": "/subscriptions/f146579d-929c-4f4b-a742-b4ad6ab9ef27/resourceGroups/dev-drunk-aks-nodes/providers/Microsoft.Compute/virtualMachineScaleSets/aks-sys-10021711-vmss/virtualMachines/168/networkInterfaces/aks-sys-10021711-vmss/ipConfigurations/ipconfig16"
                                },
                                {
                                    "id": "/subscriptions/f146579d-929c-4f4b-a742-b4ad6ab9ef27/resourceGroups/dev-drunk-aks-nodes/providers/Microsoft.Compute/virtualMachineScaleSets/aks-sys-10021711-vmss/virtualMachines/168/networkInterfaces/aks-sys-10021711-vmss/ipConfigurations/ipconfig17"
                                },
                                {
                                    "id": "/subscriptions/f146579d-929c-4f4b-a742-b4ad6ab9ef27/resourceGroups/dev-drunk-aks-nodes/providers/Microsoft.Compute/virtualMachineScaleSets/aks-sys-10021711-vmss/virtualMachines/168/networkInterfaces/aks-sys-10021711-vmss/ipConfigurations/ipconfig18"
                                },
                                {
                                    "id": "/subscriptions/f146579d-929c-4f4b-a742-b4ad6ab9ef27/resourceGroups/dev-drunk-aks-nodes/providers/Microsoft.Compute/virtualMachineScaleSets/aks-sys-10021711-vmss/virtualMachines/168/networkInterfaces/aks-sys-10021711-vmss/ipConfigurations/ipconfig19"
                                },
                                {
                                    "id": "/subscriptions/f146579d-929c-4f4b-a742-b4ad6ab9ef27/resourceGroups/dev-drunk-aks-nodes/providers/Microsoft.Compute/virtualMachineScaleSets/aks-sys-10021711-vmss/virtualMachines/168/networkInterfaces/aks-sys-10021711-vmss/ipConfigurations/ipconfig20"
                                },
                                {
                                    "id": "/subscriptions/f146579d-929c-4f4b-a742-b4ad6ab9ef27/resourceGroups/dev-drunk-aks-nodes/providers/Microsoft.Compute/virtualMachineScaleSets/aks-sys-10021711-vmss/virtualMachines/168/networkInterfaces/aks-sys-10021711-vmss/ipConfigurations/ipconfig21"
                                },
                                {
                                    "id": "/subscriptions/f146579d-929c-4f4b-a742-b4ad6ab9ef27/resourceGroups/dev-drunk-aks-nodes/providers/Microsoft.Compute/virtualMachineScaleSets/aks-sys-10021711-vmss/virtualMachines/168/networkInterfaces/aks-sys-10021711-vmss/ipConfigurations/ipconfig22"
                                },
                                {
                                    "id": "/subscriptions/f146579d-929c-4f4b-a742-b4ad6ab9ef27/resourceGroups/dev-drunk-aks-nodes/providers/Microsoft.Compute/virtualMachineScaleSets/aks-sys-10021711-vmss/virtualMachines/168/networkInterfaces/aks-sys-10021711-vmss/ipConfigurations/ipconfig23"
                                },
                                {
                                    "id": "/subscriptions/f146579d-929c-4f4b-a742-b4ad6ab9ef27/resourceGroups/dev-drunk-aks-nodes/providers/Microsoft.Compute/virtualMachineScaleSets/aks-sys-10021711-vmss/virtualMachines/168/networkInterfaces/aks-sys-10021711-vmss/ipConfigurations/ipconfig24"
                                },
                                {
                                    "id": "/subscriptions/f146579d-929c-4f4b-a742-b4ad6ab9ef27/resourceGroups/dev-drunk-aks-nodes/providers/Microsoft.Compute/virtualMachineScaleSets/aks-sys-10021711-vmss/virtualMachines/168/networkInterfaces/aks-sys-10021711-vmss/ipConfigurations/ipconfig25"
                                },
                                {
                                    "id": "/subscriptions/f146579d-929c-4f4b-a742-b4ad6ab9ef27/resourceGroups/dev-drunk-aks-nodes/providers/Microsoft.Compute/virtualMachineScaleSets/aks-sys-10021711-vmss/virtualMachines/168/networkInterfaces/aks-sys-10021711-vmss/ipConfigurations/ipconfig26"
                                },
                                {
                                    "id": "/subscriptions/f146579d-929c-4f4b-a742-b4ad6ab9ef27/resourceGroups/dev-drunk-aks-nodes/providers/Microsoft.Compute/virtualMachineScaleSets/aks-sys-10021711-vmss/virtualMachines/168/networkInterfaces/aks-sys-10021711-vmss/ipConfigurations/ipconfig27"
                                },
                                {
                                    "id": "/subscriptions/f146579d-929c-4f4b-a742-b4ad6ab9ef27/resourceGroups/dev-drunk-aks-nodes/providers/Microsoft.Compute/virtualMachineScaleSets/aks-sys-10021711-vmss/virtualMachines/168/networkInterfaces/aks-sys-10021711-vmss/ipConfigurations/ipconfig28"
                                },
                                {
                                    "id": "/subscriptions/f146579d-929c-4f4b-a742-b4ad6ab9ef27/resourceGroups/dev-drunk-aks-nodes/providers/Microsoft.Compute/virtualMachineScaleSets/aks-sys-10021711-vmss/virtualMachines/168/networkInterfaces/aks-sys-10021711-vmss/ipConfigurations/ipconfig29"
                                },
                                {
                                    "id": "/subscriptions/f146579d-929c-4f4b-a742-b4ad6ab9ef27/resourceGroups/dev-drunk-aks-nodes/providers/Microsoft.Compute/virtualMachineScaleSets/aks-sys-10021711-vmss/virtualMachines/168/networkInterfaces/aks-sys-10021711-vmss/ipConfigurations/ipconfig30"
                                },
                                {
                                    "id": "/subscriptions/f146579d-929c-4f4b-a742-b4ad6ab9ef27/resourceGroups/dev-drunk-aks-nodes/providers/Microsoft.Compute/virtualMachineScaleSets/aks-sys-10021711-vmss/virtualMachines/168/networkInterfaces/aks-sys-10021711-vmss/ipConfigurations/ipconfig31"
                                },
                                {
                                    "id": "/subscriptions/f146579d-929c-4f4b-a742-b4ad6ab9ef27/resourceGroups/dev-drunk-aks-nodes/providers/Microsoft.Compute/virtualMachineScaleSets/aks-sys-10021711-vmss/virtualMachines/168/networkInterfaces/aks-sys-10021711-vmss/ipConfigurations/ipconfig32"
                                },
                                {
                                    "id": "/subscriptions/f146579d-929c-4f4b-a742-b4ad6ab9ef27/resourceGroups/dev-drunk-aks-nodes/providers/Microsoft.Compute/virtualMachineScaleSets/aks-sys-10021711-vmss/virtualMachines/168/networkInterfaces/aks-sys-10021711-vmss/ipConfigurations/ipconfig33"
                                },
                                {
                                    "id": "/subscriptions/f146579d-929c-4f4b-a742-b4ad6ab9ef27/resourceGroups/dev-drunk-aks-nodes/providers/Microsoft.Compute/virtualMachineScaleSets/aks-sys-10021711-vmss/virtualMachines/168/networkInterfaces/aks-sys-10021711-vmss/ipConfigurations/ipconfig34"
                                },
                                {
                                    "id": "/subscriptions/f146579d-929c-4f4b-a742-b4ad6ab9ef27/resourceGroups/dev-drunk-aks-nodes/providers/Microsoft.Compute/virtualMachineScaleSets/aks-sys-10021711-vmss/virtualMachines/168/networkInterfaces/aks-sys-10021711-vmss/ipConfigurations/ipconfig35"
                                },
                                {
                                    "id": "/subscriptions/f146579d-929c-4f4b-a742-b4ad6ab9ef27/resourceGroups/dev-drunk-aks-nodes/providers/Microsoft.Compute/virtualMachineScaleSets/aks-sys-10021711-vmss/virtualMachines/168/networkInterfaces/aks-sys-10021711-vmss/ipConfigurations/ipconfig36"
                                },
                                {
                                    "id": "/subscriptions/f146579d-929c-4f4b-a742-b4ad6ab9ef27/resourceGroups/dev-drunk-aks-nodes/providers/Microsoft.Compute/virtualMachineScaleSets/aks-sys-10021711-vmss/virtualMachines/168/networkInterfaces/aks-sys-10021711-vmss/ipConfigurations/ipconfig37"
                                },
                                {
                                    "id": "/subscriptions/f146579d-929c-4f4b-a742-b4ad6ab9ef27/resourceGroups/dev-drunk-aks-nodes/providers/Microsoft.Compute/virtualMachineScaleSets/aks-sys-10021711-vmss/virtualMachines/168/networkInterfaces/aks-sys-10021711-vmss/ipConfigurations/ipconfig38"
                                },
                                {
                                    "id": "/subscriptions/f146579d-929c-4f4b-a742-b4ad6ab9ef27/resourceGroups/dev-drunk-aks-nodes/providers/Microsoft.Compute/virtualMachineScaleSets/aks-sys-10021711-vmss/virtualMachines/168/networkInterfaces/aks-sys-10021711-vmss/ipConfigurations/ipconfig39"
                                },
                                {
                                    "id": "/subscriptions/f146579d-929c-4f4b-a742-b4ad6ab9ef27/resourceGroups/dev-drunk-aks-nodes/providers/Microsoft.Compute/virtualMachineScaleSets/aks-sys-10021711-vmss/virtualMachines/168/networkInterfaces/aks-sys-10021711-vmss/ipConfigurations/ipconfig40"
                                },
                                {
                                    "id": "/subscriptions/f146579d-929c-4f4b-a742-b4ad6ab9ef27/resourceGroups/dev-drunk-aks-nodes/providers/Microsoft.Compute/virtualMachineScaleSets/aks-sys-10021711-vmss/virtualMachines/168/networkInterfaces/aks-sys-10021711-vmss/ipConfigurations/ipconfig41"
                                },
                                {
                                    "id": "/subscriptions/f146579d-929c-4f4b-a742-b4ad6ab9ef27/resourceGroups/dev-drunk-aks-nodes/providers/Microsoft.Compute/virtualMachineScaleSets/aks-sys-10021711-vmss/virtualMachines/168/networkInterfaces/aks-sys-10021711-vmss/ipConfigurations/ipconfig42"
                                },
                                {
                                    "id": "/subscriptions/f146579d-929c-4f4b-a742-b4ad6ab9ef27/resourceGroups/dev-drunk-aks-nodes/providers/Microsoft.Compute/virtualMachineScaleSets/aks-sys-10021711-vmss/virtualMachines/168/networkInterfaces/aks-sys-10021711-vmss/ipConfigurations/ipconfig43"
                                },
                                {
                                    "id": "/subscriptions/f146579d-929c-4f4b-a742-b4ad6ab9ef27/resourceGroups/dev-drunk-aks-nodes/providers/Microsoft.Compute/virtualMachineScaleSets/aks-sys-10021711-vmss/virtualMachines/168/networkInterfaces/aks-sys-10021711-vmss/ipConfigurations/ipconfig44"
                                },
                                {
                                    "id": "/subscriptions/f146579d-929c-4f4b-a742-b4ad6ab9ef27/resourceGroups/dev-drunk-aks-nodes/providers/Microsoft.Compute/virtualMachineScaleSets/aks-sys-10021711-vmss/virtualMachines/168/networkInterfaces/aks-sys-10021711-vmss/ipConfigurations/ipconfig45"
                                },
                                {
                                    "id": "/subscriptions/f146579d-929c-4f4b-a742-b4ad6ab9ef27/resourceGroups/dev-drunk-aks-nodes/providers/Microsoft.Compute/virtualMachineScaleSets/aks-sys-10021711-vmss/virtualMachines/168/networkInterfaces/aks-sys-10021711-vmss/ipConfigurations/ipconfig46"
                                },
                                {
                                    "id": "/subscriptions/f146579d-929c-4f4b-a742-b4ad6ab9ef27/resourceGroups/dev-drunk-aks-nodes/providers/Microsoft.Compute/virtualMachineScaleSets/aks-sys-10021711-vmss/virtualMachines/168/networkInterfaces/aks-sys-10021711-vmss/ipConfigurations/ipconfig47"
                                },
                                {
                                    "id": "/subscriptions/f146579d-929c-4f4b-a742-b4ad6ab9ef27/resourceGroups/dev-drunk-aks-nodes/providers/Microsoft.Compute/virtualMachineScaleSets/aks-sys-10021711-vmss/virtualMachines/168/networkInterfaces/aks-sys-10021711-vmss/ipConfigurations/ipconfig48"
                                },
                                {
                                    "id": "/subscriptions/f146579d-929c-4f4b-a742-b4ad6ab9ef27/resourceGroups/dev-drunk-aks-nodes/providers/Microsoft.Compute/virtualMachineScaleSets/aks-sys-10021711-vmss/virtualMachines/168/networkInterfaces/aks-sys-10021711-vmss/ipConfigurations/ipconfig49"
                                },
                                {
                                    "id": "/subscriptions/f146579d-929c-4f4b-a742-b4ad6ab9ef27/resourceGroups/dev-drunk-aks-nodes/providers/Microsoft.Compute/virtualMachineScaleSets/aks-sys-10021711-vmss/virtualMachines/168/networkInterfaces/aks-sys-10021711-vmss/ipConfigurations/ipconfig50"
                                },
                                {
                                    "id": "/subscriptions/f146579d-929c-4f4b-a742-b4ad6ab9ef27/resourceGroups/dev-drunk-aks-nodes/providers/Microsoft.Compute/virtualMachineScaleSets/aks-sys-10021711-vmss/virtualMachines/168/networkInterfaces/aks-sys-10021711-vmss/ipConfigurations/ipconfig51"
                                }
                            ],
                            "name": "aks",
                            "networkSecurityGroup": {
                                "id": "/subscriptions/f146579d-929c-4f4b-a742-b4ad6ab9ef27/resourceGroups/dev-aks-grp-drunk/providers/Microsoft.Network/networkSecurityGroups/dev-aks-vnt-sg"
                            },
                            "privateEndpointNetworkPolicies": "Disabled",
                            "privateLinkServiceNetworkPolicies": "Disabled",
                            "provisioningState": "Succeeded",
                            "routeTable": {
                                "id": "/subscriptions/f146579d-929c-4f4b-a742-b4ad6ab9ef27/resourceGroups/dev-aks-grp-drunk/providers/Microsoft.Network/routeTables/dev-aks-vnt-route"
                            },
                            "serviceEndpoints": [
                                {
                                    "locations": [
                                        "southeastasia"
                                    ],
                                    "provisioningState": "Succeeded",
                                    "service": "Microsoft.Sql"
                                }
                            ],
                            "type": "Microsoft.Network/virtualNetworks/subnets"
                        },
                        {
                            "addressPrefix": "192.167.0.128/27",
                            "delegations": [],
                            "etag": "W/\"efd65592-13f3-48b7-ad9d-a89979287174\"",
                            "id": "/subscriptions/f146579d-929c-4f4b-a742-b4ad6ab9ef27/resourceGroups/dev-aks-grp-drunk/providers/Microsoft.Network/virtualNetworks/dev-aks-vnt/subnets/private",
                            "name": "private",
                            "networkSecurityGroup": {
                                "id": "/subscriptions/f146579d-929c-4f4b-a742-b4ad6ab9ef27/resourceGroups/dev-aks-grp-drunk/providers/Microsoft.Network/networkSecurityGroups/dev-aks-vnt-sg"
                            },
                            "privateEndpointNetworkPolicies": "Disabled",
                            "privateLinkServiceNetworkPolicies": "Disabled",
                            "provisioningState": "Succeeded",
                            "routeTable": {
                                "id": "/subscriptions/f146579d-929c-4f4b-a742-b4ad6ab9ef27/resourceGroups/dev-aks-grp-drunk/providers/Microsoft.Network/routeTables/dev-aks-vnt-route"
                            },
                            "type": "Microsoft.Network/virtualNetworks/subnets"
                        },
                        {
                            "addressPrefix": "192.167.2.0/24",
                            "delegations": [
                                {
                                    "actions": [
                                        "Microsoft.Network/virtualNetworks/subnets/action"
                                    ],
                                    "etag": "W/\"efd65592-13f3-48b7-ad9d-a89979287174\"",
                                    "id": "/subscriptions/f146579d-929c-4f4b-a742-b4ad6ab9ef27/resourceGroups/dev-aks-grp-drunk/providers/Microsoft.Network/virtualNetworks/dev-aks-vnt/subnets/aks-virtual/delegations/aks-virtual-containerGroups-delegate",
                                    "name": "aks-virtual-containerGroups-delegate",
                                    "provisioningState": "Succeeded",
                                    "serviceName": "Microsoft.ContainerInstance/containerGroups",
                                    "type": "Microsoft.Network/virtualNetworks/subnets/delegations"
                                }
                            ],
                            "etag": "W/\"efd65592-13f3-48b7-ad9d-a89979287174\"",
                            "id": "/subscriptions/f146579d-929c-4f4b-a742-b4ad6ab9ef27/resourceGroups/dev-aks-grp-drunk/providers/Microsoft.Network/virtualNetworks/dev-aks-vnt/subnets/aks-virtual",
                            "ipConfigurationProfiles": [
                                {
                                    "id": "/subscriptions/f146579d-929c-4f4b-a742-b4ad6ab9ef27/resourceGroups/dev-drunk-aks-nodes/providers/Microsoft.Network/networkProfiles/vk-a79ee1e84b5baea6f39487c61b24d790e4083d55f4dae276bdd7fdc874e2ddf8/containerNetworkInterfaceConfigurations/eth0/ipConfigurations/ipconfigprofile1"
                                }
                            ],
                            "name": "aks-virtual",
                            "networkSecurityGroup": {
                                "id": "/subscriptions/f146579d-929c-4f4b-a742-b4ad6ab9ef27/resourceGroups/dev-aks-grp-drunk/providers/Microsoft.Network/networkSecurityGroups/dev-aks-vnt-sg"
                            },
                            "privateEndpointNetworkPolicies": "Disabled",
                            "privateLinkServiceNetworkPolicies": "Disabled",
                            "provisioningState": "Succeeded",
                            "serviceAssociationLinks": [
                                {
                                    "allowDelete": true,
                                    "etag": "W/\"efd65592-13f3-48b7-ad9d-a89979287174\"",
                                    "id": "/subscriptions/f146579d-929c-4f4b-a742-b4ad6ab9ef27/resourceGroups/dev-aks-grp-drunk/providers/Microsoft.Network/virtualNetworks/dev-aks-vnt/subnets/aks-virtual/serviceAssociationLinks/acisal",
                                    "linkedResourceType": "Microsoft.ContainerInstance/containerGroups",
                                    "locations": [
                                        "southeastasia"
                                    ],
                                    "name": "acisal",
                                    "provisioningState": "Succeeded",
                                    "type": "Microsoft.Network/virtualNetworks/subnets/serviceAssociationLinks"
                                }
                            ],
                            "serviceEndpoints": [
                                {
                                    "locations": [
                                        "southeastasia"
                                    ],
                                    "provisioningState": "Succeeded",
                                    "service": "Microsoft.Sql"
                                }
                            ],
                            "type": "Microsoft.Network/virtualNetworks/subnets"
                        }
                    ],
                    "tags": {
                        "environment": "dev",
                        "organization": "drunk",
                        "pulumi-project": "azure-drunk-aks"
                    },
                    "type": "Microsoft.Network/virtualNetworks",
                    "virtualNetworkPeerings": []
                },
                "parent": "urn:pulumi:dev::azure-drunk-aks::pulumi:pulumi:Stack::azure-drunk-aks-dev",
                "dependencies": [
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network:NetworkSecurityGroup::dev-aks-vnt-sg",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network:RouteTable::dev-aks-vnt-route",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:resources:ResourceGroup::dev-aks-grp-drunk"
                ],
                "provider": "urn:pulumi:dev::azure-drunk-aks::pulumi:providers:azure-native::default_1_58_0::e02a3ad2-7910-460b-ba9d-c2f29e3506c9",
                "propertyDependencies": {
                    "addressSpace": null,
                    "enableDdosProtection": null,
                    "enableVmProtection": null,
                    "location": [
                        "urn:pulumi:dev::azure-drunk-aks::azure-native:resources:ResourceGroup::dev-aks-grp-drunk"
                    ],
                    "resourceGroupName": null,
                    "subnets": [
                        "urn:pulumi:dev::azure-drunk-aks::azure-native:resources:ResourceGroup::dev-aks-grp-drunk",
                        "urn:pulumi:dev::azure-drunk-aks::azure-native:network:RouteTable::dev-aks-vnt-route",
                        "urn:pulumi:dev::azure-drunk-aks::azure-native:network:NetworkSecurityGroup::dev-aks-vnt-sg"
                    ],
                    "tags": null,
                    "virtualNetworkName": null
                },
                "aliases": [
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20150501preview:VirtualNetwork::dev-aks-vnt",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20150615:VirtualNetwork::dev-aks-vnt",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20160330:VirtualNetwork::dev-aks-vnt",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20160601:VirtualNetwork::dev-aks-vnt",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20160901:VirtualNetwork::dev-aks-vnt",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20161201:VirtualNetwork::dev-aks-vnt",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20170301:VirtualNetwork::dev-aks-vnt",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20170601:VirtualNetwork::dev-aks-vnt",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20170801:VirtualNetwork::dev-aks-vnt",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20170901:VirtualNetwork::dev-aks-vnt",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20171001:VirtualNetwork::dev-aks-vnt",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20171101:VirtualNetwork::dev-aks-vnt",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20180101:VirtualNetwork::dev-aks-vnt",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20180201:VirtualNetwork::dev-aks-vnt",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20180401:VirtualNetwork::dev-aks-vnt",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20180601:VirtualNetwork::dev-aks-vnt",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20180701:VirtualNetwork::dev-aks-vnt",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20180801:VirtualNetwork::dev-aks-vnt",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20181001:VirtualNetwork::dev-aks-vnt",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20181101:VirtualNetwork::dev-aks-vnt",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20181201:VirtualNetwork::dev-aks-vnt",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20190201:VirtualNetwork::dev-aks-vnt",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20190401:VirtualNetwork::dev-aks-vnt",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20190601:VirtualNetwork::dev-aks-vnt",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20190701:VirtualNetwork::dev-aks-vnt",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20190801:VirtualNetwork::dev-aks-vnt",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20190901:VirtualNetwork::dev-aks-vnt",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20191101:VirtualNetwork::dev-aks-vnt",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20191201:VirtualNetwork::dev-aks-vnt",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20200301:VirtualNetwork::dev-aks-vnt",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20200401:VirtualNetwork::dev-aks-vnt",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20200501:VirtualNetwork::dev-aks-vnt",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20200601:VirtualNetwork::dev-aks-vnt",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20200701:VirtualNetwork::dev-aks-vnt",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20200801:VirtualNetwork::dev-aks-vnt",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20201101:VirtualNetwork::dev-aks-vnt",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20210201:VirtualNetwork::dev-aks-vnt",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20210301:VirtualNetwork::dev-aks-vnt",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network/v20210501:VirtualNetwork::dev-aks-vnt"
                ]
            },
            {
                "urn": "urn:pulumi:dev::azure-drunk-aks::pulumi-nodejs:dynamic:Resource::csp:VaultSecrets:dev-drunk-ssh-password",
                "custom": true,
                "id": "https://global-drunk-vlt.vault.azure.net/secrets/drunk-ssh-password/afb6df73cb864dc18cbb060cb13e8021",
                "type": "pulumi-nodejs:dynamic:Resource",
                "inputs": {
                    "__provider": "exports.handler = __f0;\n\nvar __provider_proto = {};\nObject.defineProperty(__f1, \"prototype\", { value: __provider_proto });\nObject.defineProperty(__provider_proto, \"constructor\", { configurable: true, writable: true, value: __f1 });\nvar __Base_1 = {};\nvar __f3_prototype = {};\nObject.defineProperty(__f3_prototype, \"constructor\", { configurable: true, writable: true, value: __f3 });\nObject.defineProperty(__f3_prototype, \"getCredentials\", { configurable: true, writable: true, value: __f4 });\nObject.defineProperty(__f3_prototype, \"getToken\", { configurable: true, writable: true, value: __f5 });\nObject.defineProperty(__f3, \"prototype\", { value: __f3_prototype });\nvar __m = {};\nObject.defineProperty(__m, \"__esModule\", { value: true });\n__m.ClientCredential = __f3;\nvar __f8_prototype = {};\nObject.defineProperty(__f8_prototype, \"constructor\", { configurable: true, writable: true, value: __f8 });\nObject.defineProperty(__f8_prototype, \"getCredentials\", { configurable: true, writable: true, value: __f9 });\nObject.defineProperty(__f8_prototype, \"signRequest\", { configurable: true, writable: true, value: __f10 });\nObject.defineProperty(__f8_prototype, \"getToken\", { configurable: true, writable: true, value: __f11 });\nObject.defineProperty(__f8, \"prototype\", { value: __f8_prototype });\n__m.InternalCredentials = __f8;\nObject.defineProperty(__Base_1, \"ClientCredential\", { enumerable: true, get: __f7 });\nObject.defineProperty(__provider_proto, \"getClient\", { configurable: true, writable: true, value: __f2 });\nObject.defineProperty(__provider_proto, \"tryGetDeletedSecret\", { configurable: true, writable: true, value: __f12 });\nObject.defineProperty(__provider_proto, \"tryRecoverSecret\", { configurable: true, writable: true, value: __f13 });\nObject.defineProperty(__provider_proto, \"create\", { configurable: true, writable: true, value: __f14 });\nObject.defineProperty(__provider_proto, \"update\", { configurable: true, writable: true, value: __f15 });\nObject.defineProperty(__provider_proto, \"delete\", { configurable: true, writable: true, value: __f16 });\nObject.defineProperty(__provider_proto, \"diff\", { configurable: true, writable: true, value: __f17 });\nvar __provider = Object.create(__provider_proto);\n__provider.name = \"dev-drunk-ssh-password\";\n__provider._client = undefined;\n\nfunction __f1(__0) {\n  return (function() {\n    with({  }) {\n\nreturn function /*constructor*/(name) {\n        this.name = name;\n        this._client = undefined;\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f3() {\n  return (function() {\n    with({  }) {\n\nreturn function /*constructor*/() { };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f4() {\n  return (function() {\n    with({ native: require(\"@pulumi/azure-native/index.js\"), identity_1: require(\"@azure/identity/dist/index.js\") }) {\n\nreturn function /*getCredentials*/() {\n        if (this.credential)\n            return this.credential;\n        let clientID = native.config.clientId;\n        let clientSecret = native.config.clientSecret;\n        let tenantID = native.config.tenantId;\n        let subscriptionID = native.config.subscriptionId;\n        // If at least one of them is empty, try looking at the env vars.\n        if (!clientID || !clientSecret || !tenantID || !subscriptionID) {\n            //console.log('ClientCredential: getting auth info from ARM.');\n            clientID = process.env['ARM_CLIENT_ID'];\n            clientSecret = process.env['ARM_CLIENT_SECRET'];\n            tenantID = process.env['ARM_TENANT_ID'];\n            subscriptionID = process.env['ARM_SUBSCRIPTION_ID'];\n        }\n        if (tenantID \u0026\u0026 clientID \u0026\u0026 clientSecret) {\n            this.credential = new identity_1.ClientSecretCredential(tenantID, clientID, clientSecret);\n        }\n        return this.credential;\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f6(__0, __1, __2, __3) {\n  return (function() {\n    with({  }) {\n\nreturn function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f5(__0, __1) {\n  return (function() {\n    with({ __awaiter: __f6, msRestAzure: require(\"@azure/ms-rest-nodeauth/dist/lib/msRestNodeAuth.js\") }) {\n\nreturn function /*getToken*/(scopes, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const cre = this.getCredentials();\n            if (cre)\n                return cre.getToken(scopes, options);\n            const resource = Array.isArray(scopes) ? scopes[0] : scopes;\n            const token = yield msRestAzure.AzureCliCredentials.getAccessToken({\n                resource: resource.replace('/.default', ''),\n            });\n            return {\n                token: token.accessToken,\n                expiresOnTimestamp: 30,\n            };\n        });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f8() {\n  return (function() {\n    with({  }) {\n\nreturn function /*constructor*/() {\n        this.getCredentials();\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f9() {\n  return (function() {\n    with({ __awaiter: __f6, native: require(\"@pulumi/azure-native/index.js\"), msRestAzure: require(\"@azure/ms-rest-nodeauth/dist/lib/msRestNodeAuth.js\") }) {\n\nreturn function /*getCredentials*/() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.credentials)\n                return this.credentials;\n            let clientID = native.config.clientId;\n            let clientSecret = native.config.clientSecret;\n            this.tenantID = native.config.tenantId;\n            this.subscriptionID = native.config.subscriptionId;\n            // If at least one of them is empty, try looking at the env vars.\n            if (!clientID || !clientSecret || !this.tenantID || !this.subscriptionID) {\n                //console.log('ClientCredential: getting auth info from ARM.');\n                clientID = process.env['ARM_CLIENT_ID'];\n                clientSecret = process.env['ARM_CLIENT_SECRET'];\n                this.tenantID = process.env['ARM_TENANT_ID'];\n                this.subscriptionID = process.env['ARM_SUBSCRIPTION_ID'];\n            }\n            // If they are still empty, try to get the credentials from Az CLI.\n            if (!clientID || !clientSecret || !this.tenantID || !this.subscriptionID) {\n                //console.log('ClientCredential: getting auth info from Azure CLI.');\n                // `create()` will throw an error if the Az CLI is not installed or `az login` has never been run.\n                const cliCredentials = yield msRestAzure.AzureCliCredentials.create();\n                this.subscriptionID =\n                    cliCredentials.tokenInfo.subscription ||\n                        cliCredentials.subscriptionInfo.id;\n                this.tenantID = cliCredentials.tokenInfo.tenant;\n                this.credentials = cliCredentials;\n            }\n            else {\n                this.credentials = yield msRestAzure.loginWithServicePrincipalSecret(clientID, clientSecret, this.tenantID);\n            }\n            return this.credentials;\n        });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f10(__0) {\n  return (function() {\n    with({ __awaiter: __f6 }) {\n\nreturn function /*signRequest*/(webResource) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return (yield this.getCredentials()).signRequest(webResource);\n        });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f11() {\n  return (function() {\n    with({ __awaiter: __f6 }) {\n\nreturn function /*getToken*/() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const c = yield this.getCredentials();\n            return yield c.getToken();\n        });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f7() {\n  return (function() {\n    with({ m: __m, k: \"ClientCredential\" }) {\n\nreturn function () { return m[k]; };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f2(__0) {\n  return (function() {\n    with({ keyvault_secrets_1: require(\"@azure/keyvault-secrets/dist/index.js\"), Base_1: __Base_1 }) {\n\nreturn function /*getClient*/(vaultName) {\n        if (this._client)\n            return this._client;\n        const url = `https://${vaultName}.vault.azure.net?api-version=7.0`;\n        this._client = new keyvault_secrets_1.SecretClient(url, new Base_1.ClientCredential());\n        return this._client;\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f12(__0) {\n  return (function() {\n    with({ __awaiter: __f6 }) {\n\nreturn function /*tryGetDeletedSecret*/(props) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const client = this.getClient(props.vaultInfo.name);\n            return yield client.getDeletedSecret(props.name).catch(() =\u003e undefined);\n        });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f13(__0) {\n  return (function() {\n    with({ __awaiter: __f6 }) {\n\nreturn function /*tryRecoverSecret*/(props) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const client = this.getClient(props.vaultInfo.name);\n            const deleted = yield this.tryGetDeletedSecret(props);\n            //Recover deleted items\n            if (deleted)\n                yield (yield client.beginRecoverDeletedSecret(deleted.name)).pollUntilDone();\n        });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f14(__0) {\n  return (function() {\n    with({ __awaiter: __f6 }) {\n\nreturn function /*create*/(props) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.tryRecoverSecret(props);\n            const client = this.getClient(props.vaultInfo.name);\n            const ss = yield client.setSecret(props.name, props.value, {\n                enabled: true,\n                contentType: props.contentType,\n                tags: props.tags,\n            });\n            return { id: ss.properties.id || this.name, outs: props };\n        });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f15(__0, __1, __2) {\n  return (function() {\n    with({ __awaiter: __f6 }) {\n\nreturn function /*update*/(id, olds, news) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const rs = yield this.create(news);\n            //Delete the old Secret\n            if (olds.name !== news.name || olds.vaultInfo.name !== news.vaultInfo.name)\n                yield this.delete(id, olds).catch((e) =\u003e { var _a; return console.log(`Cannot delete ${this.name}`, (_a = e === null || e === void 0 ? void 0 : e.resource) === null || _a === void 0 ? void 0 : _a.data); });\n            return rs;\n        });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f16(__0, __1) {\n  return (function() {\n    with({ __awaiter: __f6 }) {\n\nreturn function /*delete*/(id, props) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const client = this.getClient(props.vaultInfo.name);\n                yield client.beginDeleteSecret(props.name);\n            }\n            catch (_a) {\n                //Ignore\n            }\n        });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f17(__0, __1, __2) {\n  return (function() {\n    with({ __awaiter: __f6 }) {\n\nreturn function /*diff*/(id, previousOutput, news) {\n        return __awaiter(this, void 0, void 0, function* () {\n            //check if secret is delete then commit changes to recover it.\n            const deleted = yield this.tryGetDeletedSecret(news);\n            return {\n                deleteBeforeReplace: false,\n                changes: deleted != undefined ||\n                    previousOutput.name !== news.name ||\n                    previousOutput.vaultInfo.name !== news.vaultInfo.name ||\n                    previousOutput.value !== news.value ||\n                    previousOutput.contentType !== news.contentType,\n            };\n        });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f0() {\n  return (function() {\n    with({ provider: __provider }) {\n\nreturn () =\u003e provider;\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n",
                    "contentType": "Random Ssh",
                    "name": "drunk-ssh-password",
                    "value": {
                        "4dabf18193072939515e22adb298388d": "1b47061264138c4ac30d75fd1eb44270",
                        "ciphertext": "AAABALZ+yokQHwmd8rREK7EmU5cSbJeKO9pV1548/KzVuJFOCxBpmd57nwGqobk+hqqVatk3f9UJPmvOAPeYsqVpxN5alaINDLmimVY+R0aHxlR8W9Hwq8k="
                    },
                    "vaultInfo": {
                        "group": {
                            "resourceGroupName": "global-grp-drunk"
                        },
                        "id": "/subscriptions/f146579d-929c-4f4b-a742-b4ad6ab9ef27/resourceGroups/global-grp-drunk/providers/Microsoft.KeyVault/vaults/global-drunk-vlt",
                        "name": "global-drunk-vlt"
                    }
                },
                "outputs": {
                    "__provider": "exports.handler = __f0;\n\nvar __provider_proto = {};\nObject.defineProperty(__f1, \"prototype\", { value: __provider_proto });\nObject.defineProperty(__provider_proto, \"constructor\", { configurable: true, writable: true, value: __f1 });\nvar __Base_1 = {};\nvar __f3_prototype = {};\nObject.defineProperty(__f3_prototype, \"constructor\", { configurable: true, writable: true, value: __f3 });\nObject.defineProperty(__f3_prototype, \"getCredentials\", { configurable: true, writable: true, value: __f4 });\nObject.defineProperty(__f3_prototype, \"getToken\", { configurable: true, writable: true, value: __f5 });\nObject.defineProperty(__f3, \"prototype\", { value: __f3_prototype });\nvar __m = {};\nObject.defineProperty(__m, \"__esModule\", { value: true });\n__m.ClientCredential = __f3;\nvar __f8_prototype = {};\nObject.defineProperty(__f8_prototype, \"constructor\", { configurable: true, writable: true, value: __f8 });\nObject.defineProperty(__f8_prototype, \"getCredentials\", { configurable: true, writable: true, value: __f9 });\nObject.defineProperty(__f8_prototype, \"signRequest\", { configurable: true, writable: true, value: __f10 });\nObject.defineProperty(__f8_prototype, \"getToken\", { configurable: true, writable: true, value: __f11 });\nObject.defineProperty(__f8, \"prototype\", { value: __f8_prototype });\n__m.InternalCredentials = __f8;\nObject.defineProperty(__Base_1, \"ClientCredential\", { enumerable: true, get: __f7 });\nObject.defineProperty(__provider_proto, \"getClient\", { configurable: true, writable: true, value: __f2 });\nObject.defineProperty(__provider_proto, \"tryGetDeletedSecret\", { configurable: true, writable: true, value: __f12 });\nObject.defineProperty(__provider_proto, \"tryRecoverSecret\", { configurable: true, writable: true, value: __f13 });\nObject.defineProperty(__provider_proto, \"create\", { configurable: true, writable: true, value: __f14 });\nObject.defineProperty(__provider_proto, \"update\", { configurable: true, writable: true, value: __f15 });\nObject.defineProperty(__provider_proto, \"delete\", { configurable: true, writable: true, value: __f16 });\nObject.defineProperty(__provider_proto, \"diff\", { configurable: true, writable: true, value: __f17 });\nvar __provider = Object.create(__provider_proto);\n__provider.name = \"dev-drunk-ssh-password\";\n__provider._client = undefined;\n\nfunction __f1(__0) {\n  return (function() {\n    with({  }) {\n\nreturn function /*constructor*/(name) {\n        this.name = name;\n        this._client = undefined;\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f3() {\n  return (function() {\n    with({  }) {\n\nreturn function /*constructor*/() { };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f4() {\n  return (function() {\n    with({ native: require(\"@pulumi/azure-native/index.js\"), identity_1: require(\"@azure/identity/dist/index.js\") }) {\n\nreturn function /*getCredentials*/() {\n        if (this.credential)\n            return this.credential;\n        let clientID = native.config.clientId;\n        let clientSecret = native.config.clientSecret;\n        let tenantID = native.config.tenantId;\n        let subscriptionID = native.config.subscriptionId;\n        // If at least one of them is empty, try looking at the env vars.\n        if (!clientID || !clientSecret || !tenantID || !subscriptionID) {\n            //console.log('ClientCredential: getting auth info from ARM.');\n            clientID = process.env['ARM_CLIENT_ID'];\n            clientSecret = process.env['ARM_CLIENT_SECRET'];\n            tenantID = process.env['ARM_TENANT_ID'];\n            subscriptionID = process.env['ARM_SUBSCRIPTION_ID'];\n        }\n        if (tenantID \u0026\u0026 clientID \u0026\u0026 clientSecret) {\n            this.credential = new identity_1.ClientSecretCredential(tenantID, clientID, clientSecret);\n        }\n        return this.credential;\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f6(__0, __1, __2, __3) {\n  return (function() {\n    with({  }) {\n\nreturn function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f5(__0, __1) {\n  return (function() {\n    with({ __awaiter: __f6, msRestAzure: require(\"@azure/ms-rest-nodeauth/dist/lib/msRestNodeAuth.js\") }) {\n\nreturn function /*getToken*/(scopes, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const cre = this.getCredentials();\n            if (cre)\n                return cre.getToken(scopes, options);\n            const resource = Array.isArray(scopes) ? scopes[0] : scopes;\n            const token = yield msRestAzure.AzureCliCredentials.getAccessToken({\n                resource: resource.replace('/.default', ''),\n            });\n            return {\n                token: token.accessToken,\n                expiresOnTimestamp: 30,\n            };\n        });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f8() {\n  return (function() {\n    with({  }) {\n\nreturn function /*constructor*/() {\n        this.getCredentials();\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f9() {\n  return (function() {\n    with({ __awaiter: __f6, native: require(\"@pulumi/azure-native/index.js\"), msRestAzure: require(\"@azure/ms-rest-nodeauth/dist/lib/msRestNodeAuth.js\") }) {\n\nreturn function /*getCredentials*/() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.credentials)\n                return this.credentials;\n            let clientID = native.config.clientId;\n            let clientSecret = native.config.clientSecret;\n            this.tenantID = native.config.tenantId;\n            this.subscriptionID = native.config.subscriptionId;\n            // If at least one of them is empty, try looking at the env vars.\n            if (!clientID || !clientSecret || !this.tenantID || !this.subscriptionID) {\n                //console.log('ClientCredential: getting auth info from ARM.');\n                clientID = process.env['ARM_CLIENT_ID'];\n                clientSecret = process.env['ARM_CLIENT_SECRET'];\n                this.tenantID = process.env['ARM_TENANT_ID'];\n                this.subscriptionID = process.env['ARM_SUBSCRIPTION_ID'];\n            }\n            // If they are still empty, try to get the credentials from Az CLI.\n            if (!clientID || !clientSecret || !this.tenantID || !this.subscriptionID) {\n                //console.log('ClientCredential: getting auth info from Azure CLI.');\n                // `create()` will throw an error if the Az CLI is not installed or `az login` has never been run.\n                const cliCredentials = yield msRestAzure.AzureCliCredentials.create();\n                this.subscriptionID =\n                    cliCredentials.tokenInfo.subscription ||\n                        cliCredentials.subscriptionInfo.id;\n                this.tenantID = cliCredentials.tokenInfo.tenant;\n                this.credentials = cliCredentials;\n            }\n            else {\n                this.credentials = yield msRestAzure.loginWithServicePrincipalSecret(clientID, clientSecret, this.tenantID);\n            }\n            return this.credentials;\n        });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f10(__0) {\n  return (function() {\n    with({ __awaiter: __f6 }) {\n\nreturn function /*signRequest*/(webResource) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return (yield this.getCredentials()).signRequest(webResource);\n        });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f11() {\n  return (function() {\n    with({ __awaiter: __f6 }) {\n\nreturn function /*getToken*/() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const c = yield this.getCredentials();\n            return yield c.getToken();\n        });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f7() {\n  return (function() {\n    with({ m: __m, k: \"ClientCredential\" }) {\n\nreturn function () { return m[k]; };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f2(__0) {\n  return (function() {\n    with({ keyvault_secrets_1: require(\"@azure/keyvault-secrets/dist/index.js\"), Base_1: __Base_1 }) {\n\nreturn function /*getClient*/(vaultName) {\n        if (this._client)\n            return this._client;\n        const url = `https://${vaultName}.vault.azure.net?api-version=7.0`;\n        this._client = new keyvault_secrets_1.SecretClient(url, new Base_1.ClientCredential());\n        return this._client;\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f12(__0) {\n  return (function() {\n    with({ __awaiter: __f6 }) {\n\nreturn function /*tryGetDeletedSecret*/(props) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const client = this.getClient(props.vaultInfo.name);\n            return yield client.getDeletedSecret(props.name).catch(() =\u003e undefined);\n        });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f13(__0) {\n  return (function() {\n    with({ __awaiter: __f6 }) {\n\nreturn function /*tryRecoverSecret*/(props) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const client = this.getClient(props.vaultInfo.name);\n            const deleted = yield this.tryGetDeletedSecret(props);\n            //Recover deleted items\n            if (deleted)\n                yield (yield client.beginRecoverDeletedSecret(deleted.name)).pollUntilDone();\n        });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f14(__0) {\n  return (function() {\n    with({ __awaiter: __f6 }) {\n\nreturn function /*create*/(props) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.tryRecoverSecret(props);\n            const client = this.getClient(props.vaultInfo.name);\n            const ss = yield client.setSecret(props.name, props.value, {\n                enabled: true,\n                contentType: props.contentType,\n                tags: props.tags,\n            });\n            return { id: ss.properties.id || this.name, outs: props };\n        });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f15(__0, __1, __2) {\n  return (function() {\n    with({ __awaiter: __f6 }) {\n\nreturn function /*update*/(id, olds, news) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const rs = yield this.create(news);\n            //Delete the old Secret\n            if (olds.name !== news.name || olds.vaultInfo.name !== news.vaultInfo.name)\n                yield this.delete(id, olds).catch((e) =\u003e { var _a; return console.log(`Cannot delete ${this.name}`, (_a = e === null || e === void 0 ? void 0 : e.resource) === null || _a === void 0 ? void 0 : _a.data); });\n            return rs;\n        });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f16(__0, __1) {\n  return (function() {\n    with({ __awaiter: __f6 }) {\n\nreturn function /*delete*/(id, props) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const client = this.getClient(props.vaultInfo.name);\n                yield client.beginDeleteSecret(props.name);\n            }\n            catch (_a) {\n                //Ignore\n            }\n        });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f17(__0, __1, __2) {\n  return (function() {\n    with({ __awaiter: __f6 }) {\n\nreturn function /*diff*/(id, previousOutput, news) {\n        return __awaiter(this, void 0, void 0, function* () {\n            //check if secret is delete then commit changes to recover it.\n            const deleted = yield this.tryGetDeletedSecret(news);\n            return {\n                deleteBeforeReplace: false,\n                changes: deleted != undefined ||\n                    previousOutput.name !== news.name ||\n                    previousOutput.vaultInfo.name !== news.vaultInfo.name ||\n                    previousOutput.value !== news.value ||\n                    previousOutput.contentType !== news.contentType,\n            };\n        });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f0() {\n  return (function() {\n    with({ provider: __provider }) {\n\nreturn () =\u003e provider;\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n",
                    "contentType": "Random Ssh",
                    "name": "drunk-ssh-password",
                    "value": {
                        "4dabf18193072939515e22adb298388d": "1b47061264138c4ac30d75fd1eb44270",
                        "ciphertext": "AAABAC3eRBhYO3fJq8Nucpl2+f2J0hnFamhucBzKAN5kYIldKVvyJ7tyb+VNZxzHxZ7L7DjyVMX1H1tBbdXDxMGaZfasCkBYGTNrYS6GPqChzuafPS0Et0U="
                    },
                    "vaultInfo": {
                        "group": {
                            "resourceGroupName": "global-grp-drunk"
                        },
                        "id": "/subscriptions/f146579d-929c-4f4b-a742-b4ad6ab9ef27/resourceGroups/global-grp-drunk/providers/Microsoft.KeyVault/vaults/global-drunk-vlt",
                        "name": "global-drunk-vlt"
                    }
                },
                "parent": "urn:pulumi:dev::azure-drunk-aks::pulumi:pulumi:Stack::azure-drunk-aks-dev",
                "dependencies": [
                    "urn:pulumi:dev::azure-drunk-aks::pulumi-nodejs:dynamic:Resource::csp:SshKeys:dev-drunk-ssh",
                    "urn:pulumi:dev::azure-drunk-aks::random:index/randomPassword:RandomPassword::dev-drunk-ssh-pwd"
                ],
                "provider": "urn:pulumi:dev::azure-drunk-aks::pulumi:providers:pulumi-nodejs::default::16112b54-df04-4a88-8f97-ab00111abe86",
                "propertyDependencies": {
                    "__provider": null,
                    "contentType": null,
                    "name": null,
                    "value": [
                        "urn:pulumi:dev::azure-drunk-aks::random:index/randomPassword:RandomPassword::dev-drunk-ssh-pwd"
                    ],
                    "vaultInfo": null
                }
            },
            {
                "urn": "urn:pulumi:dev::azure-drunk-aks::pulumi:providers:azuread::default_5_17_0",
                "custom": true,
                "id": "15a9860d-4a84-4945-8c53-185b73278ccf",
                "type": "pulumi:providers:azuread",
                "inputs": {
                    "version": "5.17.0"
                },
                "outputs": {
                    "version": "5.17.0"
                },
                "sequenceNumber": 1
            },
            {
                "urn": "urn:pulumi:dev::azure-drunk-aks::azuread:index/group:Group::ROL NON-PRD GLB DRUNK AKS-ADMIN",
                "custom": true,
                "id": "1f53b23e-6b23-47dc-b197-6efacf8f222c",
                "type": "azuread:index/group:Group",
                "inputs": {
                    "__defaults": [
                        "preventDuplicateNames"
                    ],
                    "displayName": "ROL NON-PRD GLB DRUNK AKS-ADMIN",
                    "externalSendersAllowed": false,
                    "mailEnabled": false,
                    "preventDuplicateNames": false,
                    "securityEnabled": true
                },
                "outputs": {
                    "assignableToRole": false,
                    "autoSubscribeNewMembers": false,
                    "behaviors": [],
                    "description": "",
                    "displayName": "ROL NON-PRD GLB DRUNK AKS-ADMIN",
                    "dynamicMembership": null,
                    "externalSendersAllowed": false,
                    "hideFromAddressLists": false,
                    "hideFromOutlookClients": false,
                    "id": "1f53b23e-6b23-47dc-b197-6efacf8f222c",
                    "mail": "",
                    "mailEnabled": false,
                    "mailNickname": "dda0e4fa-e6f9-c926-1cf2-1803d27425c9",
                    "members": [
                        "2f65f90a-991c-4f8f-95b3-86e8352240fd",
                        "45bafaaa-0e1f-4350-8e8a-9ae2cc3ebc9a",
                        "188d4296-025a-4042-88f1-c530057efc2d"
                    ],
                    "objectId": "1f53b23e-6b23-47dc-b197-6efacf8f222c",
                    "onpremisesDomainName": "",
                    "onpremisesNetbiosName": "",
                    "onpremisesSamAccountName": "",
                    "onpremisesSecurityIdentifier": "",
                    "onpremisesSyncEnabled": false,
                    "owners": [],
                    "preferredLanguage": "",
                    "preventDuplicateNames": false,
                    "provisioningOptions": [],
                    "proxyAddresses": [],
                    "securityEnabled": true,
                    "theme": "",
                    "types": [],
                    "visibility": ""
                },
                "parent": "urn:pulumi:dev::azure-drunk-aks::pulumi:pulumi:Stack::azure-drunk-aks-dev",
                "provider": "urn:pulumi:dev::azure-drunk-aks::pulumi:providers:azuread::default_5_17_0::15a9860d-4a84-4945-8c53-185b73278ccf",
                "propertyDependencies": {
                    "displayName": null,
                    "externalSendersAllowed": null,
                    "mailEnabled": null,
                    "securityEnabled": null
                }
            },
            {
                "urn": "urn:pulumi:dev::azure-drunk-aks::azuread:index/application:Application::dev-drunk-aks",
                "custom": true,
                "id": "ff9d7d48-ceb9-4d8e-a8e1-943ad1a7f37e",
                "type": "azuread:index/application:Application",
                "inputs": {
                    "__defaults": [
                        "preventDuplicateNames"
                    ],
                    "api": {
                        "__defaults": [
                            "requestedAccessTokenVersion"
                        ],
                        "requestedAccessTokenVersion": 1
                    },
                    "displayName": "dev-drunk-aks",
                    "groupMembershipClaims": [
                        "SecurityGroup"
                    ],
                    "identifierUris": [
                        "api://dev-drunk-aks"
                    ],
                    "preventDuplicateNames": false,
                    "requiredResourceAccesses": [
                        {
                            "__defaults": [],
                            "resourceAccesses": [
                                {
                                    "__defaults": [],
                                    "id": "e1fe6dd8-ba31-4d61-89e7-88639da4683d",
                                    "type": "Scope"
                                },
                                {
                                    "__defaults": [],
                                    "id": "5f8c59db-677d-491f-a6b8-5f174b11ec1d",
                                    "type": "Scope"
                                },
                                {
                                    "__defaults": [],
                                    "id": "7ab1d382-f21e-4acd-a863-ba3e13f7da61",
                                    "type": "Role"
                                }
                            ],
                            "resourceAppId": "00000003-0000-0000-c000-000000000000"
                        }
                    ],
                    "signInAudience": "AzureADMyOrg"
                },
                "outputs": {
                    "__meta": "{\"schema_version\":\"1\"}",
                    "api": {
                        "knownClientApplications": [],
                        "mappedClaimsEnabled": false,
                        "oauth2PermissionScopes": [],
                        "requestedAccessTokenVersion": 1
                    },
                    "appRoleIds": {},
                    "appRoles": [],
                    "applicationId": "d1ea279e-241d-4e73-ab22-222dc3489018",
                    "deviceOnlyAuthEnabled": false,
                    "disabledByMicrosoft": "\u003cnil\u003e",
                    "displayName": "dev-drunk-aks",
                    "fallbackPublicClientEnabled": false,
                    "featureTags": [
                        {
                            "customSingleSignOn": false,
                            "enterprise": false,
                            "gallery": false,
                            "hide": false
                        }
                    ],
                    "groupMembershipClaims": [
                        "SecurityGroup"
                    ],
                    "id": "ff9d7d48-ceb9-4d8e-a8e1-943ad1a7f37e",
                    "identifierUris": [
                        "api://dev-drunk-aks"
                    ],
                    "logoImage": "",
                    "logoUrl": "",
                    "marketingUrl": "",
                    "oauth2PermissionScopeIds": {},
                    "oauth2PostResponseRequired": false,
                    "objectId": "ff9d7d48-ceb9-4d8e-a8e1-943ad1a7f37e",
                    "optionalClaims": {
                        "accessTokens": [],
                        "idTokens": [],
                        "saml2Tokens": []
                    },
                    "owners": [],
                    "preventDuplicateNames": false,
                    "privacyStatementUrl": "",
                    "publicClient": {
                        "redirectUris": []
                    },
                    "publisherDomain": "drunkcoding.net",
                    "requiredResourceAccesses": [
                        {
                            "resourceAccesses": [
                                {
                                    "id": "e1fe6dd8-ba31-4d61-89e7-88639da4683d",
                                    "type": "Scope"
                                },
                                {
                                    "id": "5f8c59db-677d-491f-a6b8-5f174b11ec1d",
                                    "type": "Scope"
                                },
                                {
                                    "id": "7ab1d382-f21e-4acd-a863-ba3e13f7da61",
                                    "type": "Role"
                                }
                            ],
                            "resourceAppId": "00000003-0000-0000-c000-000000000000"
                        }
                    ],
                    "signInAudience": "AzureADMyOrg",
                    "singlePageApplication": {
                        "redirectUris": []
                    },
                    "supportUrl": "",
                    "tags": [],
                    "templateId": "",
                    "termsOfServiceUrl": "",
                    "web": {
                        "homepageUrl": "",
                        "implicitGrant": {
                            "accessTokenIssuanceEnabled": false,
                            "idTokenIssuanceEnabled": false
                        },
                        "logoutUrl": "",
                        "redirectUris": []
                    }
                },
                "parent": "urn:pulumi:dev::azure-drunk-aks::pulumi:pulumi:Stack::azure-drunk-aks-dev",
                "provider": "urn:pulumi:dev::azure-drunk-aks::pulumi:providers:azuread::default_5_17_0::15a9860d-4a84-4945-8c53-185b73278ccf",
                "propertyDependencies": {
                    "api": null,
                    "displayName": null,
                    "groupMembershipClaims": null,
                    "identifierUris": null,
                    "requiredResourceAccesses": null,
                    "signInAudience": null
                }
            },
            {
                "urn": "urn:pulumi:dev::azure-drunk-aks::azuread:index/groupMember:GroupMember::ROL NON-PRD GLB DRUNK AKS-ADMIN-member-1",
                "custom": true,
                "id": "1f53b23e-6b23-47dc-b197-6efacf8f222c/member/188d4296-025a-4042-88f1-c530057efc2d",
                "type": "azuread:index/groupMember:GroupMember",
                "inputs": {
                    "__defaults": [],
                    "groupObjectId": "1f53b23e-6b23-47dc-b197-6efacf8f222c",
                    "memberObjectId": "188d4296-025a-4042-88f1-c530057efc2d"
                },
                "outputs": {
                    "groupObjectId": "1f53b23e-6b23-47dc-b197-6efacf8f222c",
                    "id": "1f53b23e-6b23-47dc-b197-6efacf8f222c/member/188d4296-025a-4042-88f1-c530057efc2d",
                    "memberObjectId": "188d4296-025a-4042-88f1-c530057efc2d"
                },
                "parent": "urn:pulumi:dev::azure-drunk-aks::pulumi:pulumi:Stack::azure-drunk-aks-dev",
                "dependencies": [
                    "urn:pulumi:dev::azure-drunk-aks::azuread:index/group:Group::ROL NON-PRD GLB DRUNK AKS-ADMIN"
                ],
                "provider": "urn:pulumi:dev::azure-drunk-aks::pulumi:providers:azuread::default_5_17_0::15a9860d-4a84-4945-8c53-185b73278ccf",
                "propertyDependencies": {
                    "groupObjectId": [
                        "urn:pulumi:dev::azure-drunk-aks::azuread:index/group:Group::ROL NON-PRD GLB DRUNK AKS-ADMIN"
                    ],
                    "memberObjectId": null
                }
            },
            {
                "urn": "urn:pulumi:dev::azure-drunk-aks::azuread:index/groupMember:GroupMember::ROL NON-PRD GLB DRUNK AKS-ADMIN-member-0",
                "custom": true,
                "id": "1f53b23e-6b23-47dc-b197-6efacf8f222c/member/2f65f90a-991c-4f8f-95b3-86e8352240fd",
                "type": "azuread:index/groupMember:GroupMember",
                "inputs": {
                    "__defaults": [],
                    "groupObjectId": "1f53b23e-6b23-47dc-b197-6efacf8f222c",
                    "memberObjectId": "2f65f90a-991c-4f8f-95b3-86e8352240fd"
                },
                "outputs": {
                    "groupObjectId": "1f53b23e-6b23-47dc-b197-6efacf8f222c",
                    "id": "1f53b23e-6b23-47dc-b197-6efacf8f222c/member/2f65f90a-991c-4f8f-95b3-86e8352240fd",
                    "memberObjectId": "2f65f90a-991c-4f8f-95b3-86e8352240fd"
                },
                "parent": "urn:pulumi:dev::azure-drunk-aks::pulumi:pulumi:Stack::azure-drunk-aks-dev",
                "dependencies": [
                    "urn:pulumi:dev::azure-drunk-aks::azuread:index/group:Group::ROL NON-PRD GLB DRUNK AKS-ADMIN"
                ],
                "provider": "urn:pulumi:dev::azure-drunk-aks::pulumi:providers:azuread::default_5_17_0::15a9860d-4a84-4945-8c53-185b73278ccf",
                "propertyDependencies": {
                    "groupObjectId": [
                        "urn:pulumi:dev::azure-drunk-aks::azuread:index/group:Group::ROL NON-PRD GLB DRUNK AKS-ADMIN"
                    ],
                    "memberObjectId": null
                }
            },
            {
                "urn": "urn:pulumi:dev::azure-drunk-aks::azuread:index/applicationPassword:ApplicationPassword::dev-drunk-aks",
                "custom": true,
                "id": "ff9d7d48-ceb9-4d8e-a8e1-943ad1a7f37e/password/c71fed8a-ac36-f68f-fe19-aa0e17e07288",
                "type": "azuread:index/applicationPassword:ApplicationPassword",
                "inputs": {
                    "__defaults": [],
                    "applicationObjectId": "ff9d7d48-ceb9-4d8e-a8e1-943ad1a7f37e",
                    "displayName": "dev-drunk-aks",
                    "endDateRelative": "43800h"
                },
                "outputs": {
                    "__meta": "{\"schema_version\":\"1\"}",
                    "applicationObjectId": "ff9d7d48-ceb9-4d8e-a8e1-943ad1a7f37e",
                    "description": "dev-drunk-aks",
                    "displayName": "dev-drunk-aks",
                    "endDate": "2027-01-18T03:46:28Z",
                    "endDateRelative": "43800h",
                    "id": "ff9d7d48-ceb9-4d8e-a8e1-943ad1a7f37e/password/c71fed8a-ac36-f68f-fe19-aa0e17e07288",
                    "keyId": "c71fed8a-ac36-f68f-fe19-aa0e17e07288",
                    "startDate": "2022-01-19T03:46:40Z",
                    "value": {
                        "4dabf18193072939515e22adb298388d": "1b47061264138c4ac30d75fd1eb44270",
                        "ciphertext": "AAABAD5vtbH+U9jdobxkRHJAnlevNawN6Sr+sXIGhzvK0pLPB3LrQLWbUNFqVVaACRPnoWm/CHadsQIiwaDKpUGrytSEw6nCDGmORG3mdciGZnc7XusUzmhI6Mx6tGXKArr2mCAIt5s="
                    }
                },
                "parent": "urn:pulumi:dev::azure-drunk-aks::pulumi:pulumi:Stack::azure-drunk-aks-dev",
                "dependencies": [
                    "urn:pulumi:dev::azure-drunk-aks::azuread:index/application:Application::dev-drunk-aks"
                ],
                "provider": "urn:pulumi:dev::azure-drunk-aks::pulumi:providers:azuread::default_5_17_0::15a9860d-4a84-4945-8c53-185b73278ccf",
                "propertyDependencies": {
                    "applicationObjectId": [
                        "urn:pulumi:dev::azure-drunk-aks::azuread:index/application:Application::dev-drunk-aks"
                    ],
                    "displayName": null,
                    "endDateRelative": null
                }
            },
            {
                "urn": "urn:pulumi:dev::azure-drunk-aks::azuread:index/servicePrincipal:ServicePrincipal::dev-drunk-aks",
                "custom": true,
                "id": "4890c558-da30-4536-9fbd-548595e58726",
                "type": "azuread:index/servicePrincipal:ServicePrincipal",
                "inputs": {
                    "__defaults": [
                        "accountEnabled"
                    ],
                    "accountEnabled": true,
                    "applicationId": "d1ea279e-241d-4e73-ab22-222dc3489018"
                },
                "outputs": {
                    "appRoleAssignmentRequired": false,
                    "appRoles": [],
                    "applicationId": "d1ea279e-241d-4e73-ab22-222dc3489018",
                    "displayName": "dev-drunk-aks",
                    "id": "4890c558-da30-4536-9fbd-548595e58726",
                    "oauth2PermissionScopes": [],
                    "oauth2Permissions": [],
                    "objectId": "4890c558-da30-4536-9fbd-548595e58726",
                    "tags": []
                },
                "parent": "urn:pulumi:dev::azure-drunk-aks::pulumi:pulumi:Stack::azure-drunk-aks-dev",
                "dependencies": [
                    "urn:pulumi:dev::azure-drunk-aks::azuread:index/application:Application::dev-drunk-aks"
                ],
                "provider": "urn:pulumi:dev::azure-drunk-aks::pulumi:providers:azuread::default_5_17_0::15a9860d-4a84-4945-8c53-185b73278ccf",
                "propertyDependencies": {
                    "applicationId": [
                        "urn:pulumi:dev::azure-drunk-aks::azuread:index/application:Application::dev-drunk-aks"
                    ]
                }
            },
            {
                "urn": "urn:pulumi:dev::azure-drunk-aks::pulumi-nodejs:dynamic:Resource::csp:VaultSecrets:dev-drunk-aks-client-id",
                "custom": true,
                "id": "https://global-drunk-vlt.vault.azure.net/secrets/drunk-aks-client-id/899a72083f334c5ab860b3ae9803d2d0",
                "type": "pulumi-nodejs:dynamic:Resource",
                "inputs": {
                    "__provider": "exports.handler = __f0;\n\nvar __provider_proto = {};\nObject.defineProperty(__f1, \"prototype\", { value: __provider_proto });\nObject.defineProperty(__provider_proto, \"constructor\", { configurable: true, writable: true, value: __f1 });\nvar __Base_1 = {};\nvar __f3_prototype = {};\nObject.defineProperty(__f3_prototype, \"constructor\", { configurable: true, writable: true, value: __f3 });\nObject.defineProperty(__f3_prototype, \"getCredentials\", { configurable: true, writable: true, value: __f4 });\nObject.defineProperty(__f3_prototype, \"getToken\", { configurable: true, writable: true, value: __f5 });\nObject.defineProperty(__f3, \"prototype\", { value: __f3_prototype });\nvar __m = {};\nObject.defineProperty(__m, \"__esModule\", { value: true });\n__m.ClientCredential = __f3;\nvar __f8_prototype = {};\nObject.defineProperty(__f8_prototype, \"constructor\", { configurable: true, writable: true, value: __f8 });\nObject.defineProperty(__f8_prototype, \"getCredentials\", { configurable: true, writable: true, value: __f9 });\nObject.defineProperty(__f8_prototype, \"signRequest\", { configurable: true, writable: true, value: __f10 });\nObject.defineProperty(__f8_prototype, \"getToken\", { configurable: true, writable: true, value: __f11 });\nObject.defineProperty(__f8, \"prototype\", { value: __f8_prototype });\n__m.InternalCredentials = __f8;\nObject.defineProperty(__Base_1, \"ClientCredential\", { enumerable: true, get: __f7 });\nObject.defineProperty(__provider_proto, \"getClient\", { configurable: true, writable: true, value: __f2 });\nObject.defineProperty(__provider_proto, \"tryGetDeletedSecret\", { configurable: true, writable: true, value: __f12 });\nObject.defineProperty(__provider_proto, \"tryRecoverSecret\", { configurable: true, writable: true, value: __f13 });\nObject.defineProperty(__provider_proto, \"create\", { configurable: true, writable: true, value: __f14 });\nObject.defineProperty(__provider_proto, \"update\", { configurable: true, writable: true, value: __f15 });\nObject.defineProperty(__provider_proto, \"delete\", { configurable: true, writable: true, value: __f16 });\nObject.defineProperty(__provider_proto, \"diff\", { configurable: true, writable: true, value: __f17 });\nvar __provider = Object.create(__provider_proto);\n__provider.name = \"dev-drunk-aks-client-id\";\n__provider._client = undefined;\n\nfunction __f1(__0) {\n  return (function() {\n    with({  }) {\n\nreturn function /*constructor*/(name) {\n        this.name = name;\n        this._client = undefined;\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f3() {\n  return (function() {\n    with({  }) {\n\nreturn function /*constructor*/() { };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f4() {\n  return (function() {\n    with({ native: require(\"@pulumi/azure-native/index.js\"), identity_1: require(\"@azure/identity/dist/index.js\") }) {\n\nreturn function /*getCredentials*/() {\n        if (this.credential)\n            return this.credential;\n        let clientID = native.config.clientId;\n        let clientSecret = native.config.clientSecret;\n        let tenantID = native.config.tenantId;\n        let subscriptionID = native.config.subscriptionId;\n        // If at least one of them is empty, try looking at the env vars.\n        if (!clientID || !clientSecret || !tenantID || !subscriptionID) {\n            //console.log('ClientCredential: getting auth info from ARM.');\n            clientID = process.env['ARM_CLIENT_ID'];\n            clientSecret = process.env['ARM_CLIENT_SECRET'];\n            tenantID = process.env['ARM_TENANT_ID'];\n            subscriptionID = process.env['ARM_SUBSCRIPTION_ID'];\n        }\n        if (tenantID \u0026\u0026 clientID \u0026\u0026 clientSecret) {\n            this.credential = new identity_1.ClientSecretCredential(tenantID, clientID, clientSecret);\n        }\n        return this.credential;\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f6(__0, __1, __2, __3) {\n  return (function() {\n    with({  }) {\n\nreturn function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f5(__0, __1) {\n  return (function() {\n    with({ __awaiter: __f6, msRestAzure: require(\"@azure/ms-rest-nodeauth/dist/lib/msRestNodeAuth.js\") }) {\n\nreturn function /*getToken*/(scopes, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const cre = this.getCredentials();\n            if (cre)\n                return cre.getToken(scopes, options);\n            const resource = Array.isArray(scopes) ? scopes[0] : scopes;\n            const token = yield msRestAzure.AzureCliCredentials.getAccessToken({\n                resource: resource.replace('/.default', ''),\n            });\n            return {\n                token: token.accessToken,\n                expiresOnTimestamp: 30,\n            };\n        });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f8() {\n  return (function() {\n    with({  }) {\n\nreturn function /*constructor*/() {\n        this.getCredentials();\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f9() {\n  return (function() {\n    with({ __awaiter: __f6, native: require(\"@pulumi/azure-native/index.js\"), msRestAzure: require(\"@azure/ms-rest-nodeauth/dist/lib/msRestNodeAuth.js\") }) {\n\nreturn function /*getCredentials*/() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.credentials)\n                return this.credentials;\n            let clientID = native.config.clientId;\n            let clientSecret = native.config.clientSecret;\n            this.tenantID = native.config.tenantId;\n            this.subscriptionID = native.config.subscriptionId;\n            // If at least one of them is empty, try looking at the env vars.\n            if (!clientID || !clientSecret || !this.tenantID || !this.subscriptionID) {\n                //console.log('ClientCredential: getting auth info from ARM.');\n                clientID = process.env['ARM_CLIENT_ID'];\n                clientSecret = process.env['ARM_CLIENT_SECRET'];\n                this.tenantID = process.env['ARM_TENANT_ID'];\n                this.subscriptionID = process.env['ARM_SUBSCRIPTION_ID'];\n            }\n            // If they are still empty, try to get the credentials from Az CLI.\n            if (!clientID || !clientSecret || !this.tenantID || !this.subscriptionID) {\n                //console.log('ClientCredential: getting auth info from Azure CLI.');\n                // `create()` will throw an error if the Az CLI is not installed or `az login` has never been run.\n                const cliCredentials = yield msRestAzure.AzureCliCredentials.create();\n                this.subscriptionID =\n                    cliCredentials.tokenInfo.subscription ||\n                        cliCredentials.subscriptionInfo.id;\n                this.tenantID = cliCredentials.tokenInfo.tenant;\n                this.credentials = cliCredentials;\n            }\n            else {\n                this.credentials = yield msRestAzure.loginWithServicePrincipalSecret(clientID, clientSecret, this.tenantID);\n            }\n            return this.credentials;\n        });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f10(__0) {\n  return (function() {\n    with({ __awaiter: __f6 }) {\n\nreturn function /*signRequest*/(webResource) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return (yield this.getCredentials()).signRequest(webResource);\n        });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f11() {\n  return (function() {\n    with({ __awaiter: __f6 }) {\n\nreturn function /*getToken*/() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const c = yield this.getCredentials();\n            return yield c.getToken();\n        });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f7() {\n  return (function() {\n    with({ m: __m, k: \"ClientCredential\" }) {\n\nreturn function () { return m[k]; };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f2(__0) {\n  return (function() {\n    with({ keyvault_secrets_1: require(\"@azure/keyvault-secrets/dist/index.js\"), Base_1: __Base_1 }) {\n\nreturn function /*getClient*/(vaultName) {\n        if (this._client)\n            return this._client;\n        const url = `https://${vaultName}.vault.azure.net?api-version=7.0`;\n        this._client = new keyvault_secrets_1.SecretClient(url, new Base_1.ClientCredential());\n        return this._client;\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f12(__0) {\n  return (function() {\n    with({ __awaiter: __f6 }) {\n\nreturn function /*tryGetDeletedSecret*/(props) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const client = this.getClient(props.vaultInfo.name);\n            return yield client.getDeletedSecret(props.name).catch(() =\u003e undefined);\n        });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f13(__0) {\n  return (function() {\n    with({ __awaiter: __f6 }) {\n\nreturn function /*tryRecoverSecret*/(props) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const client = this.getClient(props.vaultInfo.name);\n            const deleted = yield this.tryGetDeletedSecret(props);\n            //Recover deleted items\n            if (deleted)\n                yield (yield client.beginRecoverDeletedSecret(deleted.name)).pollUntilDone();\n        });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f14(__0) {\n  return (function() {\n    with({ __awaiter: __f6 }) {\n\nreturn function /*create*/(props) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.tryRecoverSecret(props);\n            const client = this.getClient(props.vaultInfo.name);\n            const ss = yield client.setSecret(props.name, props.value, {\n                enabled: true,\n                contentType: props.contentType,\n                tags: props.tags,\n            });\n            return { id: ss.properties.id || this.name, outs: props };\n        });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f15(__0, __1, __2) {\n  return (function() {\n    with({ __awaiter: __f6 }) {\n\nreturn function /*update*/(id, olds, news) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const rs = yield this.create(news);\n            //Delete the old Secret\n            if (olds.name !== news.name || olds.vaultInfo.name !== news.vaultInfo.name)\n                yield this.delete(id, olds).catch((e) =\u003e { var _a; return console.log(`Cannot delete ${this.name}`, (_a = e === null || e === void 0 ? void 0 : e.resource) === null || _a === void 0 ? void 0 : _a.data); });\n            return rs;\n        });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f16(__0, __1) {\n  return (function() {\n    with({ __awaiter: __f6 }) {\n\nreturn function /*delete*/(id, props) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const client = this.getClient(props.vaultInfo.name);\n                yield client.beginDeleteSecret(props.name);\n            }\n            catch (_a) {\n                //Ignore\n            }\n        });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f17(__0, __1, __2) {\n  return (function() {\n    with({ __awaiter: __f6 }) {\n\nreturn function /*diff*/(id, previousOutput, news) {\n        return __awaiter(this, void 0, void 0, function* () {\n            //check if secret is delete then commit changes to recover it.\n            const deleted = yield this.tryGetDeletedSecret(news);\n            return {\n                deleteBeforeReplace: false,\n                changes: deleted != undefined ||\n                    previousOutput.name !== news.name ||\n                    previousOutput.vaultInfo.name !== news.vaultInfo.name ||\n                    previousOutput.value !== news.value ||\n                    previousOutput.contentType !== news.contentType,\n            };\n        });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f0() {\n  return (function() {\n    with({ provider: __provider }) {\n\nreturn () =\u003e provider;\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n",
                    "contentType": "Identity",
                    "name": "drunk-aks-client-id",
                    "value": "d1ea279e-241d-4e73-ab22-222dc3489018",
                    "vaultInfo": {
                        "group": {
                            "resourceGroupName": "global-grp-drunk"
                        },
                        "id": "/subscriptions/f146579d-929c-4f4b-a742-b4ad6ab9ef27/resourceGroups/global-grp-drunk/providers/Microsoft.KeyVault/vaults/global-drunk-vlt",
                        "name": "global-drunk-vlt"
                    }
                },
                "outputs": {
                    "__provider": "exports.handler = __f0;\n\nvar __provider_proto = {};\nObject.defineProperty(__f1, \"prototype\", { value: __provider_proto });\nObject.defineProperty(__provider_proto, \"constructor\", { configurable: true, writable: true, value: __f1 });\nvar __Base_1 = {};\nvar __f3_prototype = {};\nObject.defineProperty(__f3_prototype, \"constructor\", { configurable: true, writable: true, value: __f3 });\nObject.defineProperty(__f3_prototype, \"getCredentials\", { configurable: true, writable: true, value: __f4 });\nObject.defineProperty(__f3_prototype, \"getToken\", { configurable: true, writable: true, value: __f5 });\nObject.defineProperty(__f3, \"prototype\", { value: __f3_prototype });\nvar __m = {};\nObject.defineProperty(__m, \"__esModule\", { value: true });\n__m.ClientCredential = __f3;\nvar __f8_prototype = {};\nObject.defineProperty(__f8_prototype, \"constructor\", { configurable: true, writable: true, value: __f8 });\nObject.defineProperty(__f8_prototype, \"getCredentials\", { configurable: true, writable: true, value: __f9 });\nObject.defineProperty(__f8_prototype, \"signRequest\", { configurable: true, writable: true, value: __f10 });\nObject.defineProperty(__f8_prototype, \"getToken\", { configurable: true, writable: true, value: __f11 });\nObject.defineProperty(__f8, \"prototype\", { value: __f8_prototype });\n__m.InternalCredentials = __f8;\nObject.defineProperty(__Base_1, \"ClientCredential\", { enumerable: true, get: __f7 });\nObject.defineProperty(__provider_proto, \"getClient\", { configurable: true, writable: true, value: __f2 });\nObject.defineProperty(__provider_proto, \"tryGetDeletedSecret\", { configurable: true, writable: true, value: __f12 });\nObject.defineProperty(__provider_proto, \"tryRecoverSecret\", { configurable: true, writable: true, value: __f13 });\nObject.defineProperty(__provider_proto, \"create\", { configurable: true, writable: true, value: __f14 });\nObject.defineProperty(__provider_proto, \"update\", { configurable: true, writable: true, value: __f15 });\nObject.defineProperty(__provider_proto, \"delete\", { configurable: true, writable: true, value: __f16 });\nObject.defineProperty(__provider_proto, \"diff\", { configurable: true, writable: true, value: __f17 });\nvar __provider = Object.create(__provider_proto);\n__provider.name = \"dev-drunk-aks-client-id\";\n__provider._client = undefined;\n\nfunction __f1(__0) {\n  return (function() {\n    with({  }) {\n\nreturn function /*constructor*/(name) {\n        this.name = name;\n        this._client = undefined;\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f3() {\n  return (function() {\n    with({  }) {\n\nreturn function /*constructor*/() { };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f4() {\n  return (function() {\n    with({ native: require(\"@pulumi/azure-native/index.js\"), identity_1: require(\"@azure/identity/dist/index.js\") }) {\n\nreturn function /*getCredentials*/() {\n        if (this.credential)\n            return this.credential;\n        let clientID = native.config.clientId;\n        let clientSecret = native.config.clientSecret;\n        let tenantID = native.config.tenantId;\n        let subscriptionID = native.config.subscriptionId;\n        // If at least one of them is empty, try looking at the env vars.\n        if (!clientID || !clientSecret || !tenantID || !subscriptionID) {\n            //console.log('ClientCredential: getting auth info from ARM.');\n            clientID = process.env['ARM_CLIENT_ID'];\n            clientSecret = process.env['ARM_CLIENT_SECRET'];\n            tenantID = process.env['ARM_TENANT_ID'];\n            subscriptionID = process.env['ARM_SUBSCRIPTION_ID'];\n        }\n        if (tenantID \u0026\u0026 clientID \u0026\u0026 clientSecret) {\n            this.credential = new identity_1.ClientSecretCredential(tenantID, clientID, clientSecret);\n        }\n        return this.credential;\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f6(__0, __1, __2, __3) {\n  return (function() {\n    with({  }) {\n\nreturn function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f5(__0, __1) {\n  return (function() {\n    with({ __awaiter: __f6, msRestAzure: require(\"@azure/ms-rest-nodeauth/dist/lib/msRestNodeAuth.js\") }) {\n\nreturn function /*getToken*/(scopes, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const cre = this.getCredentials();\n            if (cre)\n                return cre.getToken(scopes, options);\n            const resource = Array.isArray(scopes) ? scopes[0] : scopes;\n            const token = yield msRestAzure.AzureCliCredentials.getAccessToken({\n                resource: resource.replace('/.default', ''),\n            });\n            return {\n                token: token.accessToken,\n                expiresOnTimestamp: 30,\n            };\n        });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f8() {\n  return (function() {\n    with({  }) {\n\nreturn function /*constructor*/() {\n        this.getCredentials();\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f9() {\n  return (function() {\n    with({ __awaiter: __f6, native: require(\"@pulumi/azure-native/index.js\"), msRestAzure: require(\"@azure/ms-rest-nodeauth/dist/lib/msRestNodeAuth.js\") }) {\n\nreturn function /*getCredentials*/() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.credentials)\n                return this.credentials;\n            let clientID = native.config.clientId;\n            let clientSecret = native.config.clientSecret;\n            this.tenantID = native.config.tenantId;\n            this.subscriptionID = native.config.subscriptionId;\n            // If at least one of them is empty, try looking at the env vars.\n            if (!clientID || !clientSecret || !this.tenantID || !this.subscriptionID) {\n                //console.log('ClientCredential: getting auth info from ARM.');\n                clientID = process.env['ARM_CLIENT_ID'];\n                clientSecret = process.env['ARM_CLIENT_SECRET'];\n                this.tenantID = process.env['ARM_TENANT_ID'];\n                this.subscriptionID = process.env['ARM_SUBSCRIPTION_ID'];\n            }\n            // If they are still empty, try to get the credentials from Az CLI.\n            if (!clientID || !clientSecret || !this.tenantID || !this.subscriptionID) {\n                //console.log('ClientCredential: getting auth info from Azure CLI.');\n                // `create()` will throw an error if the Az CLI is not installed or `az login` has never been run.\n                const cliCredentials = yield msRestAzure.AzureCliCredentials.create();\n                this.subscriptionID =\n                    cliCredentials.tokenInfo.subscription ||\n                        cliCredentials.subscriptionInfo.id;\n                this.tenantID = cliCredentials.tokenInfo.tenant;\n                this.credentials = cliCredentials;\n            }\n            else {\n                this.credentials = yield msRestAzure.loginWithServicePrincipalSecret(clientID, clientSecret, this.tenantID);\n            }\n            return this.credentials;\n        });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f10(__0) {\n  return (function() {\n    with({ __awaiter: __f6 }) {\n\nreturn function /*signRequest*/(webResource) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return (yield this.getCredentials()).signRequest(webResource);\n        });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f11() {\n  return (function() {\n    with({ __awaiter: __f6 }) {\n\nreturn function /*getToken*/() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const c = yield this.getCredentials();\n            return yield c.getToken();\n        });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f7() {\n  return (function() {\n    with({ m: __m, k: \"ClientCredential\" }) {\n\nreturn function () { return m[k]; };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f2(__0) {\n  return (function() {\n    with({ keyvault_secrets_1: require(\"@azure/keyvault-secrets/dist/index.js\"), Base_1: __Base_1 }) {\n\nreturn function /*getClient*/(vaultName) {\n        if (this._client)\n            return this._client;\n        const url = `https://${vaultName}.vault.azure.net?api-version=7.0`;\n        this._client = new keyvault_secrets_1.SecretClient(url, new Base_1.ClientCredential());\n        return this._client;\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f12(__0) {\n  return (function() {\n    with({ __awaiter: __f6 }) {\n\nreturn function /*tryGetDeletedSecret*/(props) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const client = this.getClient(props.vaultInfo.name);\n            return yield client.getDeletedSecret(props.name).catch(() =\u003e undefined);\n        });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f13(__0) {\n  return (function() {\n    with({ __awaiter: __f6 }) {\n\nreturn function /*tryRecoverSecret*/(props) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const client = this.getClient(props.vaultInfo.name);\n            const deleted = yield this.tryGetDeletedSecret(props);\n            //Recover deleted items\n            if (deleted)\n                yield (yield client.beginRecoverDeletedSecret(deleted.name)).pollUntilDone();\n        });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f14(__0) {\n  return (function() {\n    with({ __awaiter: __f6 }) {\n\nreturn function /*create*/(props) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.tryRecoverSecret(props);\n            const client = this.getClient(props.vaultInfo.name);\n            const ss = yield client.setSecret(props.name, props.value, {\n                enabled: true,\n                contentType: props.contentType,\n                tags: props.tags,\n            });\n            return { id: ss.properties.id || this.name, outs: props };\n        });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f15(__0, __1, __2) {\n  return (function() {\n    with({ __awaiter: __f6 }) {\n\nreturn function /*update*/(id, olds, news) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const rs = yield this.create(news);\n            //Delete the old Secret\n            if (olds.name !== news.name || olds.vaultInfo.name !== news.vaultInfo.name)\n                yield this.delete(id, olds).catch((e) =\u003e { var _a; return console.log(`Cannot delete ${this.name}`, (_a = e === null || e === void 0 ? void 0 : e.resource) === null || _a === void 0 ? void 0 : _a.data); });\n            return rs;\n        });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f16(__0, __1) {\n  return (function() {\n    with({ __awaiter: __f6 }) {\n\nreturn function /*delete*/(id, props) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const client = this.getClient(props.vaultInfo.name);\n                yield client.beginDeleteSecret(props.name);\n            }\n            catch (_a) {\n                //Ignore\n            }\n        });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f17(__0, __1, __2) {\n  return (function() {\n    with({ __awaiter: __f6 }) {\n\nreturn function /*diff*/(id, previousOutput, news) {\n        return __awaiter(this, void 0, void 0, function* () {\n            //check if secret is delete then commit changes to recover it.\n            const deleted = yield this.tryGetDeletedSecret(news);\n            return {\n                deleteBeforeReplace: false,\n                changes: deleted != undefined ||\n                    previousOutput.name !== news.name ||\n                    previousOutput.vaultInfo.name !== news.vaultInfo.name ||\n                    previousOutput.value !== news.value ||\n                    previousOutput.contentType !== news.contentType,\n            };\n        });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f0() {\n  return (function() {\n    with({ provider: __provider }) {\n\nreturn () =\u003e provider;\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n",
                    "contentType": "Identity",
                    "name": "drunk-aks-client-id",
                    "value": "d1ea279e-241d-4e73-ab22-222dc3489018",
                    "vaultInfo": {
                        "group": {
                            "resourceGroupName": "global-grp-drunk"
                        },
                        "id": "/subscriptions/f146579d-929c-4f4b-a742-b4ad6ab9ef27/resourceGroups/global-grp-drunk/providers/Microsoft.KeyVault/vaults/global-drunk-vlt",
                        "name": "global-drunk-vlt"
                    }
                },
                "parent": "urn:pulumi:dev::azure-drunk-aks::pulumi:pulumi:Stack::azure-drunk-aks-dev",
                "dependencies": [
                    "urn:pulumi:dev::azure-drunk-aks::azuread:index/application:Application::dev-drunk-aks"
                ],
                "provider": "urn:pulumi:dev::azure-drunk-aks::pulumi:providers:pulumi-nodejs::default::16112b54-df04-4a88-8f97-ab00111abe86",
                "propertyDependencies": {
                    "__provider": null,
                    "contentType": null,
                    "name": null,
                    "value": [
                        "urn:pulumi:dev::azure-drunk-aks::azuread:index/application:Application::dev-drunk-aks"
                    ],
                    "vaultInfo": null
                }
            },
            {
                "urn": "urn:pulumi:dev::azure-drunk-aks::pulumi-nodejs:dynamic:Resource::csp:VaultSecrets:dev-drunk-aks-client-secret",
                "custom": true,
                "id": "https://global-drunk-vlt.vault.azure.net/secrets/drunk-aks-client-secret/c0ab0a3286e343cebd9df7b31c2d985d",
                "type": "pulumi-nodejs:dynamic:Resource",
                "inputs": {
                    "__provider": "exports.handler = __f0;\n\nvar __provider_proto = {};\nObject.defineProperty(__f1, \"prototype\", { value: __provider_proto });\nObject.defineProperty(__provider_proto, \"constructor\", { configurable: true, writable: true, value: __f1 });\nvar __Base_1 = {};\nvar __f3_prototype = {};\nObject.defineProperty(__f3_prototype, \"constructor\", { configurable: true, writable: true, value: __f3 });\nObject.defineProperty(__f3_prototype, \"getCredentials\", { configurable: true, writable: true, value: __f4 });\nObject.defineProperty(__f3_prototype, \"getToken\", { configurable: true, writable: true, value: __f5 });\nObject.defineProperty(__f3, \"prototype\", { value: __f3_prototype });\nvar __m = {};\nObject.defineProperty(__m, \"__esModule\", { value: true });\n__m.ClientCredential = __f3;\nvar __f8_prototype = {};\nObject.defineProperty(__f8_prototype, \"constructor\", { configurable: true, writable: true, value: __f8 });\nObject.defineProperty(__f8_prototype, \"getCredentials\", { configurable: true, writable: true, value: __f9 });\nObject.defineProperty(__f8_prototype, \"signRequest\", { configurable: true, writable: true, value: __f10 });\nObject.defineProperty(__f8_prototype, \"getToken\", { configurable: true, writable: true, value: __f11 });\nObject.defineProperty(__f8, \"prototype\", { value: __f8_prototype });\n__m.InternalCredentials = __f8;\nObject.defineProperty(__Base_1, \"ClientCredential\", { enumerable: true, get: __f7 });\nObject.defineProperty(__provider_proto, \"getClient\", { configurable: true, writable: true, value: __f2 });\nObject.defineProperty(__provider_proto, \"tryGetDeletedSecret\", { configurable: true, writable: true, value: __f12 });\nObject.defineProperty(__provider_proto, \"tryRecoverSecret\", { configurable: true, writable: true, value: __f13 });\nObject.defineProperty(__provider_proto, \"create\", { configurable: true, writable: true, value: __f14 });\nObject.defineProperty(__provider_proto, \"update\", { configurable: true, writable: true, value: __f15 });\nObject.defineProperty(__provider_proto, \"delete\", { configurable: true, writable: true, value: __f16 });\nObject.defineProperty(__provider_proto, \"diff\", { configurable: true, writable: true, value: __f17 });\nvar __provider = Object.create(__provider_proto);\n__provider.name = \"dev-drunk-aks-client-secret\";\n__provider._client = undefined;\n\nfunction __f1(__0) {\n  return (function() {\n    with({  }) {\n\nreturn function /*constructor*/(name) {\n        this.name = name;\n        this._client = undefined;\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f3() {\n  return (function() {\n    with({  }) {\n\nreturn function /*constructor*/() { };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f4() {\n  return (function() {\n    with({ native: require(\"@pulumi/azure-native/index.js\"), identity_1: require(\"@azure/identity/dist/index.js\") }) {\n\nreturn function /*getCredentials*/() {\n        if (this.credential)\n            return this.credential;\n        let clientID = native.config.clientId;\n        let clientSecret = native.config.clientSecret;\n        let tenantID = native.config.tenantId;\n        let subscriptionID = native.config.subscriptionId;\n        // If at least one of them is empty, try looking at the env vars.\n        if (!clientID || !clientSecret || !tenantID || !subscriptionID) {\n            //console.log('ClientCredential: getting auth info from ARM.');\n            clientID = process.env['ARM_CLIENT_ID'];\n            clientSecret = process.env['ARM_CLIENT_SECRET'];\n            tenantID = process.env['ARM_TENANT_ID'];\n            subscriptionID = process.env['ARM_SUBSCRIPTION_ID'];\n        }\n        if (tenantID \u0026\u0026 clientID \u0026\u0026 clientSecret) {\n            this.credential = new identity_1.ClientSecretCredential(tenantID, clientID, clientSecret);\n        }\n        return this.credential;\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f6(__0, __1, __2, __3) {\n  return (function() {\n    with({  }) {\n\nreturn function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f5(__0, __1) {\n  return (function() {\n    with({ __awaiter: __f6, msRestAzure: require(\"@azure/ms-rest-nodeauth/dist/lib/msRestNodeAuth.js\") }) {\n\nreturn function /*getToken*/(scopes, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const cre = this.getCredentials();\n            if (cre)\n                return cre.getToken(scopes, options);\n            const resource = Array.isArray(scopes) ? scopes[0] : scopes;\n            const token = yield msRestAzure.AzureCliCredentials.getAccessToken({\n                resource: resource.replace('/.default', ''),\n            });\n            return {\n                token: token.accessToken,\n                expiresOnTimestamp: 30,\n            };\n        });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f8() {\n  return (function() {\n    with({  }) {\n\nreturn function /*constructor*/() {\n        this.getCredentials();\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f9() {\n  return (function() {\n    with({ __awaiter: __f6, native: require(\"@pulumi/azure-native/index.js\"), msRestAzure: require(\"@azure/ms-rest-nodeauth/dist/lib/msRestNodeAuth.js\") }) {\n\nreturn function /*getCredentials*/() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.credentials)\n                return this.credentials;\n            let clientID = native.config.clientId;\n            let clientSecret = native.config.clientSecret;\n            this.tenantID = native.config.tenantId;\n            this.subscriptionID = native.config.subscriptionId;\n            // If at least one of them is empty, try looking at the env vars.\n            if (!clientID || !clientSecret || !this.tenantID || !this.subscriptionID) {\n                //console.log('ClientCredential: getting auth info from ARM.');\n                clientID = process.env['ARM_CLIENT_ID'];\n                clientSecret = process.env['ARM_CLIENT_SECRET'];\n                this.tenantID = process.env['ARM_TENANT_ID'];\n                this.subscriptionID = process.env['ARM_SUBSCRIPTION_ID'];\n            }\n            // If they are still empty, try to get the credentials from Az CLI.\n            if (!clientID || !clientSecret || !this.tenantID || !this.subscriptionID) {\n                //console.log('ClientCredential: getting auth info from Azure CLI.');\n                // `create()` will throw an error if the Az CLI is not installed or `az login` has never been run.\n                const cliCredentials = yield msRestAzure.AzureCliCredentials.create();\n                this.subscriptionID =\n                    cliCredentials.tokenInfo.subscription ||\n                        cliCredentials.subscriptionInfo.id;\n                this.tenantID = cliCredentials.tokenInfo.tenant;\n                this.credentials = cliCredentials;\n            }\n            else {\n                this.credentials = yield msRestAzure.loginWithServicePrincipalSecret(clientID, clientSecret, this.tenantID);\n            }\n            return this.credentials;\n        });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f10(__0) {\n  return (function() {\n    with({ __awaiter: __f6 }) {\n\nreturn function /*signRequest*/(webResource) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return (yield this.getCredentials()).signRequest(webResource);\n        });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f11() {\n  return (function() {\n    with({ __awaiter: __f6 }) {\n\nreturn function /*getToken*/() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const c = yield this.getCredentials();\n            return yield c.getToken();\n        });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f7() {\n  return (function() {\n    with({ m: __m, k: \"ClientCredential\" }) {\n\nreturn function () { return m[k]; };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f2(__0) {\n  return (function() {\n    with({ keyvault_secrets_1: require(\"@azure/keyvault-secrets/dist/index.js\"), Base_1: __Base_1 }) {\n\nreturn function /*getClient*/(vaultName) {\n        if (this._client)\n            return this._client;\n        const url = `https://${vaultName}.vault.azure.net?api-version=7.0`;\n        this._client = new keyvault_secrets_1.SecretClient(url, new Base_1.ClientCredential());\n        return this._client;\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f12(__0) {\n  return (function() {\n    with({ __awaiter: __f6 }) {\n\nreturn function /*tryGetDeletedSecret*/(props) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const client = this.getClient(props.vaultInfo.name);\n            return yield client.getDeletedSecret(props.name).catch(() =\u003e undefined);\n        });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f13(__0) {\n  return (function() {\n    with({ __awaiter: __f6 }) {\n\nreturn function /*tryRecoverSecret*/(props) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const client = this.getClient(props.vaultInfo.name);\n            const deleted = yield this.tryGetDeletedSecret(props);\n            //Recover deleted items\n            if (deleted)\n                yield (yield client.beginRecoverDeletedSecret(deleted.name)).pollUntilDone();\n        });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f14(__0) {\n  return (function() {\n    with({ __awaiter: __f6 }) {\n\nreturn function /*create*/(props) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.tryRecoverSecret(props);\n            const client = this.getClient(props.vaultInfo.name);\n            const ss = yield client.setSecret(props.name, props.value, {\n                enabled: true,\n                contentType: props.contentType,\n                tags: props.tags,\n            });\n            return { id: ss.properties.id || this.name, outs: props };\n        });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f15(__0, __1, __2) {\n  return (function() {\n    with({ __awaiter: __f6 }) {\n\nreturn function /*update*/(id, olds, news) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const rs = yield this.create(news);\n            //Delete the old Secret\n            if (olds.name !== news.name || olds.vaultInfo.name !== news.vaultInfo.name)\n                yield this.delete(id, olds).catch((e) =\u003e { var _a; return console.log(`Cannot delete ${this.name}`, (_a = e === null || e === void 0 ? void 0 : e.resource) === null || _a === void 0 ? void 0 : _a.data); });\n            return rs;\n        });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f16(__0, __1) {\n  return (function() {\n    with({ __awaiter: __f6 }) {\n\nreturn function /*delete*/(id, props) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const client = this.getClient(props.vaultInfo.name);\n                yield client.beginDeleteSecret(props.name);\n            }\n            catch (_a) {\n                //Ignore\n            }\n        });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f17(__0, __1, __2) {\n  return (function() {\n    with({ __awaiter: __f6 }) {\n\nreturn function /*diff*/(id, previousOutput, news) {\n        return __awaiter(this, void 0, void 0, function* () {\n            //check if secret is delete then commit changes to recover it.\n            const deleted = yield this.tryGetDeletedSecret(news);\n            return {\n                deleteBeforeReplace: false,\n                changes: deleted != undefined ||\n                    previousOutput.name !== news.name ||\n                    previousOutput.vaultInfo.name !== news.vaultInfo.name ||\n                    previousOutput.value !== news.value ||\n                    previousOutput.contentType !== news.contentType,\n            };\n        });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f0() {\n  return (function() {\n    with({ provider: __provider }) {\n\nreturn () =\u003e provider;\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n",
                    "contentType": "Identity",
                    "name": "drunk-aks-client-secret",
                    "value": {
                        "4dabf18193072939515e22adb298388d": "1b47061264138c4ac30d75fd1eb44270",
                        "ciphertext": "AAABANGKRSTUhwaIqI5KgE7s94RkeGRBoG8MIyvjU0CJz8OeqUdQ5ihr9L7orRys9bRAZ7SqcznePf9oSceyZGJcvRnnhAMCZmkAbuS96mi3Eh1YlfOfk6KWZM4T13cjoMLSskmdyC4="
                    },
                    "vaultInfo": {
                        "group": {
                            "resourceGroupName": "global-grp-drunk"
                        },
                        "id": "/subscriptions/f146579d-929c-4f4b-a742-b4ad6ab9ef27/resourceGroups/global-grp-drunk/providers/Microsoft.KeyVault/vaults/global-drunk-vlt",
                        "name": "global-drunk-vlt"
                    }
                },
                "outputs": {
                    "__provider": "exports.handler = __f0;\n\nvar __provider_proto = {};\nObject.defineProperty(__f1, \"prototype\", { value: __provider_proto });\nObject.defineProperty(__provider_proto, \"constructor\", { configurable: true, writable: true, value: __f1 });\nvar __Base_1 = {};\nvar __f3_prototype = {};\nObject.defineProperty(__f3_prototype, \"constructor\", { configurable: true, writable: true, value: __f3 });\nObject.defineProperty(__f3_prototype, \"getCredentials\", { configurable: true, writable: true, value: __f4 });\nObject.defineProperty(__f3_prototype, \"getToken\", { configurable: true, writable: true, value: __f5 });\nObject.defineProperty(__f3, \"prototype\", { value: __f3_prototype });\nvar __m = {};\nObject.defineProperty(__m, \"__esModule\", { value: true });\n__m.ClientCredential = __f3;\nvar __f8_prototype = {};\nObject.defineProperty(__f8_prototype, \"constructor\", { configurable: true, writable: true, value: __f8 });\nObject.defineProperty(__f8_prototype, \"getCredentials\", { configurable: true, writable: true, value: __f9 });\nObject.defineProperty(__f8_prototype, \"signRequest\", { configurable: true, writable: true, value: __f10 });\nObject.defineProperty(__f8_prototype, \"getToken\", { configurable: true, writable: true, value: __f11 });\nObject.defineProperty(__f8, \"prototype\", { value: __f8_prototype });\n__m.InternalCredentials = __f8;\nObject.defineProperty(__Base_1, \"ClientCredential\", { enumerable: true, get: __f7 });\nObject.defineProperty(__provider_proto, \"getClient\", { configurable: true, writable: true, value: __f2 });\nObject.defineProperty(__provider_proto, \"tryGetDeletedSecret\", { configurable: true, writable: true, value: __f12 });\nObject.defineProperty(__provider_proto, \"tryRecoverSecret\", { configurable: true, writable: true, value: __f13 });\nObject.defineProperty(__provider_proto, \"create\", { configurable: true, writable: true, value: __f14 });\nObject.defineProperty(__provider_proto, \"update\", { configurable: true, writable: true, value: __f15 });\nObject.defineProperty(__provider_proto, \"delete\", { configurable: true, writable: true, value: __f16 });\nObject.defineProperty(__provider_proto, \"diff\", { configurable: true, writable: true, value: __f17 });\nvar __provider = Object.create(__provider_proto);\n__provider.name = \"dev-drunk-aks-client-secret\";\n__provider._client = undefined;\n\nfunction __f1(__0) {\n  return (function() {\n    with({  }) {\n\nreturn function /*constructor*/(name) {\n        this.name = name;\n        this._client = undefined;\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f3() {\n  return (function() {\n    with({  }) {\n\nreturn function /*constructor*/() { };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f4() {\n  return (function() {\n    with({ native: require(\"@pulumi/azure-native/index.js\"), identity_1: require(\"@azure/identity/dist/index.js\") }) {\n\nreturn function /*getCredentials*/() {\n        if (this.credential)\n            return this.credential;\n        let clientID = native.config.clientId;\n        let clientSecret = native.config.clientSecret;\n        let tenantID = native.config.tenantId;\n        let subscriptionID = native.config.subscriptionId;\n        // If at least one of them is empty, try looking at the env vars.\n        if (!clientID || !clientSecret || !tenantID || !subscriptionID) {\n            //console.log('ClientCredential: getting auth info from ARM.');\n            clientID = process.env['ARM_CLIENT_ID'];\n            clientSecret = process.env['ARM_CLIENT_SECRET'];\n            tenantID = process.env['ARM_TENANT_ID'];\n            subscriptionID = process.env['ARM_SUBSCRIPTION_ID'];\n        }\n        if (tenantID \u0026\u0026 clientID \u0026\u0026 clientSecret) {\n            this.credential = new identity_1.ClientSecretCredential(tenantID, clientID, clientSecret);\n        }\n        return this.credential;\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f6(__0, __1, __2, __3) {\n  return (function() {\n    with({  }) {\n\nreturn function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f5(__0, __1) {\n  return (function() {\n    with({ __awaiter: __f6, msRestAzure: require(\"@azure/ms-rest-nodeauth/dist/lib/msRestNodeAuth.js\") }) {\n\nreturn function /*getToken*/(scopes, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const cre = this.getCredentials();\n            if (cre)\n                return cre.getToken(scopes, options);\n            const resource = Array.isArray(scopes) ? scopes[0] : scopes;\n            const token = yield msRestAzure.AzureCliCredentials.getAccessToken({\n                resource: resource.replace('/.default', ''),\n            });\n            return {\n                token: token.accessToken,\n                expiresOnTimestamp: 30,\n            };\n        });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f8() {\n  return (function() {\n    with({  }) {\n\nreturn function /*constructor*/() {\n        this.getCredentials();\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f9() {\n  return (function() {\n    with({ __awaiter: __f6, native: require(\"@pulumi/azure-native/index.js\"), msRestAzure: require(\"@azure/ms-rest-nodeauth/dist/lib/msRestNodeAuth.js\") }) {\n\nreturn function /*getCredentials*/() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.credentials)\n                return this.credentials;\n            let clientID = native.config.clientId;\n            let clientSecret = native.config.clientSecret;\n            this.tenantID = native.config.tenantId;\n            this.subscriptionID = native.config.subscriptionId;\n            // If at least one of them is empty, try looking at the env vars.\n            if (!clientID || !clientSecret || !this.tenantID || !this.subscriptionID) {\n                //console.log('ClientCredential: getting auth info from ARM.');\n                clientID = process.env['ARM_CLIENT_ID'];\n                clientSecret = process.env['ARM_CLIENT_SECRET'];\n                this.tenantID = process.env['ARM_TENANT_ID'];\n                this.subscriptionID = process.env['ARM_SUBSCRIPTION_ID'];\n            }\n            // If they are still empty, try to get the credentials from Az CLI.\n            if (!clientID || !clientSecret || !this.tenantID || !this.subscriptionID) {\n                //console.log('ClientCredential: getting auth info from Azure CLI.');\n                // `create()` will throw an error if the Az CLI is not installed or `az login` has never been run.\n                const cliCredentials = yield msRestAzure.AzureCliCredentials.create();\n                this.subscriptionID =\n                    cliCredentials.tokenInfo.subscription ||\n                        cliCredentials.subscriptionInfo.id;\n                this.tenantID = cliCredentials.tokenInfo.tenant;\n                this.credentials = cliCredentials;\n            }\n            else {\n                this.credentials = yield msRestAzure.loginWithServicePrincipalSecret(clientID, clientSecret, this.tenantID);\n            }\n            return this.credentials;\n        });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f10(__0) {\n  return (function() {\n    with({ __awaiter: __f6 }) {\n\nreturn function /*signRequest*/(webResource) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return (yield this.getCredentials()).signRequest(webResource);\n        });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f11() {\n  return (function() {\n    with({ __awaiter: __f6 }) {\n\nreturn function /*getToken*/() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const c = yield this.getCredentials();\n            return yield c.getToken();\n        });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f7() {\n  return (function() {\n    with({ m: __m, k: \"ClientCredential\" }) {\n\nreturn function () { return m[k]; };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f2(__0) {\n  return (function() {\n    with({ keyvault_secrets_1: require(\"@azure/keyvault-secrets/dist/index.js\"), Base_1: __Base_1 }) {\n\nreturn function /*getClient*/(vaultName) {\n        if (this._client)\n            return this._client;\n        const url = `https://${vaultName}.vault.azure.net?api-version=7.0`;\n        this._client = new keyvault_secrets_1.SecretClient(url, new Base_1.ClientCredential());\n        return this._client;\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f12(__0) {\n  return (function() {\n    with({ __awaiter: __f6 }) {\n\nreturn function /*tryGetDeletedSecret*/(props) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const client = this.getClient(props.vaultInfo.name);\n            return yield client.getDeletedSecret(props.name).catch(() =\u003e undefined);\n        });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f13(__0) {\n  return (function() {\n    with({ __awaiter: __f6 }) {\n\nreturn function /*tryRecoverSecret*/(props) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const client = this.getClient(props.vaultInfo.name);\n            const deleted = yield this.tryGetDeletedSecret(props);\n            //Recover deleted items\n            if (deleted)\n                yield (yield client.beginRecoverDeletedSecret(deleted.name)).pollUntilDone();\n        });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f14(__0) {\n  return (function() {\n    with({ __awaiter: __f6 }) {\n\nreturn function /*create*/(props) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.tryRecoverSecret(props);\n            const client = this.getClient(props.vaultInfo.name);\n            const ss = yield client.setSecret(props.name, props.value, {\n                enabled: true,\n                contentType: props.contentType,\n                tags: props.tags,\n            });\n            return { id: ss.properties.id || this.name, outs: props };\n        });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f15(__0, __1, __2) {\n  return (function() {\n    with({ __awaiter: __f6 }) {\n\nreturn function /*update*/(id, olds, news) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const rs = yield this.create(news);\n            //Delete the old Secret\n            if (olds.name !== news.name || olds.vaultInfo.name !== news.vaultInfo.name)\n                yield this.delete(id, olds).catch((e) =\u003e { var _a; return console.log(`Cannot delete ${this.name}`, (_a = e === null || e === void 0 ? void 0 : e.resource) === null || _a === void 0 ? void 0 : _a.data); });\n            return rs;\n        });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f16(__0, __1) {\n  return (function() {\n    with({ __awaiter: __f6 }) {\n\nreturn function /*delete*/(id, props) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const client = this.getClient(props.vaultInfo.name);\n                yield client.beginDeleteSecret(props.name);\n            }\n            catch (_a) {\n                //Ignore\n            }\n        });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f17(__0, __1, __2) {\n  return (function() {\n    with({ __awaiter: __f6 }) {\n\nreturn function /*diff*/(id, previousOutput, news) {\n        return __awaiter(this, void 0, void 0, function* () {\n            //check if secret is delete then commit changes to recover it.\n            const deleted = yield this.tryGetDeletedSecret(news);\n            return {\n                deleteBeforeReplace: false,\n                changes: deleted != undefined ||\n                    previousOutput.name !== news.name ||\n                    previousOutput.vaultInfo.name !== news.vaultInfo.name ||\n                    previousOutput.value !== news.value ||\n                    previousOutput.contentType !== news.contentType,\n            };\n        });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f0() {\n  return (function() {\n    with({ provider: __provider }) {\n\nreturn () =\u003e provider;\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n",
                    "contentType": "Identity",
                    "name": "drunk-aks-client-secret",
                    "value": {
                        "4dabf18193072939515e22adb298388d": "1b47061264138c4ac30d75fd1eb44270",
                        "ciphertext": "AAABADrext0HMdyheeQLAYoSBCUNTXTsN2epzhEaoADRyXxBnjFik5Gzd6Rrln/GdXnqbBE0+yjX43OBUU3aeU2Q64YV6GBDifhx4E26NpRb2aYcqbsmC7mq6abbD8dF8NDLyTt2cBA="
                    },
                    "vaultInfo": {
                        "group": {
                            "resourceGroupName": "global-grp-drunk"
                        },
                        "id": "/subscriptions/f146579d-929c-4f4b-a742-b4ad6ab9ef27/resourceGroups/global-grp-drunk/providers/Microsoft.KeyVault/vaults/global-drunk-vlt",
                        "name": "global-drunk-vlt"
                    }
                },
                "parent": "urn:pulumi:dev::azure-drunk-aks::pulumi:pulumi:Stack::azure-drunk-aks-dev",
                "dependencies": [
                    "urn:pulumi:dev::azure-drunk-aks::azuread:index/applicationPassword:ApplicationPassword::dev-drunk-aks"
                ],
                "provider": "urn:pulumi:dev::azure-drunk-aks::pulumi:providers:pulumi-nodejs::default::16112b54-df04-4a88-8f97-ab00111abe86",
                "propertyDependencies": {
                    "__provider": null,
                    "contentType": null,
                    "name": null,
                    "value": [
                        "urn:pulumi:dev::azure-drunk-aks::azuread:index/applicationPassword:ApplicationPassword::dev-drunk-aks"
                    ],
                    "vaultInfo": null
                }
            },
            {
                "urn": "urn:pulumi:dev::azure-drunk-aks::pulumi-nodejs:dynamic:Resource::csp:VaultSecrets:dev-drunk-aks-principal-id",
                "custom": true,
                "id": "https://global-drunk-vlt.vault.azure.net/secrets/drunk-aks-principal-id/34440317a57d4a8ba76c1d11e74f9b37",
                "type": "pulumi-nodejs:dynamic:Resource",
                "inputs": {
                    "__provider": "exports.handler = __f0;\n\nvar __provider_proto = {};\nObject.defineProperty(__f1, \"prototype\", { value: __provider_proto });\nObject.defineProperty(__provider_proto, \"constructor\", { configurable: true, writable: true, value: __f1 });\nvar __Base_1 = {};\nvar __f3_prototype = {};\nObject.defineProperty(__f3_prototype, \"constructor\", { configurable: true, writable: true, value: __f3 });\nObject.defineProperty(__f3_prototype, \"getCredentials\", { configurable: true, writable: true, value: __f4 });\nObject.defineProperty(__f3_prototype, \"getToken\", { configurable: true, writable: true, value: __f5 });\nObject.defineProperty(__f3, \"prototype\", { value: __f3_prototype });\nvar __m = {};\nObject.defineProperty(__m, \"__esModule\", { value: true });\n__m.ClientCredential = __f3;\nvar __f8_prototype = {};\nObject.defineProperty(__f8_prototype, \"constructor\", { configurable: true, writable: true, value: __f8 });\nObject.defineProperty(__f8_prototype, \"getCredentials\", { configurable: true, writable: true, value: __f9 });\nObject.defineProperty(__f8_prototype, \"signRequest\", { configurable: true, writable: true, value: __f10 });\nObject.defineProperty(__f8_prototype, \"getToken\", { configurable: true, writable: true, value: __f11 });\nObject.defineProperty(__f8, \"prototype\", { value: __f8_prototype });\n__m.InternalCredentials = __f8;\nObject.defineProperty(__Base_1, \"ClientCredential\", { enumerable: true, get: __f7 });\nObject.defineProperty(__provider_proto, \"getClient\", { configurable: true, writable: true, value: __f2 });\nObject.defineProperty(__provider_proto, \"tryGetDeletedSecret\", { configurable: true, writable: true, value: __f12 });\nObject.defineProperty(__provider_proto, \"tryRecoverSecret\", { configurable: true, writable: true, value: __f13 });\nObject.defineProperty(__provider_proto, \"create\", { configurable: true, writable: true, value: __f14 });\nObject.defineProperty(__provider_proto, \"update\", { configurable: true, writable: true, value: __f15 });\nObject.defineProperty(__provider_proto, \"delete\", { configurable: true, writable: true, value: __f16 });\nObject.defineProperty(__provider_proto, \"diff\", { configurable: true, writable: true, value: __f17 });\nvar __provider = Object.create(__provider_proto);\n__provider.name = \"dev-drunk-aks-principal-id\";\n__provider._client = undefined;\n\nfunction __f1(__0) {\n  return (function() {\n    with({  }) {\n\nreturn function /*constructor*/(name) {\n        this.name = name;\n        this._client = undefined;\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f3() {\n  return (function() {\n    with({  }) {\n\nreturn function /*constructor*/() { };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f4() {\n  return (function() {\n    with({ native: require(\"@pulumi/azure-native/index.js\"), identity_1: require(\"@azure/identity/dist/index.js\") }) {\n\nreturn function /*getCredentials*/() {\n        if (this.credential)\n            return this.credential;\n        let clientID = native.config.clientId;\n        let clientSecret = native.config.clientSecret;\n        let tenantID = native.config.tenantId;\n        let subscriptionID = native.config.subscriptionId;\n        // If at least one of them is empty, try looking at the env vars.\n        if (!clientID || !clientSecret || !tenantID || !subscriptionID) {\n            //console.log('ClientCredential: getting auth info from ARM.');\n            clientID = process.env['ARM_CLIENT_ID'];\n            clientSecret = process.env['ARM_CLIENT_SECRET'];\n            tenantID = process.env['ARM_TENANT_ID'];\n            subscriptionID = process.env['ARM_SUBSCRIPTION_ID'];\n        }\n        if (tenantID \u0026\u0026 clientID \u0026\u0026 clientSecret) {\n            this.credential = new identity_1.ClientSecretCredential(tenantID, clientID, clientSecret);\n        }\n        return this.credential;\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f6(__0, __1, __2, __3) {\n  return (function() {\n    with({  }) {\n\nreturn function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f5(__0, __1) {\n  return (function() {\n    with({ __awaiter: __f6, msRestAzure: require(\"@azure/ms-rest-nodeauth/dist/lib/msRestNodeAuth.js\") }) {\n\nreturn function /*getToken*/(scopes, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const cre = this.getCredentials();\n            if (cre)\n                return cre.getToken(scopes, options);\n            const resource = Array.isArray(scopes) ? scopes[0] : scopes;\n            const token = yield msRestAzure.AzureCliCredentials.getAccessToken({\n                resource: resource.replace('/.default', ''),\n            });\n            return {\n                token: token.accessToken,\n                expiresOnTimestamp: 30,\n            };\n        });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f8() {\n  return (function() {\n    with({  }) {\n\nreturn function /*constructor*/() {\n        this.getCredentials();\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f9() {\n  return (function() {\n    with({ __awaiter: __f6, native: require(\"@pulumi/azure-native/index.js\"), msRestAzure: require(\"@azure/ms-rest-nodeauth/dist/lib/msRestNodeAuth.js\") }) {\n\nreturn function /*getCredentials*/() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.credentials)\n                return this.credentials;\n            let clientID = native.config.clientId;\n            let clientSecret = native.config.clientSecret;\n            this.tenantID = native.config.tenantId;\n            this.subscriptionID = native.config.subscriptionId;\n            // If at least one of them is empty, try looking at the env vars.\n            if (!clientID || !clientSecret || !this.tenantID || !this.subscriptionID) {\n                //console.log('ClientCredential: getting auth info from ARM.');\n                clientID = process.env['ARM_CLIENT_ID'];\n                clientSecret = process.env['ARM_CLIENT_SECRET'];\n                this.tenantID = process.env['ARM_TENANT_ID'];\n                this.subscriptionID = process.env['ARM_SUBSCRIPTION_ID'];\n            }\n            // If they are still empty, try to get the credentials from Az CLI.\n            if (!clientID || !clientSecret || !this.tenantID || !this.subscriptionID) {\n                //console.log('ClientCredential: getting auth info from Azure CLI.');\n                // `create()` will throw an error if the Az CLI is not installed or `az login` has never been run.\n                const cliCredentials = yield msRestAzure.AzureCliCredentials.create();\n                this.subscriptionID =\n                    cliCredentials.tokenInfo.subscription ||\n                        cliCredentials.subscriptionInfo.id;\n                this.tenantID = cliCredentials.tokenInfo.tenant;\n                this.credentials = cliCredentials;\n            }\n            else {\n                this.credentials = yield msRestAzure.loginWithServicePrincipalSecret(clientID, clientSecret, this.tenantID);\n            }\n            return this.credentials;\n        });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f10(__0) {\n  return (function() {\n    with({ __awaiter: __f6 }) {\n\nreturn function /*signRequest*/(webResource) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return (yield this.getCredentials()).signRequest(webResource);\n        });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f11() {\n  return (function() {\n    with({ __awaiter: __f6 }) {\n\nreturn function /*getToken*/() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const c = yield this.getCredentials();\n            return yield c.getToken();\n        });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f7() {\n  return (function() {\n    with({ m: __m, k: \"ClientCredential\" }) {\n\nreturn function () { return m[k]; };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f2(__0) {\n  return (function() {\n    with({ keyvault_secrets_1: require(\"@azure/keyvault-secrets/dist/index.js\"), Base_1: __Base_1 }) {\n\nreturn function /*getClient*/(vaultName) {\n        if (this._client)\n            return this._client;\n        const url = `https://${vaultName}.vault.azure.net?api-version=7.0`;\n        this._client = new keyvault_secrets_1.SecretClient(url, new Base_1.ClientCredential());\n        return this._client;\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f12(__0) {\n  return (function() {\n    with({ __awaiter: __f6 }) {\n\nreturn function /*tryGetDeletedSecret*/(props) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const client = this.getClient(props.vaultInfo.name);\n            return yield client.getDeletedSecret(props.name).catch(() =\u003e undefined);\n        });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f13(__0) {\n  return (function() {\n    with({ __awaiter: __f6 }) {\n\nreturn function /*tryRecoverSecret*/(props) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const client = this.getClient(props.vaultInfo.name);\n            const deleted = yield this.tryGetDeletedSecret(props);\n            //Recover deleted items\n            if (deleted)\n                yield (yield client.beginRecoverDeletedSecret(deleted.name)).pollUntilDone();\n        });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f14(__0) {\n  return (function() {\n    with({ __awaiter: __f6 }) {\n\nreturn function /*create*/(props) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.tryRecoverSecret(props);\n            const client = this.getClient(props.vaultInfo.name);\n            const ss = yield client.setSecret(props.name, props.value, {\n                enabled: true,\n                contentType: props.contentType,\n                tags: props.tags,\n            });\n            return { id: ss.properties.id || this.name, outs: props };\n        });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f15(__0, __1, __2) {\n  return (function() {\n    with({ __awaiter: __f6 }) {\n\nreturn function /*update*/(id, olds, news) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const rs = yield this.create(news);\n            //Delete the old Secret\n            if (olds.name !== news.name || olds.vaultInfo.name !== news.vaultInfo.name)\n                yield this.delete(id, olds).catch((e) =\u003e { var _a; return console.log(`Cannot delete ${this.name}`, (_a = e === null || e === void 0 ? void 0 : e.resource) === null || _a === void 0 ? void 0 : _a.data); });\n            return rs;\n        });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f16(__0, __1) {\n  return (function() {\n    with({ __awaiter: __f6 }) {\n\nreturn function /*delete*/(id, props) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const client = this.getClient(props.vaultInfo.name);\n                yield client.beginDeleteSecret(props.name);\n            }\n            catch (_a) {\n                //Ignore\n            }\n        });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f17(__0, __1, __2) {\n  return (function() {\n    with({ __awaiter: __f6 }) {\n\nreturn function /*diff*/(id, previousOutput, news) {\n        return __awaiter(this, void 0, void 0, function* () {\n            //check if secret is delete then commit changes to recover it.\n            const deleted = yield this.tryGetDeletedSecret(news);\n            return {\n                deleteBeforeReplace: false,\n                changes: deleted != undefined ||\n                    previousOutput.name !== news.name ||\n                    previousOutput.vaultInfo.name !== news.vaultInfo.name ||\n                    previousOutput.value !== news.value ||\n                    previousOutput.contentType !== news.contentType,\n            };\n        });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f0() {\n  return (function() {\n    with({ provider: __provider }) {\n\nreturn () =\u003e provider;\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n",
                    "contentType": "Identity",
                    "name": "drunk-aks-principal-id",
                    "value": "4890c558-da30-4536-9fbd-548595e58726",
                    "vaultInfo": {
                        "group": {
                            "resourceGroupName": "global-grp-drunk"
                        },
                        "id": "/subscriptions/f146579d-929c-4f4b-a742-b4ad6ab9ef27/resourceGroups/global-grp-drunk/providers/Microsoft.KeyVault/vaults/global-drunk-vlt",
                        "name": "global-drunk-vlt"
                    }
                },
                "outputs": {
                    "__provider": "exports.handler = __f0;\n\nvar __provider_proto = {};\nObject.defineProperty(__f1, \"prototype\", { value: __provider_proto });\nObject.defineProperty(__provider_proto, \"constructor\", { configurable: true, writable: true, value: __f1 });\nvar __Base_1 = {};\nvar __f3_prototype = {};\nObject.defineProperty(__f3_prototype, \"constructor\", { configurable: true, writable: true, value: __f3 });\nObject.defineProperty(__f3_prototype, \"getCredentials\", { configurable: true, writable: true, value: __f4 });\nObject.defineProperty(__f3_prototype, \"getToken\", { configurable: true, writable: true, value: __f5 });\nObject.defineProperty(__f3, \"prototype\", { value: __f3_prototype });\nvar __m = {};\nObject.defineProperty(__m, \"__esModule\", { value: true });\n__m.ClientCredential = __f3;\nvar __f8_prototype = {};\nObject.defineProperty(__f8_prototype, \"constructor\", { configurable: true, writable: true, value: __f8 });\nObject.defineProperty(__f8_prototype, \"getCredentials\", { configurable: true, writable: true, value: __f9 });\nObject.defineProperty(__f8_prototype, \"signRequest\", { configurable: true, writable: true, value: __f10 });\nObject.defineProperty(__f8_prototype, \"getToken\", { configurable: true, writable: true, value: __f11 });\nObject.defineProperty(__f8, \"prototype\", { value: __f8_prototype });\n__m.InternalCredentials = __f8;\nObject.defineProperty(__Base_1, \"ClientCredential\", { enumerable: true, get: __f7 });\nObject.defineProperty(__provider_proto, \"getClient\", { configurable: true, writable: true, value: __f2 });\nObject.defineProperty(__provider_proto, \"tryGetDeletedSecret\", { configurable: true, writable: true, value: __f12 });\nObject.defineProperty(__provider_proto, \"tryRecoverSecret\", { configurable: true, writable: true, value: __f13 });\nObject.defineProperty(__provider_proto, \"create\", { configurable: true, writable: true, value: __f14 });\nObject.defineProperty(__provider_proto, \"update\", { configurable: true, writable: true, value: __f15 });\nObject.defineProperty(__provider_proto, \"delete\", { configurable: true, writable: true, value: __f16 });\nObject.defineProperty(__provider_proto, \"diff\", { configurable: true, writable: true, value: __f17 });\nvar __provider = Object.create(__provider_proto);\n__provider.name = \"dev-drunk-aks-principal-id\";\n__provider._client = undefined;\n\nfunction __f1(__0) {\n  return (function() {\n    with({  }) {\n\nreturn function /*constructor*/(name) {\n        this.name = name;\n        this._client = undefined;\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f3() {\n  return (function() {\n    with({  }) {\n\nreturn function /*constructor*/() { };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f4() {\n  return (function() {\n    with({ native: require(\"@pulumi/azure-native/index.js\"), identity_1: require(\"@azure/identity/dist/index.js\") }) {\n\nreturn function /*getCredentials*/() {\n        if (this.credential)\n            return this.credential;\n        let clientID = native.config.clientId;\n        let clientSecret = native.config.clientSecret;\n        let tenantID = native.config.tenantId;\n        let subscriptionID = native.config.subscriptionId;\n        // If at least one of them is empty, try looking at the env vars.\n        if (!clientID || !clientSecret || !tenantID || !subscriptionID) {\n            //console.log('ClientCredential: getting auth info from ARM.');\n            clientID = process.env['ARM_CLIENT_ID'];\n            clientSecret = process.env['ARM_CLIENT_SECRET'];\n            tenantID = process.env['ARM_TENANT_ID'];\n            subscriptionID = process.env['ARM_SUBSCRIPTION_ID'];\n        }\n        if (tenantID \u0026\u0026 clientID \u0026\u0026 clientSecret) {\n            this.credential = new identity_1.ClientSecretCredential(tenantID, clientID, clientSecret);\n        }\n        return this.credential;\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f6(__0, __1, __2, __3) {\n  return (function() {\n    with({  }) {\n\nreturn function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f5(__0, __1) {\n  return (function() {\n    with({ __awaiter: __f6, msRestAzure: require(\"@azure/ms-rest-nodeauth/dist/lib/msRestNodeAuth.js\") }) {\n\nreturn function /*getToken*/(scopes, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const cre = this.getCredentials();\n            if (cre)\n                return cre.getToken(scopes, options);\n            const resource = Array.isArray(scopes) ? scopes[0] : scopes;\n            const token = yield msRestAzure.AzureCliCredentials.getAccessToken({\n                resource: resource.replace('/.default', ''),\n            });\n            return {\n                token: token.accessToken,\n                expiresOnTimestamp: 30,\n            };\n        });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f8() {\n  return (function() {\n    with({  }) {\n\nreturn function /*constructor*/() {\n        this.getCredentials();\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f9() {\n  return (function() {\n    with({ __awaiter: __f6, native: require(\"@pulumi/azure-native/index.js\"), msRestAzure: require(\"@azure/ms-rest-nodeauth/dist/lib/msRestNodeAuth.js\") }) {\n\nreturn function /*getCredentials*/() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.credentials)\n                return this.credentials;\n            let clientID = native.config.clientId;\n            let clientSecret = native.config.clientSecret;\n            this.tenantID = native.config.tenantId;\n            this.subscriptionID = native.config.subscriptionId;\n            // If at least one of them is empty, try looking at the env vars.\n            if (!clientID || !clientSecret || !this.tenantID || !this.subscriptionID) {\n                //console.log('ClientCredential: getting auth info from ARM.');\n                clientID = process.env['ARM_CLIENT_ID'];\n                clientSecret = process.env['ARM_CLIENT_SECRET'];\n                this.tenantID = process.env['ARM_TENANT_ID'];\n                this.subscriptionID = process.env['ARM_SUBSCRIPTION_ID'];\n            }\n            // If they are still empty, try to get the credentials from Az CLI.\n            if (!clientID || !clientSecret || !this.tenantID || !this.subscriptionID) {\n                //console.log('ClientCredential: getting auth info from Azure CLI.');\n                // `create()` will throw an error if the Az CLI is not installed or `az login` has never been run.\n                const cliCredentials = yield msRestAzure.AzureCliCredentials.create();\n                this.subscriptionID =\n                    cliCredentials.tokenInfo.subscription ||\n                        cliCredentials.subscriptionInfo.id;\n                this.tenantID = cliCredentials.tokenInfo.tenant;\n                this.credentials = cliCredentials;\n            }\n            else {\n                this.credentials = yield msRestAzure.loginWithServicePrincipalSecret(clientID, clientSecret, this.tenantID);\n            }\n            return this.credentials;\n        });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f10(__0) {\n  return (function() {\n    with({ __awaiter: __f6 }) {\n\nreturn function /*signRequest*/(webResource) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return (yield this.getCredentials()).signRequest(webResource);\n        });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f11() {\n  return (function() {\n    with({ __awaiter: __f6 }) {\n\nreturn function /*getToken*/() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const c = yield this.getCredentials();\n            return yield c.getToken();\n        });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f7() {\n  return (function() {\n    with({ m: __m, k: \"ClientCredential\" }) {\n\nreturn function () { return m[k]; };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f2(__0) {\n  return (function() {\n    with({ keyvault_secrets_1: require(\"@azure/keyvault-secrets/dist/index.js\"), Base_1: __Base_1 }) {\n\nreturn function /*getClient*/(vaultName) {\n        if (this._client)\n            return this._client;\n        const url = `https://${vaultName}.vault.azure.net?api-version=7.0`;\n        this._client = new keyvault_secrets_1.SecretClient(url, new Base_1.ClientCredential());\n        return this._client;\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f12(__0) {\n  return (function() {\n    with({ __awaiter: __f6 }) {\n\nreturn function /*tryGetDeletedSecret*/(props) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const client = this.getClient(props.vaultInfo.name);\n            return yield client.getDeletedSecret(props.name).catch(() =\u003e undefined);\n        });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f13(__0) {\n  return (function() {\n    with({ __awaiter: __f6 }) {\n\nreturn function /*tryRecoverSecret*/(props) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const client = this.getClient(props.vaultInfo.name);\n            const deleted = yield this.tryGetDeletedSecret(props);\n            //Recover deleted items\n            if (deleted)\n                yield (yield client.beginRecoverDeletedSecret(deleted.name)).pollUntilDone();\n        });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f14(__0) {\n  return (function() {\n    with({ __awaiter: __f6 }) {\n\nreturn function /*create*/(props) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.tryRecoverSecret(props);\n            const client = this.getClient(props.vaultInfo.name);\n            const ss = yield client.setSecret(props.name, props.value, {\n                enabled: true,\n                contentType: props.contentType,\n                tags: props.tags,\n            });\n            return { id: ss.properties.id || this.name, outs: props };\n        });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f15(__0, __1, __2) {\n  return (function() {\n    with({ __awaiter: __f6 }) {\n\nreturn function /*update*/(id, olds, news) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const rs = yield this.create(news);\n            //Delete the old Secret\n            if (olds.name !== news.name || olds.vaultInfo.name !== news.vaultInfo.name)\n                yield this.delete(id, olds).catch((e) =\u003e { var _a; return console.log(`Cannot delete ${this.name}`, (_a = e === null || e === void 0 ? void 0 : e.resource) === null || _a === void 0 ? void 0 : _a.data); });\n            return rs;\n        });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f16(__0, __1) {\n  return (function() {\n    with({ __awaiter: __f6 }) {\n\nreturn function /*delete*/(id, props) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const client = this.getClient(props.vaultInfo.name);\n                yield client.beginDeleteSecret(props.name);\n            }\n            catch (_a) {\n                //Ignore\n            }\n        });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f17(__0, __1, __2) {\n  return (function() {\n    with({ __awaiter: __f6 }) {\n\nreturn function /*diff*/(id, previousOutput, news) {\n        return __awaiter(this, void 0, void 0, function* () {\n            //check if secret is delete then commit changes to recover it.\n            const deleted = yield this.tryGetDeletedSecret(news);\n            return {\n                deleteBeforeReplace: false,\n                changes: deleted != undefined ||\n                    previousOutput.name !== news.name ||\n                    previousOutput.vaultInfo.name !== news.vaultInfo.name ||\n                    previousOutput.value !== news.value ||\n                    previousOutput.contentType !== news.contentType,\n            };\n        });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f0() {\n  return (function() {\n    with({ provider: __provider }) {\n\nreturn () =\u003e provider;\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n",
                    "contentType": "Identity",
                    "name": "drunk-aks-principal-id",
                    "value": "4890c558-da30-4536-9fbd-548595e58726",
                    "vaultInfo": {
                        "group": {
                            "resourceGroupName": "global-grp-drunk"
                        },
                        "id": "/subscriptions/f146579d-929c-4f4b-a742-b4ad6ab9ef27/resourceGroups/global-grp-drunk/providers/Microsoft.KeyVault/vaults/global-drunk-vlt",
                        "name": "global-drunk-vlt"
                    }
                },
                "parent": "urn:pulumi:dev::azure-drunk-aks::pulumi:pulumi:Stack::azure-drunk-aks-dev",
                "dependencies": [
                    "urn:pulumi:dev::azure-drunk-aks::azuread:index/servicePrincipal:ServicePrincipal::dev-drunk-aks"
                ],
                "provider": "urn:pulumi:dev::azure-drunk-aks::pulumi:providers:pulumi-nodejs::default::16112b54-df04-4a88-8f97-ab00111abe86",
                "propertyDependencies": {
                    "__provider": null,
                    "contentType": null,
                    "name": null,
                    "value": [
                        "urn:pulumi:dev::azure-drunk-aks::azuread:index/servicePrincipal:ServicePrincipal::dev-drunk-aks"
                    ],
                    "vaultInfo": null
                }
            },
            {
                "urn": "urn:pulumi:dev::azure-drunk-aks::azuread:index/servicePrincipalPassword:ServicePrincipalPassword::dev-drunk-aks",
                "custom": true,
                "id": "4890c558-da30-4536-9fbd-548595e58726/password/ce0d2663-5017-fdf0-85d8-460f4046f134",
                "type": "azuread:index/servicePrincipalPassword:ServicePrincipalPassword",
                "inputs": {
                    "__defaults": [],
                    "displayName": "dev-drunk-aks",
                    "endDateRelative": "43800h",
                    "servicePrincipalId": "4890c558-da30-4536-9fbd-548595e58726"
                },
                "outputs": {
                    "__meta": "{\"schema_version\":\"1\"}",
                    "description": "dev-drunk-aks",
                    "displayName": "dev-drunk-aks",
                    "endDate": "2027-01-18T03:46:29Z",
                    "endDateRelative": "43800h",
                    "id": "4890c558-da30-4536-9fbd-548595e58726/password/ce0d2663-5017-fdf0-85d8-460f4046f134",
                    "keyId": "ce0d2663-5017-fdf0-85d8-460f4046f134",
                    "servicePrincipalId": "4890c558-da30-4536-9fbd-548595e58726",
                    "startDate": "2022-01-19T03:46:30Z",
                    "value": {
                        "4dabf18193072939515e22adb298388d": "1b47061264138c4ac30d75fd1eb44270",
                        "ciphertext": "AAABAHmI3UGtC4O664PeQG+EL4hO7iXsQo3dQ+Fem+GYmKJqDa+UFK5IKvBXGqfSIGO8MdMB7vpw69j3XuI9G3TVcqLG6JGcUWADPTu6eSzX0t0RlBl3bznJ7P9c3EDTngiH"
                    }
                },
                "parent": "urn:pulumi:dev::azure-drunk-aks::pulumi:pulumi:Stack::azure-drunk-aks-dev",
                "dependencies": [
                    "urn:pulumi:dev::azure-drunk-aks::azuread:index/servicePrincipal:ServicePrincipal::dev-drunk-aks"
                ],
                "provider": "urn:pulumi:dev::azure-drunk-aks::pulumi:providers:azuread::default_5_17_0::15a9860d-4a84-4945-8c53-185b73278ccf",
                "propertyDependencies": {
                    "displayName": null,
                    "endDateRelative": null,
                    "servicePrincipalId": [
                        "urn:pulumi:dev::azure-drunk-aks::azuread:index/servicePrincipal:ServicePrincipal::dev-drunk-aks"
                    ]
                }
            },
            {
                "urn": "urn:pulumi:dev::azure-drunk-aks::azure-native:authorization:RoleAssignment::dev-drunk-aks-acr-pull-AcrPull",
                "custom": true,
                "id": "/subscriptions/f146579d-929c-4f4b-a742-b4ad6ab9ef27/providers/Microsoft.Authorization/roleAssignments/364ef7c4-0c8c-46e3-8e12-baedb53b060b",
                "type": "azure-native:authorization:RoleAssignment",
                "inputs": {
                    "__createBeforeDelete": true,
                    "principalId": "4890c558-da30-4536-9fbd-548595e58726",
                    "principalType": "ServicePrincipal",
                    "roleAssignmentName": "364ef7c4-0c8c-46e3-8e12-baedb53b060b",
                    "roleDefinitionId": "/subscriptions/f146579d-929c-4f4b-a742-b4ad6ab9ef27/providers/Microsoft.Authorization/roleDefinitions/7f951dda-4ed3-4680-a7ca-43fe172d538d",
                    "scope": "/subscriptions/f146579d-929c-4f4b-a742-b4ad6ab9ef27"
                },
                "outputs": {
                    "__inputs": {
                        "4dabf18193072939515e22adb298388d": "1b47061264138c4ac30d75fd1eb44270",
                        "ciphertext": "AAABAN+eAtagbQEPGE4sSxjBQh48YUdikSf7kLlvxdJuNR0eFjs7PhtJv/ka2zU+G4sXka0vkDgUAI/yHWUROxddk4xxP6ASeyxa86X9JYMoztvdYjGU2VMC9RKwlyJkhEWw0mghvH+ucWjXDbb3YaTqgnu5h3d7qWtvUQIGRpCHtet489psX5EUMZoCydqlxE0AQWlvp35M68Vzrb8Owe8iOjGkGanTPt4POOX2lUgmtLsPZMgxvLOIYzTAw1ky10Ncp/+SGZ/i6CEXW96jxP/hJFQNLCabdDVHIJSIpe4L2/YQKCQ+HxFDVPIb+TJKd5uV0CP+98sxcI6+IAaqo/18L9v0scbR9327K4J2LONQryF8UZ/wZi6n5w+zPUTsgoXfrhhjZNNLUPCjty1YvykX652D7215QXkK+o7eaxY5tkO1mysCyvs+vFszhEWAbikmTRtls4bMLahvpm3oRix1TQVhDBkuZvjv8DponDpFYZ+OCISlhDUvBsfYu2evb6BNCfhZKO1Yg4ps8CLilD/q854YorVVTLbkXiTiDVoesRDf3tXGBVxvn/EVRcE="
                    },
                    "createdBy": "188d4296-025a-4042-88f1-c530057efc2d",
                    "createdOn": "2021-10-19T05:14:57.3229151Z",
                    "id": "/subscriptions/f146579d-929c-4f4b-a742-b4ad6ab9ef27/providers/Microsoft.Authorization/roleAssignments/364ef7c4-0c8c-46e3-8e12-baedb53b060b",
                    "name": "364ef7c4-0c8c-46e3-8e12-baedb53b060b",
                    "principalId": "4890c558-da30-4536-9fbd-548595e58726",
                    "principalType": "ServicePrincipal",
                    "roleDefinitionId": "/subscriptions/f146579d-929c-4f4b-a742-b4ad6ab9ef27/providers/Microsoft.Authorization/roleDefinitions/7f951dda-4ed3-4680-a7ca-43fe172d538d",
                    "scope": "/subscriptions/f146579d-929c-4f4b-a742-b4ad6ab9ef27",
                    "type": "Microsoft.Authorization/roleAssignments",
                    "updatedBy": "188d4296-025a-4042-88f1-c530057efc2d",
                    "updatedOn": "2021-10-19T05:14:57.3229151Z"
                },
                "parent": "urn:pulumi:dev::azure-drunk-aks::pulumi:pulumi:Stack::azure-drunk-aks-dev",
                "dependencies": [
                    "urn:pulumi:dev::azure-drunk-aks::azuread:index/servicePrincipal:ServicePrincipal::dev-drunk-aks"
                ],
                "provider": "urn:pulumi:dev::azure-drunk-aks::pulumi:providers:azure-native::default_1_58_0::e02a3ad2-7910-460b-ba9d-c2f29e3506c9",
                "propertyDependencies": {
                    "principalId": [
                        "urn:pulumi:dev::azure-drunk-aks::azuread:index/servicePrincipal:ServicePrincipal::dev-drunk-aks"
                    ],
                    "principalType": null,
                    "roleDefinitionId": null,
                    "scope": null
                },
                "aliases": [
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:authorization/v20150701:RoleAssignment::dev-drunk-aks-acr-pull-AcrPull",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:authorization/v20171001preview:RoleAssignment::dev-drunk-aks-acr-pull-AcrPull",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:authorization/v20180101preview:RoleAssignment::dev-drunk-aks-acr-pull-AcrPull",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:authorization/v20180901preview:RoleAssignment::dev-drunk-aks-acr-pull-AcrPull",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:authorization/v20200301preview:RoleAssignment::dev-drunk-aks-acr-pull-AcrPull",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:authorization/v20200401preview:RoleAssignment::dev-drunk-aks-acr-pull-AcrPull",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:authorization/v20200801preview:RoleAssignment::dev-drunk-aks-acr-pull-AcrPull",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:authorization/v20201001preview:RoleAssignment::dev-drunk-aks-acr-pull-AcrPull"
                ]
            },
            {
                "urn": "urn:pulumi:dev::azure-drunk-aks::azure-native:authorization:RoleAssignment::dev-drunk-aks-contributor-Contributor",
                "custom": true,
                "id": "/subscriptions/f146579d-929c-4f4b-a742-b4ad6ab9ef27/resourceGroups/dev-aks-grp-drunk/providers/Microsoft.Authorization/roleAssignments/a722f3e0-5e28-4d6a-809b-ee61ca335efc",
                "type": "azure-native:authorization:RoleAssignment",
                "inputs": {
                    "__createBeforeDelete": true,
                    "principalId": "4890c558-da30-4536-9fbd-548595e58726",
                    "principalType": "ServicePrincipal",
                    "roleAssignmentName": "a722f3e0-5e28-4d6a-809b-ee61ca335efc",
                    "roleDefinitionId": "/subscriptions/f146579d-929c-4f4b-a742-b4ad6ab9ef27/providers/Microsoft.Authorization/roleDefinitions/b24988ac-6180-42a0-ab88-20f7382dd24c",
                    "scope": "/subscriptions/f146579d-929c-4f4b-a742-b4ad6ab9ef27/resourceGroups/dev-aks-grp-drunk"
                },
                "outputs": {
                    "__inputs": {
                        "4dabf18193072939515e22adb298388d": "1b47061264138c4ac30d75fd1eb44270",
                        "ciphertext": "AAABAJA2lUHt91+Vqqy0E8GL+fk8qLQWSLVT8PDB9741LfSW/rKOwrJ6bxMO55mcHV3ajIJBSyTiqO24sQfXqcZ0s9wrSLfyLzKmkspFBzrx/SfMZhYZSo2twXX8LAlej7AZIxwVGQcK19Ode4Qf77LE7ipnX5yE2vA7VcZ03HZLmvGBJTmsm52l8U9KQ61vdp4EzpFWNx6nwleHX5ywskYUZgOjBGqZx+9U1u94nmr0Jym+s08/Z2dgYu8C65986z2qGGsz8zTWmtGTbDmzj8MC2oomf1C5pJ62cR/pfb8T/IhBJ5ahEfTYW0UqR3wEdYNo+3Iz/PNIfhplYJjf9lhziG9qS6phVs8kXD529x9cLWTTQnkocGIw8Ct9euZJkdpCbklxfq69Wv5HW/Z0OdvNpajkYIjSEzhNz+yhQdOdQK/vmD5o7RUupTd1IPMh3DgyNwAVzeIcRm8bMnaDawXRHDrVhSSdOw1S2jsN0HSaBLM76UGkxz9ZJJuzYh56Ry8IqQ2WgAF5LM3ZBTNVek4eAGcaggRFEG3XYGMKVd3Lbfr1LyxNVP4FDuKoCm9yoY4Bx1vg2CwtfVVUUgqNNd+WsfqrtKN3CrdH4GlhleY="
                    },
                    "createdBy": "188d4296-025a-4042-88f1-c530057efc2d",
                    "createdOn": "2021-10-19T05:15:01.3294282Z",
                    "id": "/subscriptions/f146579d-929c-4f4b-a742-b4ad6ab9ef27/resourceGroups/dev-aks-grp-drunk/providers/Microsoft.Authorization/roleAssignments/a722f3e0-5e28-4d6a-809b-ee61ca335efc",
                    "name": "a722f3e0-5e28-4d6a-809b-ee61ca335efc",
                    "principalId": "4890c558-da30-4536-9fbd-548595e58726",
                    "principalType": "ServicePrincipal",
                    "roleDefinitionId": "/subscriptions/f146579d-929c-4f4b-a742-b4ad6ab9ef27/providers/Microsoft.Authorization/roleDefinitions/b24988ac-6180-42a0-ab88-20f7382dd24c",
                    "scope": "/subscriptions/f146579d-929c-4f4b-a742-b4ad6ab9ef27/resourceGroups/dev-aks-grp-drunk",
                    "type": "Microsoft.Authorization/roleAssignments",
                    "updatedBy": "188d4296-025a-4042-88f1-c530057efc2d",
                    "updatedOn": "2021-10-19T05:15:01.3294282Z"
                },
                "parent": "urn:pulumi:dev::azure-drunk-aks::pulumi:pulumi:Stack::azure-drunk-aks-dev",
                "dependencies": [
                    "urn:pulumi:dev::azure-drunk-aks::azuread:index/servicePrincipal:ServicePrincipal::dev-drunk-aks"
                ],
                "provider": "urn:pulumi:dev::azure-drunk-aks::pulumi:providers:azure-native::default_1_58_0::e02a3ad2-7910-460b-ba9d-c2f29e3506c9",
                "propertyDependencies": {
                    "principalId": [
                        "urn:pulumi:dev::azure-drunk-aks::azuread:index/servicePrincipal:ServicePrincipal::dev-drunk-aks"
                    ],
                    "principalType": null,
                    "roleDefinitionId": null,
                    "scope": null
                },
                "aliases": [
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:authorization/v20150701:RoleAssignment::dev-drunk-aks-contributor-Contributor",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:authorization/v20171001preview:RoleAssignment::dev-drunk-aks-contributor-Contributor",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:authorization/v20180101preview:RoleAssignment::dev-drunk-aks-contributor-Contributor",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:authorization/v20180901preview:RoleAssignment::dev-drunk-aks-contributor-Contributor",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:authorization/v20200301preview:RoleAssignment::dev-drunk-aks-contributor-Contributor",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:authorization/v20200401preview:RoleAssignment::dev-drunk-aks-contributor-Contributor",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:authorization/v20200801preview:RoleAssignment::dev-drunk-aks-contributor-Contributor",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:authorization/v20201001preview:RoleAssignment::dev-drunk-aks-contributor-Contributor"
                ]
            },
            {
                "urn": "urn:pulumi:dev::azure-drunk-aks::pulumi:providers:azure-native::default_1_33_0",
                "custom": true,
                "id": "33a2a7a8-f510-4fb7-8a71-fa5966d30b3a",
                "type": "pulumi:providers:azure-native",
                "inputs": {
                    "location": "Southeast Asia",
                    "version": "1.33.0"
                },
                "outputs": {
                    "location": "Southeast Asia",
                    "version": "1.33.0"
                }
            },
            {
                "urn": "urn:pulumi:dev::azure-drunk-aks::pulumi:providers:random::default_4_2_0",
                "custom": true,
                "id": "f7a77617-4321-4199-ae9e-f460df95850b",
                "type": "pulumi:providers:random",
                "inputs": {
                    "version": "4.2.0"
                },
                "outputs": {
                    "version": "4.2.0"
                }
            },
            {
                "urn": "urn:pulumi:dev::azure-drunk-aks::pulumi:providers:azuread::default_4_3_0",
                "custom": true,
                "id": "1abda2f3-2255-4b9b-809c-82165b2e8e54",
                "type": "pulumi:providers:azuread",
                "inputs": {
                    "version": "4.3.0"
                },
                "outputs": {
                    "version": "4.3.0"
                }
            },
            {
                "urn": "urn:pulumi:dev::azure-drunk-aks::random:index/randomPassword:RandomPassword::dev-drunk-aks-clientsecret-pwd",
                "custom": true,
                "id": "none",
                "type": "random:index/randomPassword:RandomPassword",
                "inputs": {
                    "__defaults": [],
                    "keepers": {
                        "__defaults": [],
                        "keepKey": "-.2022"
                    },
                    "length": 50,
                    "lower": true,
                    "minLower": 4,
                    "minNumeric": 4,
                    "minSpecial": 4,
                    "minUpper": 4,
                    "number": true,
                    "overrideSpecial": "#%\u0026*+-/:\u003c\u003e?^_|~",
                    "special": true,
                    "upper": true
                },
                "outputs": {
                    "id": "none",
                    "keepers": {
                        "keepKey": "-.2022"
                    },
                    "length": 50,
                    "lower": true,
                    "minLower": 4,
                    "minNumeric": 4,
                    "minSpecial": 4,
                    "minUpper": 4,
                    "number": true,
                    "overrideSpecial": "#%\u0026*+-/:\u003c\u003e?^_|~",
                    "result": {
                        "4dabf18193072939515e22adb298388d": "1b47061264138c4ac30d75fd1eb44270",
                        "ciphertext": "AAABAFOmiK5peBPzTFjfBFXt6V+GgwPBQXKQmDD6wOt2y597uSfqP1jZG+DHi5S62YOCBVoaKT7D4C3sBFwwkh5fqqioFdDzMS8cvFTwXHadfFwQFP75AtGOH3dXalqtC4IRhNyjEWE="
                    },
                    "special": true,
                    "upper": true
                },
                "parent": "urn:pulumi:dev::azure-drunk-aks::pulumi:pulumi:Stack::azure-drunk-aks-dev",
                "provider": "urn:pulumi:dev::azure-drunk-aks::pulumi:providers:random::default_4_2_0::f7a77617-4321-4199-ae9e-f460df95850b",
                "propertyDependencies": {
                    "keepers": null,
                    "length": null,
                    "lower": null,
                    "minLower": null,
                    "minNumeric": null,
                    "minSpecial": null,
                    "minUpper": null,
                    "number": null,
                    "overrideSpecial": null,
                    "special": null,
                    "upper": null
                }
            },
            {
                "urn": "urn:pulumi:dev::azure-drunk-aks::azure-native:containerservice:ManagedCluster::dev-drunk-aks",
                "custom": true,
                "id": "/subscriptions/f146579d-929c-4f4b-a742-b4ad6ab9ef27/resourcegroups/dev-aks-grp-drunk/providers/Microsoft.ContainerService/managedClusters/dev-drunk-aks",
                "type": "azure-native:containerservice:ManagedCluster",
                "inputs": {
                    "aadProfile": {
                        "adminGroupObjectIDs": [
                            "1f53b23e-6b23-47dc-b197-6efacf8f222c"
                        ],
                        "enableAzureRBAC": true,
                        "managed": true,
                        "tenantID": "a43302d1-4dce-481d-b034-a38776605989"
                    },
                    "addonProfiles": {
                        "aciConnectorLinux": {
                            "enabled": false
                        },
                        "azureKeyvaultSecretsProvider": {
                            "enabled": false
                        },
                        "azurePolicy": {
                            "enabled": true
                        },
                        "httpApplicationRouting": {
                            "enabled": false
                        },
                        "ingressApplicationGateway": {
                            "enabled": false
                        },
                        "kubeDashboard": {
                            "enabled": false
                        },
                        "omsAgent": {
                            "config": {
                                "logAnalyticsWorkspaceResourceID": "/subscriptions/f146579d-929c-4f4b-a742-b4ad6ab9ef27/resourcegroups/global-logs-grp-drunk/providers/microsoft.operationalinsights/workspaces/global-drunk-logs-log"
                            },
                            "enabled": true
                        }
                    },
                    "agentPoolProfiles": [
                        {
                            "count": 1,
                            "enableAutoScaling": true,
                            "enableFIPS": false,
                            "enableNodePublicIP": false,
                            "kubeletDiskType": "OS",
                            "maxCount": 3,
                            "maxPods": 50,
                            "minCount": 1,
                            "mode": "System",
                            "name": "sys",
                            "nodeLabels": {
                                "environment": "dev",
                                "stack": "dev"
                            },
                            "orchestratorVersion": "1.21.2",
                            "osDiskSizeGB": 128,
                            "osDiskType": "Managed",
                            "osSKU": "Ubuntu",
                            "osType": "Linux",
                            "tags": {
                                "environment": "dev",
                                "mode": "System"
                            },
                            "type": "VirtualMachineScaleSets",
                            "vmSize": "Standard_B2s",
                            "vnetSubnetID": "/subscriptions/f146579d-929c-4f4b-a742-b4ad6ab9ef27/resourceGroups/dev-aks-grp-drunk/providers/Microsoft.Network/virtualNetworks/dev-aks-vnt/subnets/aks"
                        }
                    ],
                    "apiServerAccessProfile": {
                        "authorizedIPRanges": [],
                        "enablePrivateCluster": false
                    },
                    "autoScalerProfile": {
                        "balanceSimilarNodeGroups": "false",
                        "expander": "random",
                        "maxEmptyBulkDelete": "10",
                        "maxGracefulTerminationSec": "600",
                        "maxNodeProvisionTime": "15m",
                        "maxTotalUnreadyPercentage": "45",
                        "newPodScaleUpDelay": "0s",
                        "okTotalUnreadyCount": "3",
                        "scaleDownDelayAfterAdd": "30m",
                        "scaleDownDelayAfterDelete": "60s",
                        "scaleDownDelayAfterFailure": "10m",
                        "scaleDownUnneededTime": "10m",
                        "scaleDownUnreadyTime": "20m",
                        "scaleDownUtilizationThreshold": "0.5",
                        "scanInterval": "60s",
                        "skipNodesWithLocalStorage": "false",
                        "skipNodesWithSystemPods": "true"
                    },
                    "dnsPrefix": "dev-drunk-aks",
                    "enableRBAC": true,
                    "kubernetesVersion": "1.21.2",
                    "linuxProfile": {
                        "adminUsername": "admindev-drunk-",
                        "ssh": {
                            "publicKeys": [
                                {
                                    "keyData": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDyssiEKxILQGnwf1SFz00+Ih+wOUCWIN9nLiHKYyLAgMEtYUPOu19yXuQsyyTcsUgsDQRoRFn1RBFlxYOAkMSudNn9s8r9grOI8XZGl95cTY+cuyHEJphiaNc+w+opFZqZJXVkZR/BOpNfUotIDIkaTog8yUjlYw0dD7MdWBwLmZhflUr+b54x2r4HiB6j7DJ9hfPYWEKYG1XjP3nhFAvShsfb7/EN1gxf+ohFlWmpU+h9Y96zMKJLaDqz976h+nu1LvcxGKbq9u9HU+TI3REWt3JPiARUk4kTBzomS+d0kxXcHpgTehNPEIAkpMwp0eO5/sC8whhMs8JyP2vk4UQ3Ibqmd2yGSrQz1vFkqXztvi7tnqZgMb1vyEBhHUNxct7YCjZ1tnOw+hYstOGg+Y3t7hb3pNAXfSpFQZw6kBWGEsFvbeavw0zv5rrGmyTpKkeOnbrtn+DqGge3Ymt5t/w+nFyrk9OET/B4BOGKmjqNm3dYQGdV3Q6hgprvQLzfFjvLAYvRWMz4/Ri679jXGecadMZUFX8F9kgIdlQFu2PsCYTimXv6hdU5w3IY74u+veqN287aQ5qO/XEJPyfd9qVoOtZ/yS5fhe92p4X+YKhvDxtjEQCenuPZra8/ap/qc5+fVOmU+Kf7qkG0/3b5IsBR7E33h37x7t2jgQYZ6DD0sQ== "
                                }
                            ]
                        }
                    },
                    "location": "southeastasia",
                    "networkProfile": {
                        "dnsServiceIP": "10.0.0.10",
                        "dockerBridgeCidr": "172.17.0.1/16",
                        "loadBalancerProfile": {
                            "outboundIPs": {
                                "publicIPs": [
                                    {
                                        "id": "/subscriptions/f146579d-929c-4f4b-a742-b4ad6ab9ef27/resourceGroups/dev-aks-grp-drunk/providers/Microsoft.Network/publicIPAddresses/dev-aks-ip"
                                    }
                                ]
                            }
                        },
                        "loadBalancerSku": "Standard",
                        "networkMode": "transparent",
                        "networkPlugin": "azure",
                        "networkPolicy": "azure",
                        "outboundType": "loadBalancer",
                        "serviceCidr": "10.0.0.0/16"
                    },
                    "nodeResourceGroup": "dev-drunk-aks-nodes",
                    "resourceGroupName": "dev-aks-grp-drunk",
                    "resourceName": "dev-drunk-aks",
                    "servicePrincipalProfile": {
                        "clientId": "d1ea279e-241d-4e73-ab22-222dc3489018",
                        "secret": {
                            "4dabf18193072939515e22adb298388d": "1b47061264138c4ac30d75fd1eb44270",
                            "ciphertext": "AAABAHYsgLgZLmvcby1vCpiWHCf4BNf9gefNYBOk5tguFt1bulOH64ngToaNgOfg1cxXlZ1reWD/P6XXLbH2wPY7ykSRxXFXsAL9Z/OlRBGZoPVykuvz+wW1N1UJx+t9u0n/ApXXhGY="
                        }
                    },
                    "sku": {
                        "name": "Basic",
                        "tier": "Free"
                    }
                },
                "outputs": {
                    "__inputs": {
                        "4dabf18193072939515e22adb298388d": "1b47061264138c4ac30d75fd1eb44270",
                        "ciphertext": "AAABAK6yUZm/4ouRZB+uKpc4aUVP6j+UcbvKa2A4g2PIEXHjsXu8QGfl1/r/n87NElID1mgbjjfmmeNCEKdCvsUlc90+YuP7x5n3h2txsNt99U7KHTadUyCrXIEgzZvf+qPwKLOLavz0Z7ywmrXl8JV6iy/ijMqK4BWln0uvldM116L06pvn+PRybAboOTxNCa9qAeogjWj6HCNFlW7EhyMtsJG86vopCTEDZMu6VdATypcoejXtyVaIq3wEoFaOQAUSJbQn53LpnUfIFSAnds5klcLDQoSMO37fzhbmU/cRc5d5lWHn17pCoI9tCT4qm3DrRUO85bQh0yS5kWtC/JIppN25dWasl43AGxHq7lhXRmE+aodDABWtRmGoM4wH5OdjhoB2+eJTLQ90yklWJQHoJWY7Qeju5bnJhJRqzpokgehQdDqgf0iaXnpJXlCKVNSCv3DjP9Gp0cf0i29t0k2P2dzoXDunwEv0Mcj5msPsKvtSBQ1YeQ97E5QFY+kUvg7CwwfykNzjOPM5sfUbqRqk0OJqskLashC1MHeSahEHeBrjir+I3wCea1dVuFs/jA6eT63gUKAHo2Psd0aUpgKPHxDbaZWANjNUFoTnKL7uMDnAXk5GVk/0K5EKHkuKSHWMyJwbkGKOTO7LJGRVnQ6nuOEzRcwnRNqQKzkWcKb9oScBFgotQlnlpYZpa0gQSFeFrBjg+grxmoMHXmbvslPfBiHwHjOGCynttdycFAJD8KYR76zdmN0SHk/5NS2kr/xeII0okgIltaeLdg2pcvT8NwtLWiRaSuAuKWje0fxCAEomhcyWnye8UhDK+uj30gAgunhXV1i0MVYbDO424sgTVaO9zDZ4sm32gnbKDEq0srj6S5wFF5HWXEVgbu1+KHsclrwbEVAnijRmW48QNQiVr/fHVZ2CwOkiCjdesXBhL+DWgpPLVZFnVJqAqqXz2sr5PPADZudg+2bwePAJB/i0qxxtajtpu3XMrtdq9hDeRVYbxKuuFjZidmgaPxFU3qWj+5gAsFhLgo+SsQr4TzUC1aFXVJjR5bwzSaPklCAmE88L8wIizwj8YY1Xa4UAHi+B2dHLIO9X5Lp72OoWtjele5x9KbjK+eKjWGOmithMJCFwttzMUunxCOHnG8fSw3sfqhWKWvDVTMBfzWuWJ64gNzvHWoxoVq/72l7XXnOXZQLwzPDsAIYNjSlrx4wI9Jj/GXVgzIWvT9/b7+2SBmzibgeQ3uqXaSxgX0aQn6bXnvbBerwGKUhbuQ9/CK1M5tMjXsZIEiawxSa14qsHcrLChYM7HL4OSTMBnTMJE5wvrjlrwIhan72bECMMlUNY40X5iutSmR7cr3MlSPLArNfM0zPMHU980s3QDdVKDZN2mbQ3xUAXSdiKwLpRsr/Zr0voTgrafv1DUsrLg5CG3tA9A/A8LlJKi8iYd+yW2ini11c90U3rai6XeCIic5phWjAHR5DJyb7+VK3mYBcILTvmjVifNjmNJXmlrpH00XQgHdkIFqRJg247T0lFzC0Y2eLOELx8E5vblmDXNUgAGpayQYFbod76IgwBGFpa7uu3Q3qhlGQ3pA9wbyXUWjGUSqmLsFnL++rTiQ55zOAz//Dr6X98CJ8hFcPob8SW42Cc32GZjsZvqj3u0uernY7zFVVhaOu7nk7gGzPyOyEcPF3c5c0caBuRXf9G04s1/VTdCLyN8CEONHxUOFW20gfm10gO2i7ZyTsjghXD76e4F/ghD8cPnTX/T1PeCrXOeurdAz452iV4rldZu9SY0WMkhYQnN1JYwx9XAf3coyLbPt2+nCX+4YB3PQVrbTUSlKQG2RrRv+ayo4gKktkEdGuAylqax9407lZ3Df30hhFHyg5Wb0FpXeT3Ss6pGKR0GCpbTcst6o7tLUdTqWHIU86T8IT9hUixB2y0BilSRnY8OTvS1r5EyjnZra2L5SHDLxsrQ88pgdL1HCQCQYhBYS9H/7JlJ5OQd5PMvDD+sx7LuuLIBB6h/xGATp2UFN+921YxdHJqUxePBdH255DAzmis3yOBS/flN0oBSJGHVoLXRLfFysYUflHzwVefZ+6YJDAqD8lZM/xsR4qoMPUxTH8x03VqBsZb04p3DF9PwP7I1FXXkIrcOKgfE6Ns9a/yDPNs5zFXftfbM1G7hL0P11pkopF+oQOO+yolDqYwogCk02KajLGydvnt/e1XTd1wz+9Rv+txV+z4lJcZ7NPDwI0sa2JBFWltaJHYL6p1aTxuQU59VzvBQgGp6q8h7HlMGt3w6ZGbSjEkRokRG4fDboD7/Rgi0KsVSZBPx6XlD/z3t4m1DZGB4BAA9rstSv8UaBD30xdC3R8tYokTbsU2l83QR+wqxkwHgE5/6XJfdxfC85kjeapvkfWZQGKpBGRVVuWJP1GVl98Xe7w2Ai4D4YrcyEPyV9EzOFd/CiIDsu6eVQDnGa2EghosI81tZMo1YQH44OCpB45gyAnOrxPAw/aiaC+LWUJW61Tt+ZZbKYvdefrdiHJwnjmKShkDUnhqNAyHso0qVKJzE1UhLi2QRMlZwnoJtv3LCMBO4b480vRkO6nzgWw+V/fhxq6Os02U9e7RYDoUU40PcONCLcsN6Par48QxPXQc+wano9SqEDYuaytmUscdv+7+sX/cyjjXRV7BSXnzdRkayzo2rjRbc1BF2ggviQmZ5U9CEzuqKyVoj/5pczCfHV3wFAgLPrYkVkP0qpdQiKuONHWcWz8SJ/aoIribBFxjwks0RkGfGQiejWWzGGqWaoyG7K3+GnVhDWuZqybBNfD84avacYDK4/a4sdUVeJPPPvmg7Yk5LvBZozCrgVA6qsdY+5FrUhcR6JYcoXhkPPLPZTDizXGz+tZ7h3A9vzmr9vnuUl3kRKUil9A6WFAs8xdrUWlsa/TpLG9xtZ/l0qTZH7gQZgKkc7S6TYF6vLCTBQ7GwTxmst38XocgNd5kbslK3De3Bu374QZH1Eya4gBM+xtqhArdw9zu4CQEKo+aTiNWDBbOfLqyx7XmvYuUBUEpVtowdH80J9amvIc0dqhViBnSt3553hx0HJ+Cxb1lQYO281DAcHSla+jVUtIECetxvHjbJBpzPjWzy0QQ8DFaSXQKzhFAt0+tryDLrRceOM3jTPID99cLG/KhO9EAjocjlv5/TiTFeM9mw8myX6iodDEP7nDHS6gBSELvnRsFI70hUjgRscdJkcJeP9szjGppMi3z6eY4u9lRckdWniwiRwbV+9ZaCXiAmWRGCAmYCzywGo6Wgva4DGFBAWl/+CDSOErXuems+6N3fzPoh8ieuiZfIXiMt8QSPReTU2s7KNqPSfXu9QHimEbDsKY0WVwgXB2zl3VKnsu9N6T+kwY0gq0pz5wzET/eMhji5GHn/uhe4ILHx1J7nw47B6A5SMObOyocrRDBTtZMBmkr+9xYvZV0aZL67T//QWr6tw0yN+gwphZqVPnYE9ZErHxb/DBxiRtGIoQmLoNGv6slgX1trVUzUqhZ/oSyRQSS6jw+mmimx4hQlxeNGaM+Ou2vlxUa9pADuqQba4cvgXtRsfmiAgHz3uz9KnkYMUYCZPR0qiE96YECXUfrlJYXYePXhqNCc4OdtAIlNL/RXRmV0ctYYO4JTlwXGQZl5IzpMZH1wWe/T4zO1+LcFZHQqziwHo/WrI+OJHEzkgEQVB3BnFCgcMUhjr2TELDdWPz0vK1N11BhQ6dJ2oKPxEd80BBkO5iLBNHt8g0sATM1CuPndkqW7QhCeMbcrJZzcfbX2Hr28DtvS+loNgjn5eEjPy5R9yT/0kZyBtUOt6K6N1rKaUN164POi8zZCvipJ8/r+wjSLjN6su7XMqkX7lYDzCpg3NMw0CIaWZMzyYvZhYspERoeridIUGLoUAtVSj9zPD85nnU5e0eIdtluwlzuvxh+jWOkReBQn+qBZXH87lRp8EBLG4kTr2tmLfgoZM3VxLq6owi578PF2ztN+iWhwLsaPVwBLuV2oz4OVVCd2uhEXGUa7jS94KM91TFGrjqVnJUKAy2v1ZUCWUNVuE/vkzVp0YLi18N0sJ0Y5vNJ5Vxn2aPjHof6f7gCvxs+ZSzzDkOSHntvz0LOxW92QX6D/K4WNZuWXdZLliqV5f7cTFBC+kngQBud2E0cYbRY49tVN+jlMjktahcYOwvC6i8XKROG2C3ZHrWGYVAcIIJmv0eP4IJXQPS9rbc/jiGYILYlBgQ/eTu3+Bi7JnNGieEeFa1jgZjq4n6+pskbOIwjq9viCeIbQMwjifNGMDxtjptiPcarWbVoImWXgxgIiasbyeX982kDVrrBoirhhAp9HYUrVWhduf9VHeuZIplzJ5Xc+oSFdWNMngxzesqBXJ8vOEI52Ylxdk/NGehHG9nj/BidNKeFjSKAtnlc0m8+6Gvc2L5+zid/O4pGaZJh+eI1YXyAelAGtlRa/dcmo14bhkt0kpZh1q5LiOf88fWqEeQuLEuxd6bXEtvzfjhF6zLbOp3dNc+AbYkVeuwes1cqR0fZBSEvhy92ChU3TLl9PDUolkHxThdoYqe+Arpr//0nK0WgdVWspy8KDjE3cIsNkoiiJla64SfrDhzEM1aVzEvIQlZMcwvI97T0Iq6jdnQ6CASaQZR92EwiXlOu5DXd9Oy6UEgxXQjMo/BaDIo4hRY9P2R0J9lcwZ3J4rbL+U7p789O9rCzuXGOtm3OIQ3W7UUYZeQQJKz1QVWuKKkQ0EscEZ/Qj4NPaYysgrCAFIBhxGbN9ob3O/NVR8MYMxMVtOc5KLg3LSIvLtfgO4dyBA1Lo6OC5VddkIBG"
                    },
                    "aadProfile": {
                        "adminGroupObjectIDs": [
                            "1f53b23e-6b23-47dc-b197-6efacf8f222c"
                        ],
                        "enableAzureRBAC": true,
                        "managed": true,
                        "tenantID": "a43302d1-4dce-481d-b034-a38776605989"
                    },
                    "addonProfiles": {
                        "aciConnectorLinux": {
                            "enabled": false
                        },
                        "azureKeyvaultSecretsProvider": {
                            "enabled": false
                        },
                        "azurePolicy": {
                            "enabled": true
                        },
                        "httpApplicationRouting": {
                            "enabled": false
                        },
                        "ingressApplicationGateway": {
                            "enabled": false
                        },
                        "kubeDashboard": {
                            "enabled": false
                        },
                        "omsAgent": {
                            "config": {
                                "logAnalyticsWorkspaceResourceID": "/subscriptions/f146579d-929c-4f4b-a742-b4ad6ab9ef27/resourcegroups/global-logs-grp-drunk/providers/microsoft.operationalinsights/workspaces/global-drunk-logs-log"
                            },
                            "enabled": true
                        }
                    },
                    "agentPoolProfiles": [
                        {
                            "count": 2,
                            "enableAutoScaling": true,
                            "enableFIPS": false,
                            "enableNodePublicIP": false,
                            "kubeletDiskType": "OS",
                            "maxCount": 3,
                            "maxPods": 50,
                            "minCount": 1,
                            "mode": "System",
                            "name": "sys",
                            "nodeImageVersion": "AKSUbuntu-1804gen2containerd-2022.01.07",
                            "nodeLabels": {
                                "environment": "dev",
                                "stack": "dev"
                            },
                            "orchestratorVersion": "1.21.2",
                            "osDiskSizeGB": 128,
                            "osDiskType": "Managed",
                            "osSKU": "Ubuntu",
                            "osType": "Linux",
                            "powerState": {
                                "code": "Running"
                            },
                            "provisioningState": "Succeeded",
                            "tags": {
                                "environment": "dev",
                                "mode": "System"
                            },
                            "type": "VirtualMachineScaleSets",
                            "vmSize": "Standard_B2s",
                            "vnetSubnetID": "/subscriptions/f146579d-929c-4f4b-a742-b4ad6ab9ef27/resourceGroups/dev-aks-grp-drunk/providers/Microsoft.Network/virtualNetworks/dev-aks-vnt/subnets/aks"
                        }
                    ],
                    "apiServerAccessProfile": {
                        "enablePrivateCluster": false
                    },
                    "autoScalerProfile": {
                        "balanceSimilarNodeGroups": "false",
                        "expander": "random",
                        "maxEmptyBulkDelete": "10",
                        "maxGracefulTerminationSec": "600",
                        "maxNodeProvisionTime": "15m",
                        "maxTotalUnreadyPercentage": "45",
                        "newPodScaleUpDelay": "0s",
                        "okTotalUnreadyCount": "3",
                        "scaleDownDelayAfterAdd": "30m",
                        "scaleDownDelayAfterDelete": "60s",
                        "scaleDownDelayAfterFailure": "10m",
                        "scaleDownUnneededTime": "10m",
                        "scaleDownUnreadyTime": "20m",
                        "scaleDownUtilizationThreshold": "0.5",
                        "scanInterval": "60s",
                        "skipNodesWithLocalStorage": "false",
                        "skipNodesWithSystemPods": "true"
                    },
                    "azurePortalFQDN": "dev-drunk-aks-410a2931.portal.hcp.southeastasia.azmk8s.io",
                    "dnsPrefix": "dev-drunk-aks",
                    "enableRBAC": true,
                    "fqdn": "dev-drunk-aks-410a2931.hcp.southeastasia.azmk8s.io",
                    "id": "/subscriptions/f146579d-929c-4f4b-a742-b4ad6ab9ef27/resourcegroups/dev-aks-grp-drunk/providers/Microsoft.ContainerService/managedClusters/dev-drunk-aks",
                    "kubernetesVersion": "1.21.2",
                    "linuxProfile": {
                        "adminUsername": "admindev-drunk-",
                        "ssh": {
                            "publicKeys": [
                                {
                                    "keyData": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDyssiEKxILQGnwf1SFz00+Ih+wOUCWIN9nLiHKYyLAgMEtYUPOu19yXuQsyyTcsUgsDQRoRFn1RBFlxYOAkMSudNn9s8r9grOI8XZGl95cTY+cuyHEJphiaNc+w+opFZqZJXVkZR/BOpNfUotIDIkaTog8yUjlYw0dD7MdWBwLmZhflUr+b54x2r4HiB6j7DJ9hfPYWEKYG1XjP3nhFAvShsfb7/EN1gxf+ohFlWmpU+h9Y96zMKJLaDqz976h+nu1LvcxGKbq9u9HU+TI3REWt3JPiARUk4kTBzomS+d0kxXcHpgTehNPEIAkpMwp0eO5/sC8whhMs8JyP2vk4UQ3Ibqmd2yGSrQz1vFkqXztvi7tnqZgMb1vyEBhHUNxct7YCjZ1tnOw+hYstOGg+Y3t7hb3pNAXfSpFQZw6kBWGEsFvbeavw0zv5rrGmyTpKkeOnbrtn+DqGge3Ymt5t/w+nFyrk9OET/B4BOGKmjqNm3dYQGdV3Q6hgprvQLzfFjvLAYvRWMz4/Ri679jXGecadMZUFX8F9kgIdlQFu2PsCYTimXv6hdU5w3IY74u+veqN287aQ5qO/XEJPyfd9qVoOtZ/yS5fhe92p4X+YKhvDxtjEQCenuPZra8/ap/qc5+fVOmU+Kf7qkG0/3b5IsBR7E33h37x7t2jgQYZ6DD0sQ== "
                                }
                            ]
                        }
                    },
                    "location": "southeastasia",
                    "maxAgentPools": 100,
                    "name": "dev-drunk-aks",
                    "networkProfile": {
                        "dnsServiceIP": "10.0.0.10",
                        "dockerBridgeCidr": "172.17.0.1/16",
                        "loadBalancerProfile": {
                            "effectiveOutboundIPs": [
                                {
                                    "id": "/subscriptions/f146579d-929c-4f4b-a742-b4ad6ab9ef27/resourceGroups/dev-aks-grp-drunk/providers/Microsoft.Network/publicIPAddresses/dev-aks-ip"
                                }
                            ],
                            "outboundIPs": {
                                "publicIPs": [
                                    {
                                        "id": "/subscriptions/f146579d-929c-4f4b-a742-b4ad6ab9ef27/resourceGroups/dev-aks-grp-drunk/providers/Microsoft.Network/publicIPAddresses/dev-aks-ip"
                                    }
                                ]
                            }
                        },
                        "loadBalancerSku": "Standard",
                        "networkMode": "transparent",
                        "networkPlugin": "azure",
                        "networkPolicy": "azure",
                        "outboundType": "loadBalancer",
                        "serviceCidr": "10.0.0.0/16"
                    },
                    "nodeResourceGroup": "dev-drunk-aks-nodes",
                    "powerState": {
                        "code": "Running"
                    },
                    "provisioningState": "Succeeded",
                    "servicePrincipalProfile": {
                        "clientId": "d1ea279e-241d-4e73-ab22-222dc3489018"
                    },
                    "sku": {
                        "name": "Basic",
                        "tier": "Free"
                    },
                    "type": "Microsoft.ContainerService/ManagedClusters",
                    "windowsProfile": {
                        "adminUsername": "azureuser",
                        "enableCSIProxy": true
                    }
                },
                "parent": "urn:pulumi:dev::azure-drunk-aks::pulumi:pulumi:Stack::azure-drunk-aks-dev",
                "dependencies": [
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network:PublicIPAddress::dev-aks-ip",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:network:VirtualNetwork::dev-aks-vnt",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:resources:ResourceGroup::dev-aks-grp-drunk",
                    "urn:pulumi:dev::azure-drunk-aks::azuread:index/application:Application::dev-drunk-aks",
                    "urn:pulumi:dev::azure-drunk-aks::azuread:index/applicationPassword:ApplicationPassword::dev-drunk-aks",
                    "urn:pulumi:dev::azure-drunk-aks::azuread:index/group:Group::ROL NON-PRD GLB DRUNK AKS-ADMIN",
                    "urn:pulumi:dev::azure-drunk-aks::random:index/randomString:RandomString::dev-drunk-ssh"
                ],
                "provider": "urn:pulumi:dev::azure-drunk-aks::pulumi:providers:azure-native::default_1_33_0::33a2a7a8-f510-4fb7-8a71-fa5966d30b3a",
                "propertyDependencies": {
                    "aadProfile": [
                        "urn:pulumi:dev::azure-drunk-aks::azuread:index/group:Group::ROL NON-PRD GLB DRUNK AKS-ADMIN"
                    ],
                    "addonProfiles": null,
                    "agentPoolProfiles": [
                        "urn:pulumi:dev::azure-drunk-aks::azure-native:network:VirtualNetwork::dev-aks-vnt"
                    ],
                    "apiServerAccessProfile": null,
                    "autoScalerProfile": null,
                    "dnsPrefix": null,
                    "enableRBAC": null,
                    "kubernetesVersion": null,
                    "linuxProfile": [
                        "urn:pulumi:dev::azure-drunk-aks::random:index/randomString:RandomString::dev-drunk-ssh"
                    ],
                    "location": [
                        "urn:pulumi:dev::azure-drunk-aks::azure-native:resources:ResourceGroup::dev-aks-grp-drunk"
                    ],
                    "networkProfile": [
                        "urn:pulumi:dev::azure-drunk-aks::azure-native:network:PublicIPAddress::dev-aks-ip"
                    ],
                    "nodeResourceGroup": null,
                    "resourceGroupName": null,
                    "resourceName": null,
                    "servicePrincipalProfile": [
                        "urn:pulumi:dev::azure-drunk-aks::azuread:index/application:Application::dev-drunk-aks",
                        "urn:pulumi:dev::azure-drunk-aks::azuread:index/applicationPassword:ApplicationPassword::dev-drunk-aks"
                    ],
                    "sku": null
                },
                "pendingReplacement": true,
                "aliases": [
                    "urn:pulumi:dev::azure-drunk-aks::azure-nextgen:containerservice:ManagedCluster::dev-drunk-aks",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:containerservice/v20170831:ManagedCluster::dev-drunk-aks",
                    "urn:pulumi:dev::azure-drunk-aks::azure-nextgen:containerservice/v20170831:ManagedCluster::dev-drunk-aks",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:containerservice/v20180331:ManagedCluster::dev-drunk-aks",
                    "urn:pulumi:dev::azure-drunk-aks::azure-nextgen:containerservice/v20180331:ManagedCluster::dev-drunk-aks",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:containerservice/v20180801preview:ManagedCluster::dev-drunk-aks",
                    "urn:pulumi:dev::azure-drunk-aks::azure-nextgen:containerservice/v20180801preview:ManagedCluster::dev-drunk-aks",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:containerservice/v20190201:ManagedCluster::dev-drunk-aks",
                    "urn:pulumi:dev::azure-drunk-aks::azure-nextgen:containerservice/v20190201:ManagedCluster::dev-drunk-aks",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:containerservice/v20190401:ManagedCluster::dev-drunk-aks",
                    "urn:pulumi:dev::azure-drunk-aks::azure-nextgen:containerservice/v20190401:ManagedCluster::dev-drunk-aks",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:containerservice/v20190601:ManagedCluster::dev-drunk-aks",
                    "urn:pulumi:dev::azure-drunk-aks::azure-nextgen:containerservice/v20190601:ManagedCluster::dev-drunk-aks",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:containerservice/v20190801:ManagedCluster::dev-drunk-aks",
                    "urn:pulumi:dev::azure-drunk-aks::azure-nextgen:containerservice/v20190801:ManagedCluster::dev-drunk-aks",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:containerservice/v20191001:ManagedCluster::dev-drunk-aks",
                    "urn:pulumi:dev::azure-drunk-aks::azure-nextgen:containerservice/v20191001:ManagedCluster::dev-drunk-aks",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:containerservice/v20191101:ManagedCluster::dev-drunk-aks",
                    "urn:pulumi:dev::azure-drunk-aks::azure-nextgen:containerservice/v20191101:ManagedCluster::dev-drunk-aks",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:containerservice/v20200101:ManagedCluster::dev-drunk-aks",
                    "urn:pulumi:dev::azure-drunk-aks::azure-nextgen:containerservice/v20200101:ManagedCluster::dev-drunk-aks",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:containerservice/v20200201:ManagedCluster::dev-drunk-aks",
                    "urn:pulumi:dev::azure-drunk-aks::azure-nextgen:containerservice/v20200201:ManagedCluster::dev-drunk-aks",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:containerservice/v20200301:ManagedCluster::dev-drunk-aks",
                    "urn:pulumi:dev::azure-drunk-aks::azure-nextgen:containerservice/v20200301:ManagedCluster::dev-drunk-aks",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:containerservice/v20200401:ManagedCluster::dev-drunk-aks",
                    "urn:pulumi:dev::azure-drunk-aks::azure-nextgen:containerservice/v20200401:ManagedCluster::dev-drunk-aks",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:containerservice/v20200601:ManagedCluster::dev-drunk-aks",
                    "urn:pulumi:dev::azure-drunk-aks::azure-nextgen:containerservice/v20200601:ManagedCluster::dev-drunk-aks",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:containerservice/v20200701:ManagedCluster::dev-drunk-aks",
                    "urn:pulumi:dev::azure-drunk-aks::azure-nextgen:containerservice/v20200701:ManagedCluster::dev-drunk-aks",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:containerservice/v20200901:ManagedCluster::dev-drunk-aks",
                    "urn:pulumi:dev::azure-drunk-aks::azure-nextgen:containerservice/v20200901:ManagedCluster::dev-drunk-aks",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:containerservice/v20201101:ManagedCluster::dev-drunk-aks",
                    "urn:pulumi:dev::azure-drunk-aks::azure-nextgen:containerservice/v20201101:ManagedCluster::dev-drunk-aks",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:containerservice/v20201201:ManagedCluster::dev-drunk-aks",
                    "urn:pulumi:dev::azure-drunk-aks::azure-nextgen:containerservice/v20201201:ManagedCluster::dev-drunk-aks",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:containerservice/v20210201:ManagedCluster::dev-drunk-aks",
                    "urn:pulumi:dev::azure-drunk-aks::azure-nextgen:containerservice/v20210201:ManagedCluster::dev-drunk-aks",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:containerservice/v20210301:ManagedCluster::dev-drunk-aks",
                    "urn:pulumi:dev::azure-drunk-aks::azure-nextgen:containerservice/v20210301:ManagedCluster::dev-drunk-aks",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:containerservice/v20210501:ManagedCluster::dev-drunk-aks",
                    "urn:pulumi:dev::azure-drunk-aks::azure-nextgen:containerservice/v20210501:ManagedCluster::dev-drunk-aks",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:containerservice/v20210701:ManagedCluster::dev-drunk-aks",
                    "urn:pulumi:dev::azure-drunk-aks::azure-nextgen:containerservice/v20210701:ManagedCluster::dev-drunk-aks",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:containerservice/v20210801:ManagedCluster::dev-drunk-aks",
                    "urn:pulumi:dev::azure-drunk-aks::azure-nextgen:containerservice/v20210801:ManagedCluster::dev-drunk-aks"
                ]
            },
            {
                "urn": "urn:pulumi:dev::azure-drunk-aks::pulumi-nodejs:dynamic:Resource::csp:VaultSecrets:dev-drunk-aks-principal-secret",
                "custom": true,
                "id": "https://global-drunk-vlt.vault.azure.net/secrets/drunk-aks-principal-secret/1ca908d57ab74dbdb7713dc5aa42fbc6",
                "type": "pulumi-nodejs:dynamic:Resource",
                "inputs": {
                    "__provider": "exports.handler = __f0;\n\nvar __provider_proto = {};\nObject.defineProperty(__f1, \"prototype\", { value: __provider_proto });\nObject.defineProperty(__provider_proto, \"constructor\", { configurable: true, writable: true, value: __f1 });\nvar __Base_1 = {};\nvar __f3_prototype = {};\nObject.defineProperty(__f3_prototype, \"constructor\", { configurable: true, writable: true, value: __f3 });\nObject.defineProperty(__f3_prototype, \"getCredentials\", { configurable: true, writable: true, value: __f4 });\nObject.defineProperty(__f3_prototype, \"getToken\", { configurable: true, writable: true, value: __f5 });\nObject.defineProperty(__f3, \"prototype\", { value: __f3_prototype });\nvar __m = {};\nObject.defineProperty(__m, \"__esModule\", { value: true });\n__m.ClientCredential = __f3;\nvar __f8_prototype = {};\nObject.defineProperty(__f8_prototype, \"constructor\", { configurable: true, writable: true, value: __f8 });\nObject.defineProperty(__f8_prototype, \"getCredentials\", { configurable: true, writable: true, value: __f9 });\nObject.defineProperty(__f8_prototype, \"signRequest\", { configurable: true, writable: true, value: __f10 });\nObject.defineProperty(__f8_prototype, \"getToken\", { configurable: true, writable: true, value: __f11 });\nObject.defineProperty(__f8, \"prototype\", { value: __f8_prototype });\n__m.InternalCredentials = __f8;\nObject.defineProperty(__Base_1, \"ClientCredential\", { enumerable: true, get: __f7 });\nObject.defineProperty(__provider_proto, \"getClient\", { configurable: true, writable: true, value: __f2 });\nObject.defineProperty(__provider_proto, \"tryGetDeletedSecret\", { configurable: true, writable: true, value: __f12 });\nObject.defineProperty(__provider_proto, \"tryRecoverSecret\", { configurable: true, writable: true, value: __f13 });\nObject.defineProperty(__provider_proto, \"create\", { configurable: true, writable: true, value: __f14 });\nObject.defineProperty(__provider_proto, \"update\", { configurable: true, writable: true, value: __f15 });\nObject.defineProperty(__provider_proto, \"delete\", { configurable: true, writable: true, value: __f16 });\nObject.defineProperty(__provider_proto, \"diff\", { configurable: true, writable: true, value: __f17 });\nvar __provider = Object.create(__provider_proto);\n__provider.name = \"dev-drunk-aks-principal-secret\";\n__provider._client = undefined;\n\nfunction __f1(__0) {\n  return (function() {\n    with({  }) {\n\nreturn function /*constructor*/(name) {\n        this.name = name;\n        this._client = undefined;\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f3() {\n  return (function() {\n    with({  }) {\n\nreturn function /*constructor*/() { };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f4() {\n  return (function() {\n    with({ native: require(\"@pulumi/azure-native/index.js\"), identity_1: require(\"@azure/identity/dist/index.js\") }) {\n\nreturn function /*getCredentials*/() {\n        if (this.credential)\n            return this.credential;\n        let clientID = native.config.clientId;\n        let clientSecret = native.config.clientSecret;\n        let tenantID = native.config.tenantId;\n        let subscriptionID = native.config.subscriptionId;\n        // If at least one of them is empty, try looking at the env vars.\n        if (!clientID || !clientSecret || !tenantID || !subscriptionID) {\n            //console.log('ClientCredential: getting auth info from ARM.');\n            clientID = process.env['ARM_CLIENT_ID'];\n            clientSecret = process.env['ARM_CLIENT_SECRET'];\n            tenantID = process.env['ARM_TENANT_ID'];\n            subscriptionID = process.env['ARM_SUBSCRIPTION_ID'];\n        }\n        if (tenantID \u0026\u0026 clientID \u0026\u0026 clientSecret) {\n            this.credential = new identity_1.ClientSecretCredential(tenantID, clientID, clientSecret);\n        }\n        return this.credential;\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f6(__0, __1, __2, __3) {\n  return (function() {\n    with({  }) {\n\nreturn function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f5(__0, __1) {\n  return (function() {\n    with({ __awaiter: __f6, msRestAzure: require(\"@azure/ms-rest-nodeauth/dist/lib/msRestNodeAuth.js\") }) {\n\nreturn function /*getToken*/(scopes, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const cre = this.getCredentials();\n            if (cre)\n                return cre.getToken(scopes, options);\n            const resource = Array.isArray(scopes) ? scopes[0] : scopes;\n            const token = yield msRestAzure.AzureCliCredentials.getAccessToken({\n                resource: resource.replace('/.default', ''),\n            });\n            return {\n                token: token.accessToken,\n                expiresOnTimestamp: 30,\n            };\n        });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f8() {\n  return (function() {\n    with({  }) {\n\nreturn function /*constructor*/() {\n        this.getCredentials();\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f9() {\n  return (function() {\n    with({ __awaiter: __f6, native: require(\"@pulumi/azure-native/index.js\"), msRestAzure: require(\"@azure/ms-rest-nodeauth/dist/lib/msRestNodeAuth.js\") }) {\n\nreturn function /*getCredentials*/() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.credentials)\n                return this.credentials;\n            let clientID = native.config.clientId;\n            let clientSecret = native.config.clientSecret;\n            this.tenantID = native.config.tenantId;\n            this.subscriptionID = native.config.subscriptionId;\n            // If at least one of them is empty, try looking at the env vars.\n            if (!clientID || !clientSecret || !this.tenantID || !this.subscriptionID) {\n                //console.log('ClientCredential: getting auth info from ARM.');\n                clientID = process.env['ARM_CLIENT_ID'];\n                clientSecret = process.env['ARM_CLIENT_SECRET'];\n                this.tenantID = process.env['ARM_TENANT_ID'];\n                this.subscriptionID = process.env['ARM_SUBSCRIPTION_ID'];\n            }\n            // If they are still empty, try to get the credentials from Az CLI.\n            if (!clientID || !clientSecret || !this.tenantID || !this.subscriptionID) {\n                //console.log('ClientCredential: getting auth info from Azure CLI.');\n                // `create()` will throw an error if the Az CLI is not installed or `az login` has never been run.\n                const cliCredentials = yield msRestAzure.AzureCliCredentials.create();\n                this.subscriptionID =\n                    cliCredentials.tokenInfo.subscription ||\n                        cliCredentials.subscriptionInfo.id;\n                this.tenantID = cliCredentials.tokenInfo.tenant;\n                this.credentials = cliCredentials;\n            }\n            else {\n                this.credentials = yield msRestAzure.loginWithServicePrincipalSecret(clientID, clientSecret, this.tenantID);\n            }\n            return this.credentials;\n        });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f10(__0) {\n  return (function() {\n    with({ __awaiter: __f6 }) {\n\nreturn function /*signRequest*/(webResource) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return (yield this.getCredentials()).signRequest(webResource);\n        });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f11() {\n  return (function() {\n    with({ __awaiter: __f6 }) {\n\nreturn function /*getToken*/() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const c = yield this.getCredentials();\n            return yield c.getToken();\n        });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f7() {\n  return (function() {\n    with({ m: __m, k: \"ClientCredential\" }) {\n\nreturn function () { return m[k]; };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f2(__0) {\n  return (function() {\n    with({ keyvault_secrets_1: require(\"@azure/keyvault-secrets/dist/index.js\"), Base_1: __Base_1 }) {\n\nreturn function /*getClient*/(vaultName) {\n        if (this._client)\n            return this._client;\n        const url = `https://${vaultName}.vault.azure.net?api-version=7.0`;\n        this._client = new keyvault_secrets_1.SecretClient(url, new Base_1.ClientCredential());\n        return this._client;\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f12(__0) {\n  return (function() {\n    with({ __awaiter: __f6 }) {\n\nreturn function /*tryGetDeletedSecret*/(props) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const client = this.getClient(props.vaultInfo.name);\n            return yield client.getDeletedSecret(props.name).catch(() =\u003e undefined);\n        });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f13(__0) {\n  return (function() {\n    with({ __awaiter: __f6 }) {\n\nreturn function /*tryRecoverSecret*/(props) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const client = this.getClient(props.vaultInfo.name);\n            const deleted = yield this.tryGetDeletedSecret(props);\n            //Recover deleted items\n            if (deleted)\n                yield (yield client.beginRecoverDeletedSecret(deleted.name)).pollUntilDone();\n        });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f14(__0) {\n  return (function() {\n    with({ __awaiter: __f6 }) {\n\nreturn function /*create*/(props) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.tryRecoverSecret(props);\n            const client = this.getClient(props.vaultInfo.name);\n            const ss = yield client.setSecret(props.name, props.value, {\n                enabled: true,\n                contentType: props.contentType,\n                tags: props.tags,\n            });\n            return { id: ss.properties.id || this.name, outs: props };\n        });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f15(__0, __1, __2) {\n  return (function() {\n    with({ __awaiter: __f6 }) {\n\nreturn function /*update*/(id, olds, news) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const rs = yield this.create(news);\n            //Delete the old Secret\n            if (olds.name !== news.name || olds.vaultInfo.name !== news.vaultInfo.name)\n                yield this.delete(id, olds).catch((e) =\u003e { var _a; return console.log(`Cannot delete ${this.name}`, (_a = e === null || e === void 0 ? void 0 : e.resource) === null || _a === void 0 ? void 0 : _a.data); });\n            return rs;\n        });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f16(__0, __1) {\n  return (function() {\n    with({ __awaiter: __f6 }) {\n\nreturn function /*delete*/(id, props) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const client = this.getClient(props.vaultInfo.name);\n                yield client.beginDeleteSecret(props.name);\n            }\n            catch (_a) {\n                //Ignore\n            }\n        });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f17(__0, __1, __2) {\n  return (function() {\n    with({ __awaiter: __f6 }) {\n\nreturn function /*diff*/(id, previousOutput, news) {\n        return __awaiter(this, void 0, void 0, function* () {\n            //check if secret is delete then commit changes to recover it.\n            const deleted = yield this.tryGetDeletedSecret(news);\n            return {\n                deleteBeforeReplace: false,\n                changes: deleted != undefined ||\n                    previousOutput.name !== news.name ||\n                    previousOutput.vaultInfo.name !== news.vaultInfo.name ||\n                    previousOutput.value !== news.value ||\n                    previousOutput.contentType !== news.contentType,\n            };\n        });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f0() {\n  return (function() {\n    with({ provider: __provider }) {\n\nreturn () =\u003e provider;\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n",
                    "contentType": "Identity",
                    "name": "drunk-aks-principal-secret",
                    "value": {
                        "4dabf18193072939515e22adb298388d": "1b47061264138c4ac30d75fd1eb44270",
                        "ciphertext": "AAABAN1sQedWUzttiP9GFVuNVWAZP/K4OFJmns+5xBbfHYSnIunrIVu5IiPXtRSjg9lGd7iueQKPS7aP9kxiMUHvga8saYzK49oEZ6FF6B5dc6YjKOT+DYt1v6r8hB8Wxxch"
                    },
                    "vaultInfo": {
                        "group": {
                            "resourceGroupName": "global-grp-drunk"
                        },
                        "id": "/subscriptions/f146579d-929c-4f4b-a742-b4ad6ab9ef27/resourceGroups/global-grp-drunk/providers/Microsoft.KeyVault/vaults/global-drunk-vlt",
                        "name": "global-drunk-vlt"
                    }
                },
                "outputs": {
                    "__provider": "exports.handler = __f0;\n\nvar __provider_proto = {};\nObject.defineProperty(__f1, \"prototype\", { value: __provider_proto });\nObject.defineProperty(__provider_proto, \"constructor\", { configurable: true, writable: true, value: __f1 });\nvar __Base_1 = {};\nvar __f3_prototype = {};\nObject.defineProperty(__f3_prototype, \"constructor\", { configurable: true, writable: true, value: __f3 });\nObject.defineProperty(__f3_prototype, \"getCredentials\", { configurable: true, writable: true, value: __f4 });\nObject.defineProperty(__f3_prototype, \"getToken\", { configurable: true, writable: true, value: __f5 });\nObject.defineProperty(__f3, \"prototype\", { value: __f3_prototype });\nvar __m = {};\nObject.defineProperty(__m, \"__esModule\", { value: true });\n__m.ClientCredential = __f3;\nvar __f8_prototype = {};\nObject.defineProperty(__f8_prototype, \"constructor\", { configurable: true, writable: true, value: __f8 });\nObject.defineProperty(__f8_prototype, \"getCredentials\", { configurable: true, writable: true, value: __f9 });\nObject.defineProperty(__f8_prototype, \"signRequest\", { configurable: true, writable: true, value: __f10 });\nObject.defineProperty(__f8_prototype, \"getToken\", { configurable: true, writable: true, value: __f11 });\nObject.defineProperty(__f8, \"prototype\", { value: __f8_prototype });\n__m.InternalCredentials = __f8;\nObject.defineProperty(__Base_1, \"ClientCredential\", { enumerable: true, get: __f7 });\nObject.defineProperty(__provider_proto, \"getClient\", { configurable: true, writable: true, value: __f2 });\nObject.defineProperty(__provider_proto, \"tryGetDeletedSecret\", { configurable: true, writable: true, value: __f12 });\nObject.defineProperty(__provider_proto, \"tryRecoverSecret\", { configurable: true, writable: true, value: __f13 });\nObject.defineProperty(__provider_proto, \"create\", { configurable: true, writable: true, value: __f14 });\nObject.defineProperty(__provider_proto, \"update\", { configurable: true, writable: true, value: __f15 });\nObject.defineProperty(__provider_proto, \"delete\", { configurable: true, writable: true, value: __f16 });\nObject.defineProperty(__provider_proto, \"diff\", { configurable: true, writable: true, value: __f17 });\nvar __provider = Object.create(__provider_proto);\n__provider.name = \"dev-drunk-aks-principal-secret\";\n__provider._client = undefined;\n\nfunction __f1(__0) {\n  return (function() {\n    with({  }) {\n\nreturn function /*constructor*/(name) {\n        this.name = name;\n        this._client = undefined;\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f3() {\n  return (function() {\n    with({  }) {\n\nreturn function /*constructor*/() { };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f4() {\n  return (function() {\n    with({ native: require(\"@pulumi/azure-native/index.js\"), identity_1: require(\"@azure/identity/dist/index.js\") }) {\n\nreturn function /*getCredentials*/() {\n        if (this.credential)\n            return this.credential;\n        let clientID = native.config.clientId;\n        let clientSecret = native.config.clientSecret;\n        let tenantID = native.config.tenantId;\n        let subscriptionID = native.config.subscriptionId;\n        // If at least one of them is empty, try looking at the env vars.\n        if (!clientID || !clientSecret || !tenantID || !subscriptionID) {\n            //console.log('ClientCredential: getting auth info from ARM.');\n            clientID = process.env['ARM_CLIENT_ID'];\n            clientSecret = process.env['ARM_CLIENT_SECRET'];\n            tenantID = process.env['ARM_TENANT_ID'];\n            subscriptionID = process.env['ARM_SUBSCRIPTION_ID'];\n        }\n        if (tenantID \u0026\u0026 clientID \u0026\u0026 clientSecret) {\n            this.credential = new identity_1.ClientSecretCredential(tenantID, clientID, clientSecret);\n        }\n        return this.credential;\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f6(__0, __1, __2, __3) {\n  return (function() {\n    with({  }) {\n\nreturn function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f5(__0, __1) {\n  return (function() {\n    with({ __awaiter: __f6, msRestAzure: require(\"@azure/ms-rest-nodeauth/dist/lib/msRestNodeAuth.js\") }) {\n\nreturn function /*getToken*/(scopes, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const cre = this.getCredentials();\n            if (cre)\n                return cre.getToken(scopes, options);\n            const resource = Array.isArray(scopes) ? scopes[0] : scopes;\n            const token = yield msRestAzure.AzureCliCredentials.getAccessToken({\n                resource: resource.replace('/.default', ''),\n            });\n            return {\n                token: token.accessToken,\n                expiresOnTimestamp: 30,\n            };\n        });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f8() {\n  return (function() {\n    with({  }) {\n\nreturn function /*constructor*/() {\n        this.getCredentials();\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f9() {\n  return (function() {\n    with({ __awaiter: __f6, native: require(\"@pulumi/azure-native/index.js\"), msRestAzure: require(\"@azure/ms-rest-nodeauth/dist/lib/msRestNodeAuth.js\") }) {\n\nreturn function /*getCredentials*/() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.credentials)\n                return this.credentials;\n            let clientID = native.config.clientId;\n            let clientSecret = native.config.clientSecret;\n            this.tenantID = native.config.tenantId;\n            this.subscriptionID = native.config.subscriptionId;\n            // If at least one of them is empty, try looking at the env vars.\n            if (!clientID || !clientSecret || !this.tenantID || !this.subscriptionID) {\n                //console.log('ClientCredential: getting auth info from ARM.');\n                clientID = process.env['ARM_CLIENT_ID'];\n                clientSecret = process.env['ARM_CLIENT_SECRET'];\n                this.tenantID = process.env['ARM_TENANT_ID'];\n                this.subscriptionID = process.env['ARM_SUBSCRIPTION_ID'];\n            }\n            // If they are still empty, try to get the credentials from Az CLI.\n            if (!clientID || !clientSecret || !this.tenantID || !this.subscriptionID) {\n                //console.log('ClientCredential: getting auth info from Azure CLI.');\n                // `create()` will throw an error if the Az CLI is not installed or `az login` has never been run.\n                const cliCredentials = yield msRestAzure.AzureCliCredentials.create();\n                this.subscriptionID =\n                    cliCredentials.tokenInfo.subscription ||\n                        cliCredentials.subscriptionInfo.id;\n                this.tenantID = cliCredentials.tokenInfo.tenant;\n                this.credentials = cliCredentials;\n            }\n            else {\n                this.credentials = yield msRestAzure.loginWithServicePrincipalSecret(clientID, clientSecret, this.tenantID);\n            }\n            return this.credentials;\n        });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f10(__0) {\n  return (function() {\n    with({ __awaiter: __f6 }) {\n\nreturn function /*signRequest*/(webResource) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return (yield this.getCredentials()).signRequest(webResource);\n        });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f11() {\n  return (function() {\n    with({ __awaiter: __f6 }) {\n\nreturn function /*getToken*/() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const c = yield this.getCredentials();\n            return yield c.getToken();\n        });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f7() {\n  return (function() {\n    with({ m: __m, k: \"ClientCredential\" }) {\n\nreturn function () { return m[k]; };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f2(__0) {\n  return (function() {\n    with({ keyvault_secrets_1: require(\"@azure/keyvault-secrets/dist/index.js\"), Base_1: __Base_1 }) {\n\nreturn function /*getClient*/(vaultName) {\n        if (this._client)\n            return this._client;\n        const url = `https://${vaultName}.vault.azure.net?api-version=7.0`;\n        this._client = new keyvault_secrets_1.SecretClient(url, new Base_1.ClientCredential());\n        return this._client;\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f12(__0) {\n  return (function() {\n    with({ __awaiter: __f6 }) {\n\nreturn function /*tryGetDeletedSecret*/(props) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const client = this.getClient(props.vaultInfo.name);\n            return yield client.getDeletedSecret(props.name).catch(() =\u003e undefined);\n        });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f13(__0) {\n  return (function() {\n    with({ __awaiter: __f6 }) {\n\nreturn function /*tryRecoverSecret*/(props) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const client = this.getClient(props.vaultInfo.name);\n            const deleted = yield this.tryGetDeletedSecret(props);\n            //Recover deleted items\n            if (deleted)\n                yield (yield client.beginRecoverDeletedSecret(deleted.name)).pollUntilDone();\n        });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f14(__0) {\n  return (function() {\n    with({ __awaiter: __f6 }) {\n\nreturn function /*create*/(props) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.tryRecoverSecret(props);\n            const client = this.getClient(props.vaultInfo.name);\n            const ss = yield client.setSecret(props.name, props.value, {\n                enabled: true,\n                contentType: props.contentType,\n                tags: props.tags,\n            });\n            return { id: ss.properties.id || this.name, outs: props };\n        });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f15(__0, __1, __2) {\n  return (function() {\n    with({ __awaiter: __f6 }) {\n\nreturn function /*update*/(id, olds, news) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const rs = yield this.create(news);\n            //Delete the old Secret\n            if (olds.name !== news.name || olds.vaultInfo.name !== news.vaultInfo.name)\n                yield this.delete(id, olds).catch((e) =\u003e { var _a; return console.log(`Cannot delete ${this.name}`, (_a = e === null || e === void 0 ? void 0 : e.resource) === null || _a === void 0 ? void 0 : _a.data); });\n            return rs;\n        });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f16(__0, __1) {\n  return (function() {\n    with({ __awaiter: __f6 }) {\n\nreturn function /*delete*/(id, props) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const client = this.getClient(props.vaultInfo.name);\n                yield client.beginDeleteSecret(props.name);\n            }\n            catch (_a) {\n                //Ignore\n            }\n        });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f17(__0, __1, __2) {\n  return (function() {\n    with({ __awaiter: __f6 }) {\n\nreturn function /*diff*/(id, previousOutput, news) {\n        return __awaiter(this, void 0, void 0, function* () {\n            //check if secret is delete then commit changes to recover it.\n            const deleted = yield this.tryGetDeletedSecret(news);\n            return {\n                deleteBeforeReplace: false,\n                changes: deleted != undefined ||\n                    previousOutput.name !== news.name ||\n                    previousOutput.vaultInfo.name !== news.vaultInfo.name ||\n                    previousOutput.value !== news.value ||\n                    previousOutput.contentType !== news.contentType,\n            };\n        });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f0() {\n  return (function() {\n    with({ provider: __provider }) {\n\nreturn () =\u003e provider;\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n",
                    "contentType": "Identity",
                    "name": "drunk-aks-principal-secret",
                    "value": {
                        "4dabf18193072939515e22adb298388d": "1b47061264138c4ac30d75fd1eb44270",
                        "ciphertext": "AAABAPxWR/ANoNUk+/0g5AkQKJd5mzygea2p04exmgLQmaSADQ9IpGjgF6JIUjwGeWPBDsi7QhsoDxpRkgNqVRP//uMuCWNiUcpukCFH5M62k6t3JOojhUosYaGJX3NHryOm"
                    },
                    "vaultInfo": {
                        "group": {
                            "resourceGroupName": "global-grp-drunk"
                        },
                        "id": "/subscriptions/f146579d-929c-4f4b-a742-b4ad6ab9ef27/resourceGroups/global-grp-drunk/providers/Microsoft.KeyVault/vaults/global-drunk-vlt",
                        "name": "global-drunk-vlt"
                    }
                },
                "parent": "urn:pulumi:dev::azure-drunk-aks::pulumi:pulumi:Stack::azure-drunk-aks-dev",
                "dependencies": [
                    "urn:pulumi:dev::azure-drunk-aks::azuread:index/servicePrincipalPassword:ServicePrincipalPassword::dev-drunk-aks"
                ],
                "provider": "urn:pulumi:dev::azure-drunk-aks::pulumi:providers:pulumi-nodejs::default::16112b54-df04-4a88-8f97-ab00111abe86",
                "propertyDependencies": {
                    "__provider": null,
                    "contentType": null,
                    "name": null,
                    "value": [
                        "urn:pulumi:dev::azure-drunk-aks::azuread:index/servicePrincipalPassword:ServicePrincipalPassword::dev-drunk-aks"
                    ],
                    "vaultInfo": null
                }
            },
            {
                "urn": "urn:pulumi:dev::azure-drunk-aks::azure-native:authorization:ManagementLockByScope::drunk",
                "custom": true,
                "id": "/subscriptions/f146579d-929c-4f4b-a742-b4ad6ab9ef27/resourcegroups/dev-aks-grp-drunk/providers/Microsoft.ContainerService/managedClusters/dev-drunk-aks/providers/Microsoft.Authorization/locks/drunk-CanNotDelete",
                "type": "azure-native:authorization:ManagementLockByScope",
                "inputs": {
                    "level": "CanNotDelete",
                    "lockName": "drunk-CanNotDelete",
                    "notes": "Lock drunk from CanNotDelete",
                    "scope": "/subscriptions/f146579d-929c-4f4b-a742-b4ad6ab9ef27/resourcegroups/dev-aks-grp-drunk/providers/Microsoft.ContainerService/managedClusters/dev-drunk-aks"
                },
                "outputs": {
                    "__inputs": {
                        "4dabf18193072939515e22adb298388d": "1b47061264138c4ac30d75fd1eb44270",
                        "ciphertext": "AAABAJOZlCu8+WIIh9mHOZWfsLgN+b9tnF8nGSEE1qKZXUIVJy+4EQ3JIYQpb1sVlvPkaHSTF3nXy3RCek1+utQ+R0BzR4AnoBAeksu9dBNJ/oXq3mLagvdPG+r4N0Ua8I7LOGrzB64roGKlbwQMBjfeQy+XIc3sEAqBfpc6gqdBU19fQ00vF4VMTCb7u6Ja9oeVq3IpK7eGNrlMOYNO/AGgrVfYACvH99A/W6qrRvLuZvzcHx808zhF0qZie3WZrxHjf4/8X22h4ufu5LWonuyJthOq2WirBGPwpb7ujA9l5BKGYKrIrz8MUZIprYB4PJfrgyL3Mum1vrg/n4W23D+jvPnOGm/pH6qizJLPjQt9s1OVewS8EZ329Fg1VtC2fQ=="
                    },
                    "id": "/subscriptions/f146579d-929c-4f4b-a742-b4ad6ab9ef27/resourcegroups/dev-aks-grp-drunk/providers/Microsoft.ContainerService/managedClusters/dev-drunk-aks/providers/Microsoft.Authorization/locks/drunk-CanNotDelete",
                    "level": "CanNotDelete",
                    "name": "drunk-CanNotDelete",
                    "notes": "Lock drunk from CanNotDelete",
                    "type": "Microsoft.Authorization/locks"
                },
                "parent": "urn:pulumi:dev::azure-drunk-aks::pulumi:pulumi:Stack::azure-drunk-aks-dev",
                "protect": false,
                "dependencies": [
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:containerservice:ManagedCluster::dev-drunk-aks"
                ],
                "provider": "urn:pulumi:dev::azure-drunk-aks::pulumi:providers:azure-native::default_1_33_0::33a2a7a8-f510-4fb7-8a71-fa5966d30b3a",
                "propertyDependencies": {
                    "level": null,
                    "lockName": null,
                    "notes": null,
                    "scope": [
                        "urn:pulumi:dev::azure-drunk-aks::azure-native:containerservice:ManagedCluster::dev-drunk-aks"
                    ]
                },
                "pendingReplacement": true,
                "aliases": [
                    "urn:pulumi:dev::azure-drunk-aks::azure-nextgen:authorization:ManagementLockByScope::drunk",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:authorization/v20160901:ManagementLockByScope::drunk",
                    "urn:pulumi:dev::azure-drunk-aks::azure-nextgen:authorization/v20160901:ManagementLockByScope::drunk",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:authorization/v20170401:ManagementLockByScope::drunk",
                    "urn:pulumi:dev::azure-drunk-aks::azure-nextgen:authorization/v20170401:ManagementLockByScope::drunk",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:authorization/v20200501:ManagementLockByScope::drunk",
                    "urn:pulumi:dev::azure-drunk-aks::azure-nextgen:authorization/v20200501:ManagementLockByScope::drunk"
                ]
            },
            {
                "urn": "urn:pulumi:dev::azure-drunk-aks::azure-native:insights:DiagnosticSetting::drunk-diag",
                "custom": true,
                "id": "/subscriptions/f146579d-929c-4f4b-a742-b4ad6ab9ef27/resourcegroups/dev-aks-grp-drunk/providers/microsoft.containerservice/managedclusters/dev-drunk-aks/providers/microsoft.insights/diagnosticSettings/drunk-diag",
                "type": "azure-native:insights:DiagnosticSetting",
                "inputs": {
                    "logAnalyticsDestinationType": "AzureDiagnostics",
                    "logs": [
                        {
                            "category": "guard",
                            "enabled": true,
                            "retentionPolicy": {
                                "days": 7,
                                "enabled": false
                            }
                        },
                        {
                            "category": "kube-controller-manager",
                            "enabled": true,
                            "retentionPolicy": {
                                "days": 7,
                                "enabled": false
                            }
                        },
                        {
                            "category": "kube-audit-admin",
                            "enabled": true,
                            "retentionPolicy": {
                                "days": 7,
                                "enabled": false
                            }
                        },
                        {
                            "category": "kube-audit",
                            "enabled": true,
                            "retentionPolicy": {
                                "days": 7,
                                "enabled": false
                            }
                        },
                        {
                            "category": "kube-scheduler",
                            "enabled": true,
                            "retentionPolicy": {
                                "days": 7,
                                "enabled": false
                            }
                        },
                        {
                            "category": "cluster-autoscaler",
                            "enabled": true,
                            "retentionPolicy": {
                                "days": 7,
                                "enabled": false
                            }
                        }
                    ],
                    "metrics": [
                        {
                            "category": "AllMetrics",
                            "enabled": true,
                            "retentionPolicy": {
                                "days": 7,
                                "enabled": false
                            }
                        }
                    ],
                    "name": "drunk-diag",
                    "resourceUri": "/subscriptions/f146579d-929c-4f4b-a742-b4ad6ab9ef27/resourcegroups/dev-aks-grp-drunk/providers/Microsoft.ContainerService/managedClusters/dev-drunk-aks",
                    "workspaceId": "/subscriptions/f146579d-929c-4f4b-a742-b4ad6ab9ef27/resourcegroups/global-logs-grp-drunk/providers/microsoft.operationalinsights/workspaces/global-drunk-logs-log"
                },
                "outputs": {
                    "__inputs": {
                        "4dabf18193072939515e22adb298388d": "1b47061264138c4ac30d75fd1eb44270",
                        "ciphertext": "AAABABXqwG/w9Iu9+v7iDfrPWimIGhUTvcZUfL3U/Z52sB4fMv2FqMEE5j73OnXuo+Zu92yZ3j8kYzh41LRKpuioWvBPgUZILV7soQzLF4tKePXdxYQa4Ha38W/eYbS8Gi0Brx0QUeuDWWc7UGboC8y7T+RhrO1L4dJ2Nj0mO/PxKJaMenHScol3Ie8xYKGeLf9pPcgZUTzTcR580e6EBo5lkDuT10qKIfPYDuxUT8/k4sRbC9LtGEWcE/1+F2cqJp9KXtfOFkm0DrVb1FVNJlAVj6etDAZQ9bQ3DqpMyU4bYdWvPe686mvVkczDj4ddBugF6S4p2ESvlVWG8aCQ12TCHEJ9SObuneXGImyGMvgFQ5Ahc7Wh0/+Hw0sl0S1OkMVhONd2DhOICG9iU+URF51B4VyclhXYgKlZk3d0H0YJcdtHdUJpRgur8j8avAntWuRtaKhrFdiMoD2WJjUoOppDR9jAhOnwp89b0mm+i4Dz0OpkyeeQAE+eEwzrBzd1tVKan7n5XFZwXDxrKf9M/JMNwl28dRrH9YzzmfvZHxLqELypo4b9UP1OniI3/TDvV80Cw3zPQ+TOKXKczBHnmd2DgtFYFk+LmxkSl3kgmieFMV6g6CIONk1fnP6EIdUrM+p4qAQMEObFMcV/h68Z3oIYuhxlbDZVlVxouLw4R6nolwWYkGVqMV9D/0x2dAyiHvECph43VjpHOltJrjbFXBrLeYWX9WIaULXGq30CkbEDmDRioLAkCHzQ+0qc51G1GaU4C9iPp0sAeVzCakSAcxZdjRH+KVY9304g4ROGAddvYfNNS0obn8XXNy4vYk9wprLC6Yv4VBaSvsg2eGA1ASwWSlI0HAL9w9YZt1x8ZtV2iJ22DKcw1pzAeoFRlNbw6ms12x7POL27XUozH7syebLkV4fpKJcBkopD//45uNl2TpHZRkVRSuFEs+JUFWF8k0lY6eoi5unAh4r3bsdSPNop2iW860Aw13F3LTdmHc94qCqPTA/v63m1M3heUaa4ngtVe0eivvycbRdzmOGjsWTfnsrePghU/oyS2RJDr0GiML8m/GvCtyhCYxGbNsoFNzTv7g0JB4L2UIDsRdJ7PV1KWa/HZqWamW/is8WmWs/+Yu1Nrur61Ap3NbeU781FR+7M3kmJINC3qp1nYJAr/b6OdphydxbDzVWYWhMwpMqoMyd/yeM4NPOL0KsTtgJ+QtWE4j0/7C8WNHNSZiIM/QJ7fkhA3YKsfPBCtA0n9/I6Wu2KrUrTh66+Yot7fQ6SjZqT/R6VRqcMRYj5Sluj+0kcqfOAo8JtltNX1jBObDMDbNkL1eGwRqe7Vc0tYSBK6xETTUVCmeHuHd0pnjAM7bxlZCWwPZzTVuya93OKqowoaQB7SKH3LkHa+xwq3RhuqrlkucRfWltA4d4hcDV431Hn4xFisLHOWt1DkUUVECoIIgfObTDXEMo="
                    },
                    "id": "/subscriptions/f146579d-929c-4f4b-a742-b4ad6ab9ef27/resourcegroups/dev-aks-grp-drunk/providers/microsoft.containerservice/managedclusters/dev-drunk-aks/providers/microsoft.insights/diagnosticSettings/drunk-diag",
                    "logAnalyticsDestinationType": "AzureDiagnostics",
                    "logs": [
                        {
                            "category": "guard",
                            "enabled": true,
                            "retentionPolicy": {
                                "days": 0,
                                "enabled": false
                            }
                        },
                        {
                            "category": "kube-controller-manager",
                            "enabled": true,
                            "retentionPolicy": {
                                "days": 0,
                                "enabled": false
                            }
                        },
                        {
                            "category": "kube-audit-admin",
                            "enabled": true,
                            "retentionPolicy": {
                                "days": 0,
                                "enabled": false
                            }
                        },
                        {
                            "category": "kube-audit",
                            "enabled": true,
                            "retentionPolicy": {
                                "days": 0,
                                "enabled": false
                            }
                        },
                        {
                            "category": "kube-scheduler",
                            "enabled": true,
                            "retentionPolicy": {
                                "days": 0,
                                "enabled": false
                            }
                        },
                        {
                            "category": "cluster-autoscaler",
                            "enabled": true,
                            "retentionPolicy": {
                                "days": 0,
                                "enabled": false
                            }
                        }
                    ],
                    "metrics": [
                        {
                            "category": "AllMetrics",
                            "enabled": true,
                            "retentionPolicy": {
                                "days": 0,
                                "enabled": false
                            },
                            "timeGrain": "PT1M"
                        }
                    ],
                    "name": "drunk-diag",
                    "type": "Microsoft.Insights/diagnosticSettings",
                    "workspaceId": "/subscriptions/f146579d-929c-4f4b-a742-b4ad6ab9ef27/resourcegroups/global-logs-grp-drunk/providers/microsoft.operationalinsights/workspaces/global-drunk-logs-log"
                },
                "parent": "urn:pulumi:dev::azure-drunk-aks::pulumi:pulumi:Stack::azure-drunk-aks-dev",
                "provider": "urn:pulumi:dev::azure-drunk-aks::pulumi:providers:azure-native::default_1_33_0::33a2a7a8-f510-4fb7-8a71-fa5966d30b3a",
                "propertyDependencies": {
                    "logAnalyticsDestinationType": null,
                    "logs": null,
                    "metrics": null,
                    "name": null,
                    "resourceUri": null,
                    "workspaceId": null
                },
                "aliases": [
                    "urn:pulumi:dev::azure-drunk-aks::azure-nextgen:insights:DiagnosticSetting::drunk-diag",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:insights/v20170501preview:DiagnosticSetting::drunk-diag",
                    "urn:pulumi:dev::azure-drunk-aks::azure-nextgen:insights/v20170501preview:DiagnosticSetting::drunk-diag",
                    "urn:pulumi:dev::azure-drunk-aks::azure-native:insights/v20210501preview:DiagnosticSetting::drunk-diag",
                    "urn:pulumi:dev::azure-drunk-aks::azure-nextgen:insights/v20210501preview:DiagnosticSetting::drunk-diag"
                ]
            }
        ],
        "pending_operations": [

        ]
    }
}
